module;

#include <common.hxx>

export module natives;

import <stdint.h>;
import <vector>;
import common;
import comvars;

export using Any = int32_t;
export using Weapon = int32_t;
export using Player = int32_t;
export using FireId = int32_t;
export using Ped = int32_t;
export using Vehicle = int32_t;
export using Cam = int32_t;
export using CarGenerator = int32_t;
export using Group = int32_t;
export using Train = int32_t;
export using Pickup = int32_t;
export using Object = int32_t;
export using Interior = int32_t;
export using Blip = int32_t;
export using Texture = int32_t;
export using TextureDict = int32_t;
export using CoverPoint = int32_t;
export using DecisionMaker = int32_t;
export using Camera = int32_t;
export using TaskSequence = int32_t;
export using Char = int32_t;
export using Car = int32_t;
export using ColourIndex = int32_t;
export using Sphere = int32_t;
export using ExplosionType = int32_t;
export using ShootMode = int32_t;
export using RelationshipGroup = int32_t;
export using QuadChar = int32_t;

export struct Vector3
{
    float fX;
    float fY;
    float fZ;
};

export struct Vector4
{
    float fX;
    float fY;
    float fZ;
    float fW;
};

export struct Color32 {
    uint8_t b;
    uint8_t g;
    uint8_t r;
    uint8_t a;
};

export class scrNativeCallContext
{
protected:
    void* m_pReturn;
    uint32_t m_nArgCount;
    void* m_pArgs;
    uint32_t m_nDataCount;
    Vector3* m_pOriginalData[4];
    Vector4  m_TemporaryData[4];

public:
    template<typename T>
    inline T GetArgument(int idx)
    {
        auto arguments = (intptr_t*)m_pArgs;
        return *reinterpret_cast<T*>(&arguments[idx]);
    }

    inline void* GetArgumentBuffer()
    {
        return m_pArgs;
    }

    template<typename T>
    inline void SetResult(int idx, T value)
    {
        auto returnValues = (intptr_t*)m_pReturn;
        *reinterpret_cast<T*>(&returnValues[idx]) = value;
    }

    inline int GetArgumentCount()
    {
        return m_nArgCount;
    }

    template<typename T>
    inline T GetResult(int idx)
    {
        while (m_nDataCount > 0)
        {
            m_nDataCount--;
            Vector3* pVec3 = m_pOriginalData[m_nDataCount];
            Vector4* pVec4 = &m_TemporaryData[m_nDataCount];
            pVec3->fX = pVec4->fX;
            pVec3->fY = pVec4->fY;
            pVec3->fZ = pVec4->fZ;
        }
        auto returnValues = (intptr_t*)m_pReturn;
        return *reinterpret_cast<T*>(&returnValues[idx]);
    }
};

export class NativeContext : public scrNativeCallContext
{
private:
    // Configuration
    enum
    {
        MaxNativeParams = 16,
        ArgSize = 4,
    };

    // Anything temporary that we need
    uint8_t m_TempStack[MaxNativeParams * ArgSize] = {};

public:
    inline NativeContext()
    {
        m_pArgs = &m_TempStack;
        m_pReturn = &m_TempStack;		// It's okay to point both args and return at the same pointer. The game should handle this.
        m_nArgCount = 0;
        m_nDataCount = 0;
    }

    template <typename T>
    inline void Push(T value)
    {
        if (sizeof(T) > ArgSize)
        {
            // We only accept sized 4 or less arguments... that means no double/f64 or large structs are allowed.
            throw "Argument has an invalid size";
        }
        else if (sizeof(T) < ArgSize)
        {
            // Ensure we don't have any stray data
            *reinterpret_cast<uintptr_t*>(m_TempStack + ArgSize * m_nArgCount) = 0;
        }

        *reinterpret_cast<T*>(m_TempStack + ArgSize * m_nArgCount) = value;
        m_nArgCount++;
    }

    template <typename T>
    inline T GetResult()
    {
        return *reinterpret_cast<T*>(m_TempStack);
    }
};

export class NativeInvoke
{
private:
    typedef void (*ncall)(NativeContext*);
    static inline auto m_IndexTable = std::vector<ncall>(4000, nullptr);
public:
    static ncall GetNativeHandler(uint32_t Hash)
    {
        if (getNativeAddress)
            return reinterpret_cast<ncall>(getNativeAddress(Hash));
        
        auto ms_pNatives = *rage::scrEngine::ms_pNatives;
        auto ms_dwNativeTableSize = *rage::scrEngine::ms_dwNativeTableSize;

        if (ms_dwNativeTableSize == 0 || Hash == 0)
            return nullptr;

        auto nativeIndex = Hash % ms_dwNativeTableSize;
        auto tmpHash = Hash;
        auto Handler = ms_pNatives[2 * (Hash % ms_dwNativeTableSize)];

        if (Handler != Hash)
        {
            while (Handler)
            {
                tmpHash = (tmpHash >> 1) + 1;
                nativeIndex = (tmpHash + nativeIndex) % ms_dwNativeTableSize;
                Handler = ms_pNatives[2 * nativeIndex];
                if (Handler == Hash)
                    break;
            }
        }

        if (!Handler)
            return nullptr;

        return reinterpret_cast<ncall>(ms_pNatives[2 * nativeIndex + 1]);
    }
public:
    template<uint32_t Index, uint32_t Hash, typename R, typename... Args>
    static inline R Invoke(Args... args)
    {
        NativeContext cxt;
        (cxt.Push(args), ...);

        if (CTimer::m_CodePause && !*CTimer::m_CodePause)
        {
            if (!m_IndexTable[Index])
            {
                auto fn = GetNativeHandler(Hash);
                if (fn) {
                    m_IndexTable[Index] = fn;
                    fn(&cxt);
                }
            }
            else
            {
                m_IndexTable[Index](&cxt);
            }
        }

        if constexpr (!std::is_void_v<R>)
        {
            return cxt.GetResult<R>();
        }
    }
};

export class Natives
{
public:
    enum class NativeHashes : uint32_t {
        ABORT_ALL_GARAGE_ACTIVITY = 0x5DB95843,
        ABORT_SCRIPTED_CONVERSATION = 0x57DB70CE,
        ABSF = 0x67640F3,
        ABSI = 0x75A648B7,
        ACOS = 0x2E746E53,
        ACTIVATE_CHEAT = 0x69E742FC,
        ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID = 0x1181CA3,
        ACTIVATE_FRONTEND = 0x3C64626F,
        ACTIVATE_HELI_SPEED_CHEAT = 0x33B52CA,
        ACTIVATE_INTERIOR = 0x66DD4F67,
        ACTIVATE_MENU_ITEM = 0x608237A4,
        ACTIVATE_NETWORK_SETTINGS_MENU = 0x609D0203,
        ACTIVATE_REPLAY_MENU = 0x61040B08,
        ACTIVATE_SAVE_MENU = 0x78AC735F,
        ACTIVATE_SCRIPTED_CAMS = 0x3EBE11B9,
        ACTIVATE_SCRIPT_POPULATION_ZONE = 0x3F90052,
        ACTIVATE_VECTOR_MAP = 0x2E7D1C82,
        ACTIVATE_VIEWPORT = 0x4D7D105A,
        ADD_ADDITIONAL_POPULATION_MODEL = 0x7EDE120F,
        ADD_AMMO_TO_CHAR = 0x1ADA0C3A,
        ADD_AREA_TO_NETWORK_RESTART_NODE_GROUP_MAPPING = 0x52DF5310,
        ADD_ARMOUR_TO_CHAR = 0x1C623537,
        ADD_BLIP_FOR_CAR = 0x6D21564D,
        ADD_BLIP_FOR_CHAR = 0x19A64C5D,
        ADD_BLIP_FOR_CONTACT = 0x7C671162,
        ADD_BLIP_FOR_COORD = 0x3E7D3074,
        ADD_BLIP_FOR_GANG_TERRITORY = 0x2C1B52CE,
        ADD_BLIP_FOR_OBJECT = 0x70CC1487,
        ADD_BLIP_FOR_PICKUP = 0x4F567FB,
        ADD_BLIP_FOR_RADIUS = 0x21804D1A,
        ADD_BLIP_FOR_WEAPON = 0x4CA708B9,
        ADD_CAM_SPLINE_NODE = 0x3B4F1EBA,
        ADD_CAR_TO_MISSION_DELETION_LIST = 0x45E80BF7,
        ADD_CHAR_DECISION_MAKER_EVENT_RESPONSE = 0x65536ECF,
        ADD_COMBAT_DECISION_MAKER_EVENT_RESPONSE = 0x530A7CE5,
        ADD_COVER_BLOCKING_AREA = 0x6E856548,
        ADD_COVER_POINT = 0x18D5264D,
        ADD_EXPLOSION = 0x32DA5E3A,
        ADD_EXPLOSION_WITH_DIRECTION = 0x71855E7C,
        ADD_FIRST_N_CHARACTERS_OF_STRING_TO_HTML_SCRIPT_OBJECT = 0x75FC34EF,
        ADD_FOLLOW_NAVMESH_TO_PHONE_TASK = 0x7F5D69C4,
        ADD_GROUP_TO_NETWORK_RESTART_NODE_GROUP_LIST = 0x592E0E0F,
        ADD_HOSPITAL_RESTART = 0x2AB06643,
        ADD_LINE_TO_CONVERSATION = 0x75080482,
        ADD_LINE_TO_MOBILE_PHONE_CALL = 0xBED1DDE,
        ADD_LINE_TO_SCRIPTED_CONVERSATION = 0x416413F6,
        ADD_NAVMESH_REQUIRED_REGION = 0x6CB64BDB,
        ADD_NEEDED_AT_POSN = 0x2E831921,
        ADD_NETWORK_RESTART = 0x6A6A12D7,
        ADD_NEW_CONVERSATION_SPEAKER = 0x542D499E,
        ADD_NEW_FRONTEND_CONVERSATION_SPEAKER = 0x13D44996,
        ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS = 0x1B086D33,
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_KEY = 0x67D83807,
        ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME = 0x76863C9,
        ADD_PED_QUEUE = 0x4E043F3C,
        ADD_PED_TO_CINEMATOGRAPHY_AI = 0x62687944,
        ADD_PED_TO_MISSION_DELETION_LIST = 0x10F64FBF,
        ADD_PICKUP_TO_INTERIOR_ROOM_BY_KEY = 0x198B786F,
        ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME = 0x365042F,
        ADD_POINT_TO_GPS_RACE_TRACK = 0x5BE115FD,
        ADD_POLICE_RESTART = 0x42492860,
        ADD_SCENARIO_BLOCKING_AREA = 0x4C1E3A64,
        ADD_SCORE = 0x537379A8,
        ADD_SIMPLE_BLIP_FOR_PICKUP = 0x44B30452,
        ADD_SPAWN_BLOCKING_AREA = 0x36DF37DB,
        ADD_SPAWN_BLOCKING_DISC = 0x2B4E2A8C,
        ADD_SPHERE = 0x42252652,
        ADD_STRING_TO_HTML_SCRIPT_OBJECT = 0x7EB70379,
        ADD_STRING_TO_NEWS_SCROLLBAR = 0x192E5726,
        ADD_STRING_WITH_THIS_TEXT_LABEL_TO_PREVIOUS_BRIEF = 0x76860554,
        ADD_STUCK_CAR_CHECK = 0x3A01B12,
        ADD_STUCK_CAR_CHECK_WITH_WARP = 0x3BCA4ACA,
        ADD_STUNT_JUMP = 0x422E7AC3,
        ADD_TEXT_WIDGET = 0x7537050D,
        ADD_TICKER_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE = 0x20E0318,
        ADD_TO_HTML_SCRIPT_OBJECT = 0x3ECC0086,
        ADD_TO_PREVIOUS_BRIEF = 0x446E6515,
        ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE = 0x3D0A71A2,
        ADD_TO_WIDGET_COMBO = 0x4F0D4AC7,
        ADD_UPSIDEDOWN_CAR_CHECK = 0x557C076C,
        ADD_WIDGET_FLOAT_READ_ONLY = 0x4C8A7614,
        ADD_WIDGET_FLOAT_SLIDER = 0x6F9256DF,
        ADD_WIDGET_READ_ONLY = 0x4A2E3BCA,
        ADD_WIDGET_SLIDER = 0x4A904476,
        ADD_WIDGET_STRING = 0x27D20F21,
        ADD_WIDGET_TOGGLE = 0x66F47727,
        ALLOCATE_SCRIPT_TO_OBJECT = 0x71C30148,
        ALLOCATE_SCRIPT_TO_RANDOM_PED = 0x19DB19D8,
        ALLOW_ALL_CHAR_PROPS = 0x2B7B71B9,
        ALLOW_AUTO_CONVERSATION_LOOKATS = 0x736D423E,
        ALLOW_EMERGENCY_SERVICES = 0x69A72C50,
        ALLOW_GAME_TO_PAUSE_FOR_STREAMING = 0x85E559E,
        ALLOW_GANG_RELATIONSHIPS_TO_BE_CHANGED_BY_NEXT_COMMAND = 0x585157FE,
        ALLOW_LOCKON_TO_FRIENDLY_PLAYERS = 0x362B5D1B,
        ALLOW_LOCKON_TO_RANDOM_PEDS = 0x6FE455D8,
        ALLOW_MULTIPLE_DRIVEBY_PICKUPS = 0x7FC02528,
        ALLOW_NETWORK_POPULATION_GROUP_CYCLING = 0x61C100F5,
        ALLOW_ONE_TIME_ONLY_COMMANDS_TO_RUN = 0x3B2E3198,
        ALLOW_PLAYER_TO_CARRY_NON_MISSION_OBJECTS = 0x6A0A724C,
        ALLOW_REACTION_ANIMS = 0xFEA6230,
        ALLOW_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND = 0x6EEE7E6C,
        ALLOW_STUNT_JUMPS_TO_TRIGGER = 0x5E8D7E3F,
        ALLOW_TARGET_WHEN_INJURED = 0x33F8250B,
        ALLOW_THIS_SCRIPT_TO_BE_PAUSED = 0x3514533B,
        ALTER_WANTED_LEVEL = 0x60C80EC9,
        ALTER_WANTED_LEVEL_NO_DROP = 0x5F3B6079,
        ALWAYS_USE_HEAD_ON_HORN_ANIM_WHEN_DEAD_IN_CAR = 0x7C156670,
        AMBIENT_AUDIO_BANK_NO_LONGER_NEEDED = 0x292349C7,
        ANCHOR_BOAT = 0x2E12687B,
        ANCHOR_OBJECT = 0x5785181B,
        APPLY_FORCE_TO_CAR = 0x434611A3,
        APPLY_FORCE_TO_OBJECT = 0x438F6ECB,
        APPLY_FORCE_TO_PED = 0x7305301D,
        APPLY_WANTED_LEVEL_CHANGE_NOW = 0x705A6ED9,
        ARE_ALL_NAVMESH_REGIONS_LOADED = 0x73737990,
        ARE_ANY_CAR_CHEATS_ACTIVATED = 0xDC8F8D34,
        ARE_ANY_CHARS_NEAR_CHAR = 0xF4A4FB2,
        ARE_CREDITS_FINISHED = 0x63A669B6,
        ARE_ENEMY_PEDS_IN_AREA = 0x5C081186,
        ARE_MEASUREMENTS_IN_METRES = 0x145D8F6D,
        ARE_TAXI_LIGHTS_ON = 0x5F4B0B22,
        ARE_WIDESCREEN_BORDERS_ACTIVE = 0x4FE17259,
        ASCII_INT_TO_STRING = 0x7F4C0E47,
        ASIN = 0x590A6F04,
        ATAN = 0x7FFE0A12,
        ATAN2 = 0x10A1449C,
        ATTACH_ANIMS_TO_MODEL = 0xB5704E0,
        ATTACH_CAM_TO_OBJECT = 0x2966710D,
        ATTACH_CAM_TO_PED = 0x78B00CB2,
        ATTACH_CAM_TO_VEHICLE = 0x5E564CFF,
        ATTACH_CAM_TO_VIEWPORT = 0x21A3110A,
        ATTACH_CAR_TO_CAR = 0x64146142,
        ATTACH_CAR_TO_CAR_PHYSICALLY = 0x778F46E3,
        ATTACH_CAR_TO_OBJECT = 0x61C81E88,
        ATTACH_CAR_TO_OBJECT_PHYSICALLY = 0x32E57C15,
        ATTACH_OBJECT_TO_CAR = 0x7E81412A,
        ATTACH_OBJECT_TO_CAR_PHYSICALLY = 0x161B05A9,
        ATTACH_OBJECT_TO_OBJECT = 0x89E42C1,
        ATTACH_OBJECT_TO_OBJECT_PHYSICALLY = 0x28663AA6,
        ATTACH_OBJECT_TO_PED = 0x577A699E,
        ATTACH_OBJECT_TO_PED_PHYSICALLY = 0x1F760E1A,
        ATTACH_PARACHUTE_MODEL_TO_PLAYER = 0x7EDD58E1,
        ATTACH_PED_TO_CAR = 0x3EFC1A7D,
        ATTACH_PED_TO_CAR2 = 0x10C91E4D,
        ATTACH_PED_TO_CAR_PHYSICALLY = 0x7FF3248C,
        ATTACH_PED_TO_OBJECT = 0x376917AB,
        ATTACH_PED_TO_OBJECT_PHYSICALLY = 0x782E78BF,
        ATTACH_PED_TO_SHIMMY_EDGE = 0x860560B,
        ATTACH_PED_TO_WORLD_PHYSICALLY = 0x58086CC7,
        AWARD_ACHIEVEMENT = 0x5ED03255,
        AWARD_NETWORK_POINTS = 0x7645E867,
        AWARD_PLAYER_MISSION_RESPECT = 0x7783449D,
        BEGIN_CAM_COMMANDS = 0x351F4C86,
        BEGIN_CHAR_SEARCH_CRITERIA = 0x43F86230,
        BEGIN_PED_QUEUE_MEMBERSHIP_LIST = 0x28CA3430,
        BLEND_FROM_NM_WITH_ANIM = 0x6E405BD5,
        BLEND_OUT_CHAR_MOVE_ANIMS = 0x65A34B7A,
        BLOCK_CHAR_AMBIENT_ANIMS = 0x1A2D7640,
        BLOCK_CHAR_GESTURE_ANIMS = 0x1C144E4E,
        BLOCK_CHAR_HEAD_IK = 0x3EFA66E8,
        BLOCK_CHAR_VISEME_ANIMS = 0x44881D27,
        BLOCK_COWERING_IN_COVER = 0x1866612D,
        BLOCK_PED_WEAPON_SWITCHING = 0x315238D5,
        BLOCK_PEEKING_IN_COVER = 0x15101503,
        BLOCK_STATS_MENU_ACTIONS = 0x734E3F62,
        BREAKPOINT = 0x5AE10E31,
        BREAK_CAR_DOOR = 0x18BD071B,
        BURST_CAR_TYRE = 0x690D344F,
        CALCULATE_CHECKSUM = 0x18A302CD,
        CALCULATE_FURTHEST_NETWORK_RESTART_NODES = 0x8476FCF,
        CALCULATE_TRAVEL_DISTANCE_BETWEEN_NODES = 0x9A558A5,
        CAM_IS_SPHERE_VISIBLE = 0x2D5611D4,
        CAM_PROCESS = 0x52411DDA,
        CAM_RESTORE = 0x348F612D,
        CAM_RESTORE_JUMPCUT = 0x538021CD,
        CAM_SEQUENCE_CLOSE = 0x5D975A46,
        CAM_SEQUENCE_GET_PROGRESS = 0x7AAD273F,
        CAM_SEQUENCE_OPEN = 0x5D867A02,
        CAM_SEQUENCE_REMOVE = 0x1473ACB,
        CAM_SEQUENCE_START = 0x26335EE7,
        CAM_SEQUENCE_STOP = 0x282E4EFB,
        CAM_SEQUENCE_WAIT = 0xD970483,
        CAM_SET_CINEMATIC = 0x63A86D87,
        CAM_SET_DOLLY_ZOOM_LOCK = 0x25071DF3,
        CAM_SET_INTERPOLATION_DETAILS = 0x5AAC39C1,
        CAM_SET_INTERP_GRAPH_POS = 0x3C7C3E89,
        CAM_SET_INTERP_GRAPH_ROT = 0x1C5B7C51,
        CAM_SET_INTERP_STATE_DST = 0x00000000,
        CAM_SET_INTERP_STATE_SRC = 0x32C67124,
        CANCEL_CURRENTLY_PLAYING_AMBIENT_SPEECH = 0x495D445F,
        CANCEL_OVERRIDE_RESTART = 0x6ED83424,
        CAN_BE_DESCRIBED_AS_A_CAR = 0x79103802,
        CAN_CHAR_SEE_DEAD_CHAR = 0x7ED82ED9,
        CAN_CREATE_RANDOM_CHAR = 0x5CD64D63,
        CAN_FONT_BE_LOADED = 0x1E2A5820,
        CAN_PED_DO_SHIMMY_HERE = 0x80A11E7D,
        CAN_PED_SHIMMY_IN_DIRECTION = 0x6D1E5C25,
        CAN_PHONE_BE_SEEN_ON_SCREEN = 0x5C9863F6,
        CAN_PLAYER_START_MISSION = 0x2A235D0,
        CAN_REGISTER_MISSION_ENTITIES = 0x66FD3CFC,
        CAN_REGISTER_MISSION_OBJECT = 0x42F1557D,
        CAN_REGISTER_MISSION_PED = 0x1DC730B8,
        CAN_REGISTER_MISSION_VEHICLE = 0x200A510B,
        CAN_RENDER_RADIOHUD_SPRITE_IN_MOBILE_PHONE = 0x58F209BD,
        CAN_START_MISSION_PASSED_TUNE = 0x22AB641D,
        CAN_THE_STAT_HAVE_STRING = 0xB651AFB,
        CEIL = 0x76181322,
        CELL_CAM_ACTIVATE = 0x446F74E5,
        CELL_CAM_IS_CHAR_VISIBLE = 0xD6C0836,
        CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK = 0x770600CF,
        CELL_CAM_SET_CENTRE_POS = 0x32C67003,
        CELL_CAM_SET_COLOUR_BRIGHTNESS = 0x4ECB189E,
        CELL_CAM_SET_ZOOM = 0x87C5347,
        CHANGE_BLIP_ALPHA = 0x2FB14E41,
        CHANGE_BLIP_COLOUR = 0x1D8800E3,
        CHANGE_BLIP_DISPLAY = 0x3ACC1794,
        CHANGE_BLIP_NAME_FROM_ASCII = 0x6C9F2330,
        CHANGE_BLIP_NAME_FROM_TEXT_FILE = 0xA9D695E,
        CHANGE_BLIP_NAME_TO_PLAYER_NAME = 0x731B11A7,
        CHANGE_BLIP_PRIORITY = 0x69EC0E70,
        CHANGE_BLIP_ROTATION = 0x3AF307B1,
        CHANGE_BLIP_SCALE = 0x44D349D9,
        CHANGE_BLIP_SPRITE = 0x6A90123D,
        CHANGE_BLIP_TEAM_RELEVANCE = 0x4B2625BE,
        CHANGE_CAR_COLOUR = 0x6441EAF,
        CHANGE_CHAR_SIT_IDLE_ANIM = 0x7B2822F7,
        CHANGE_GARAGE_TYPE = 0x6E0A438A,
        CHANGE_PICKUP_BLIP_COLOUR = 0x65D949B7,
        CHANGE_PICKUP_BLIP_DISPLAY = 0x3E5F2362,
        CHANGE_PICKUP_BLIP_PRIORITY = 0x31321D1A,
        CHANGE_PICKUP_BLIP_SCALE = 0x4F66544E,
        CHANGE_PICKUP_BLIP_SPRITE = 0x5766DDE,
        CHANGE_PLAYBACK_TO_USE_AI = 0x76EB2878,
        CHANGE_PLAYER_MODEL = 0x232F1A85,
        CHANGE_PLAYER_PHONE_MODEL = 0x7F2A71FD,
        CHANGE_PLAYER_PHONE_MODEL_OFFSETS = 0x481E2BE7,
        CHANGE_TERRITORY_BLIP_SCALE = 0x35A250C2,
        CHEAT_HAPPENED_RECENTLY = 0x7488454D,
        CHECK_NM_FEEDBACK = 0x7C4C63EF,
        CHECK_STUCK_TIMER = 0x15285933,
        CLAN_IS_PENDING = 0x34F0C37,
        CLEAR_ADDITIONAL_TEXT = 0xA1B465C,
        CLEAR_ALL_CHAR_PROPS = 0x232A52FA,
        CLEAR_ALL_CHAR_RELATIONSHIPS = 0x57297D58,
        CLEAR_ALL_SCRIPT_FIRE_FLAGS = 0x40DBAA55,
        CLEAR_ANGLED_AREA_OF_CARS = 0x7E2A7743,
        CLEAR_AREA = 0x27722942,
        CLEAR_AREA_OF_CARS = 0x24367E48,
        CLEAR_AREA_OF_CHARS = 0xC2747B9,
        CLEAR_AREA_OF_COPS = 0x5F182E21,
        CLEAR_AREA_OF_OBJECTS = 0x118A67C9,
        CLEAR_BIT = 0x66D57CC4,
        CLEAR_BRIEF = 0x16D762E5,
        CLEAR_CAR_LAST_DAMAGE_ENTITY = 0x4D6665F7,
        CLEAR_CAR_LAST_WEAPON_DAMAGE = 0x31102E20,
        CLEAR_CHAR_DECISION_MAKER_EVENT_RESPONSE = 0x3F491F21,
        CLEAR_CHAR_LAST_DAMAGE_BONE = 0x1A013092,
        CLEAR_CHAR_LAST_DAMAGE_ENTITY = 0xAB9317B,
        CLEAR_CHAR_LAST_WEAPON_DAMAGE = 0x718508B4,
        CLEAR_CHAR_PROP = 0x51546112,
        CLEAR_CHAR_RELATIONSHIP = 0x42DB145F,
        CLEAR_CHAR_SECONDARY_TASK = 0x7FC96DD5,
        CLEAR_CHAR_TASKS = 0x4AB470F3,
        CLEAR_CHAR_TASKS_IMMEDIATELY = 0x3C116620,
        CLEAR_COMBAT_DECISION_MAKER_EVENT_RESPONSE = 0x4FEE5CC2,
        CLEAR_CONVERSATION_FOR_CHAR = 0xD483BB11,
        CLEAR_CUTSCENE = 0x79611458,
        CLEAR_EVENT_PRECEDENCE = 0x1CC41C5E,
        CLEAR_GROUP_DECISION_MAKER_EVENT_RESPONSE = 0x4FEE5CC2,
        CLEAR_HELP = 0x7244253,
        CLEAR_NAMED_CUTSCENE = 0x62EF058E,
        CLEAR_NETWORK_RESTART_NODE_GROUP_LIST = 0x1BDA1F9A,
        CLEAR_NEWS_SCROLLBAR = 0xD721EEA,
        CLEAR_OBJECT_LAST_DAMAGE_ENTITY = 0x64BE2E39,
        CLEAR_OBJECT_LAST_WEAPON_DAMAGE = 0x15F11BAB,
        CLEAR_ONSCREEN_COUNTER = 0x3F236954,
        CLEAR_ONSCREEN_TIMER = 0x34C751A2,
        CLEAR_PED_NON_CREATION_AREA = 0xC1C7919,
        CLEAR_PED_NON_REMOVAL_AREA = 0xA74017B,
        CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED = 0x45AB718F,
        CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_VEHICLE = 0x26AA20CF,
        CLEAR_PRINTS = 0x1D8C324A,
        CLEAR_RELATIONSHIP = 0x3FF16CBC,
        CLEAR_ROOM_FOR_CAR = 0x5FD24FEA,
        CLEAR_ROOM_FOR_CHAR = 0x405B16CF,
        CLEAR_ROOM_FOR_DUMMY_CHAR = 0x2E373084,
        CLEAR_ROOM_FOR_OBJECT = 0x12ED69A6,
        CLEAR_ROOM_FOR_VIEWPORT = 0x7A583068,
        CLEAR_SCRIPTED_CONVERSION_CENTRE = 0x2E4662B3,
        CLEAR_SCRIPT_ARRAY_FROM_SCRATCHPAD = 0x6E120246,
        CLEAR_SEQUENCE_TASK = 0x7ED774FE,
        CLEAR_SHAKE_PLAYERPAD_WHEN_CONTROLLER_DISABLED = 0x3F1F51E0,
        CLEAR_SMALL_PRINTS = 0x7C515B18,
        CLEAR_TEXT_LABEL = 0x412E68D0,
        CLEAR_THIS_BIG_PRINT = 0x4A4F2699,
        CLEAR_THIS_PRINT = 0x8D85CBB,
        CLEAR_THIS_PRINT_BIG_NOW = 0x1C8B73B6,
        CLEAR_TIMECYCLE_MODIFIER = 0x60FB61A7,
        CLEAR_UP_TRIP_SKIP = 0x75F069D9,
        CLEAR_WANTED_LEVEL = 0x205622AC,
        CLEAR_WANTED_LEVEL_IN_GARAGE = 0x3549079C,
        CLONE_CAM = 0x483E5BE8,
        CLOSE_ALL_CAR_DOORS = 0x56B8674F,
        CLOSE_DEBUG_FILE = 0x41286578,
        CLOSE_GARAGE = 0x5C083072,
        CLOSE_MIC_PED = 0x14B06047,
        CLOSE_SEQUENCE_TASK = 0x16C1B04,
        CODE_WANTS_MOBILE_PHONE_REMOVED = 0x63DA2195,
        CODE_WANTS_MOBILE_PHONE_REMOVED_FOR_WEAPON_SWITCHING = 0x736027E6,
        COMPARE_STRING = 0x80B4F21,
        COMPARE_TWO_DATES = 0x116D009A,
        CONNECT_LODS = 0x79EB2BC9,
        CONTROL_CAR_DOOR = 0x194F76D4,
        CONVERT_INT_TO_PLAYERINDEX = 0x5996315E,
        CONVERT_METRES_TO_FEET = 0x4D2771CE,
        CONVERT_METRES_TO_FEET_INT = 0x1A05ADD,
        CONVERT_THEN_ADD_STRING_TO_HTML_SCRIPT_OBJECT = 0x72EC0AA6,
        COPY_ANIMATIONS = 0x308D1778,
        COPY_CHAR_DECISION_MAKER = 0x1BB41B75,
        COPY_COMBAT_DECISION_MAKER = 0x62E0076,
        COPY_GROUP_CHAR_DECISION_MAKER = 0x472E65D6,
        COPY_GROUP_COMBAT_DECISION_MAKER = 0x17002E03,
        COPY_SHARED_CHAR_DECISION_MAKER = 0x189E32C9,
        COPY_SHARED_COMBAT_DECISION_MAKER = 0x13DE5C59,
        COS = 0x61D4B5F,
        COUNT_PICKUPS_OF_TYPE = 0x2E921B0F,
        COUNT_SCRIPT_CAMS = 0x4806044A,
        COUNT_SCRIPT_CAMS_BY_TYPE_AND_OR_STATE = 0x9641EE,
        CREATE_CAM = 0x694A0DC1,
        CREATE_CAR = 0x2F1D6843,
        CREATE_CARS_ON_GENERATORS_IN_AREA = 0xD940AF4,
        CREATE_CAR_GENERATOR = 0xF132F7E,
        CREATE_CAR_GENERATOR_WITH_PLATE = 0x1A6E1448,
        CREATE_CHAR = 0x4A673763,
        CREATE_CHAR_AS_PASSENGER = 0x442B1C1D,
        CREATE_CHAR_INSIDE_CAR = 0x2702274D,
        CREATE_CHECKPOINT = 0x41F27499,
        CREATE_DUMMY_CHAR = 0x44FF276B,
        CREATE_EMERGENCY_SERVICES_CAR = 0x768B3AC7,
        CREATE_EMERGENCY_SERVICES_CAR_RETURN_DRIVER = 0x68251A95,
        CREATE_EMERGENCY_SERVICES_CAR_THEN_WALK = 0x4A3D6D97,
        CREATE_FORSALE_PROPERTY_PICKUP = 0xD680BA44,
        CREATE_GROUP = 0x78300C0C,
        CREATE_HTML_SCRIPT_OBJECT = 0x6AA63375,
        CREATE_HTML_VIEWPORT = 0x2FAE4C6E,
        CREATE_LOCKED_PROPERTY_PICKUP = 0xCF0F9EB,
        CREATE_MENU = 0x7DCA398F,
        CREATE_MISSION_TRAIN = 0xDDD70AE,
        CREATE_MOBILE_PHONE = 0x2FEE095B,
        CREATE_MONEY_PICKUP = 0x19A0068,
        CREATE_NM_MESSAGE = 0x22AA010C,
        CREATE_OBJECT = 0x4DE152A0,
        CREATE_OBJECT_NO_OFFSET = 0x75C51A26,
        CREATE_PICKUP = 0x7E2868D4,
        CREATE_PICKUP_ROTATE = 0x675E5940,
        CREATE_PICKUP_WITH_AMMO = 0x1F736F00,
        CREATE_PLAYER = 0x335E3951,
        CREATE_PROTECTION_PICKUP = 0x93599CB8,
        CREATE_RANDOM_CAR_FOR_CAR_PARK = 0x36DA42AF,
        CREATE_RANDOM_CHAR = 0x375D6223,
        CREATE_RANDOM_CHAR_AS_DRIVER = 0x31CD5F18,
        CREATE_RANDOM_CHAR_AS_PASSENGER = 0x46D01849,
        CREATE_RANDOM_FEMALE_CHAR = 0x1A920C02,
        CREATE_RANDOM_MALE_CHAR = 0x2FC728BB,
        CREATE_TEMPORARY_RADAR_BLIPS_FOR_PICKUPS_IN_AREA = 0x44EA47BB,
        CREATE_USER_3D_MARKER = 0x77513211,
        CREATE_VIEWPORT = 0x13134CCD,
        CREATE_WIDGET_GROUP = 0x558C4259,
        DAMAGE_CAR = 0x2D2B208A,
        DAMAGE_CHAR = 0x6045426E,
        DAMAGE_PED_BODY_PART = 0x744307B,
        DEACTIVATE_FRONTEND = 0x72B16D0D,
        DEACTIVATE_NETWORK_SETTINGS_MENU = 0x4AD22B80,
        DEACTIVATE_SCRIPT_POPULATION_ZONE = 0x66BB737D,
        DEBUG_OFF = 0x67177EEC,
        DEBUG_ON = 0x4B2103F0,
        DECREMENT_FLOAT_STAT = 0x754000C,
        DECREMENT_INT_STAT = 0x7DD91295,
        DEFINE_PED_GENERATION_CONSTRAINT_AREA = 0x991172D,
        DELETE_ALL_HTML_SCRIPT_OBJECTS = 0x31A77970,
        DELETE_ALL_TRAINS = 0x552B2224,
        DELETE_CAR = 0x7F71342D,
        DELETE_CAR_GENERATOR = 0x76E738A3,
        DELETE_CHAR = 0xE3B49BF,
        DELETE_CHECKPOINT = 0x1293731D,
        DELETE_DUMMY_CHAR = 0x73F55AEF,
        DELETE_HTML_SCRIPT_OBJECT = 0x53456730,
        DELETE_MENU = 0x252138B3,
        DELETE_MISSION_TRAIN = 0x7DA237BC,
        DELETE_MISSION_TRAINS = 0x7D635E2C,
        DELETE_OBJECT = 0x62FE6290,
        DELETE_PLAYER = 0x627A3586,
        DELETE_WIDGET = 0x267D5146,
        DELETE_WIDGET_GROUP = 0x17D72833,
        DESTROY_ALL_CAMS = 0x614A3353,
        DESTROY_ALL_SCRIPT_VIEWPORTS = 0x5E4327D2,
        DESTROY_CAM = 0x14334EEE,
        DESTROY_MOBILE_PHONE = 0x38BE5BF6,
        DESTROY_PED_GENERATION_CONSTRAINT_AREA = 0x3CC5682F,
        DESTROY_THREAD = 0x47381E59,
        DESTROY_VIEWPORT = 0x651E50EC,
        DETACH_CAM_FROM_VIEWPORT = 0x1DEA65DE,
        DETACH_CAR = 0x34CC1F23,
        DETACH_OBJECT = 0x5C87C26,
        DETACH_OBJECT_NO_COLLIDE = 0x6B2E49CD,
        DETACH_PED = 0x2CD52C5C,
        DETACH_PED_FROM_WITHIN_CAR = 0x15F70500,
        DID_SAVE_COMPLETE_SUCCESSFULLY = 0x5AA33E86,
        DIM_BLIP = 0x272D15FD,
        DISABLE_CAR_GENERATORS = 0x581E2306,
        DISABLE_CAR_GENERATORS_WITH_HELI = 0x18C4131,
        DISABLE_DEBUG_CAM_AND_PLAYER_WARPING = 0x1A1473B0,
        DISABLE_END_CREDITS_FADE = 0x21B45EC1,
        DISABLE_FRONTEND_RADIO = 0x6B2F3E97,
        DISABLE_GPS = 0x32A81853,
        DISABLE_HELI_CHASE_CAM_BONNET_NITRO_FIX = 0x19A73E70,
        DISABLE_HELI_CHASE_CAM_THIS_UPDATE = 0x78D17492,
        DISABLE_INTERMEZZO_CAMS = 0x3DA200CB,
        DISABLE_LOCAL_PLAYER_PICKUPS = 0x19211E9D,
        DISABLE_PAUSE_MENU = 0x7ED1DBF,
        DISABLE_PLAYER_AUTO_VEHICLE_EXIT = 0x50E33E8F,
        DISABLE_PLAYER_LOCKON = 0x711214F3,
        DISABLE_PLAYER_SPRINT = 0x3A244927,
        DISABLE_PLAYER_VEHICLE_ENTRY = 0x5D51783,
        DISABLE_POLICE_SCANNER = 0x63AF5057,
        DISABLE_STICKY_BOMB_ACTIVE_SOUND = 0xC2D2CC5,
        DISPLAY_ALTIMETER_THIS_FRAME = 0x50C13702,
        DISPLAY_AMMO = 0x2E115B4B,
        DISPLAY_AREA_NAME = 0x1E87298A,
        DISPLAY_CASH = 0x62ED1551,
        DISPLAY_FRONTEND_MAP_BLIPS = 0x61B830BC,
        DISPLAY_GRIME_THIS_FRAME = 0x56B95223,
        DISPLAY_HELP_TEXT_THIS_FRAME = 0x71542EB,
        DISPLAY_HUD = 0x52632919,
        DISPLAY_LOADING_THIS_FRAME_WITH_SCRIPT_SPRITES = 0x38A10933,
        DISPLAY_NON_MINIGAME_HELP_MESSAGES = 0x73F56AC5,
        DISPLAY_NTH_ONSCREEN_COUNTER_WITH_STRING = 0x4D9C4195,
        DISPLAY_ONSCREEN_TIMER_WITH_STRING = 0x384F104F,
        DISPLAY_PLAYBACK_RECORDED_CAR = 0x7AD71AFF,
        DISPLAY_PLAYER_ICONS = 0x39B22A89,
        DISPLAY_PLAYER_NAMES = 0xB177D76,
        DISPLAY_RADAR = 0x17920FA7,
        DISPLAY_SNIPER_SCOPE_THIS_FRAME = 0x5BF23AD5,
        DISPLAY_TEXT = 0xF002557,
        DISPLAY_TEXT_SUBSTRING = 0xDA61310,
        DISPLAY_TEXT_WITH_2_NUMBERS = 0x337957AF,
        DISPLAY_TEXT_WITH_3_NUMBERS = 0x746C06E8,
        DISPLAY_TEXT_WITH_BLIP_NAME = 0x7E8D1DCE,
        DISPLAY_TEXT_WITH_FLOAT = 0x311F4FE9,
        DISPLAY_TEXT_WITH_LITERAL_STRING = 0x661B239A,
        DISPLAY_TEXT_WITH_LITERAL_SUBSTRING = 0x1FCB5241,
        DISPLAY_TEXT_WITH_NUMBER = 0x5A495ABE,
        DISPLAY_TEXT_WITH_STRING = 0x10A75905,
        DISPLAY_TEXT_WITH_STRING_AND_INT = 0x369A4540,
        DISPLAY_TEXT_WITH_SUBSTRING_GIVEN_HASH_KEY = 0x7EF6599D,
        DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS = 0x4B7C3AEC,
        DISPLAY_TEXT_WITH_TWO_STRINGS = 0x66842574,
        DISPLAY_TEXT_WITH_TWO_SUBSTRINGS_GIVEN_HASH_KEYS = 0x39E77F70,
        DOES_BLIP_EXIST = 0x590A6FF4,
        DOES_CAMERA_EXIST_WITH_NETWORK_ID = 0xBE9F9D50,
        DOES_CAM_EXIST = 0x46953225,
        DOES_CAR_HAVE_HYDRAULICS = 0xF0956CA,
        DOES_CAR_HAVE_ROOF = 0x7AE52512,
        DOES_CAR_HAVE_STUCK_CAR_CHECK = 0x2B856FAA,
        DOES_CHAR_EXIST = 0x46531797,
        DOES_DECISION_MAKER_EXIST = 0x66D53314,
        DOES_GAME_CODE_WANT_TO_LEAVE_NETWORK_SESSION = 0x7E412AC8,
        DOES_GROUP_EXIST = 0x3D385F6D,
        DOES_OBJECT_EXIST = 0x6DAB78CD,
        DOES_OBJECT_EXIST_WITH_NETWORK_ID = 0x5BBC62CB,
        DOES_OBJECT_HAVE_PHYSICS = 0x39587D51,
        DOES_OBJECT_HAVE_THIS_MODEL = 0x7505765B,
        DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS = 0x1F881A88,
        DOES_PED_EXIST_WITH_NETWORK_ID = 0x21641887,
        DOES_PICKUP_EXIST = 0x7B567F1A,
        DOES_PLAYER_HAVE_CONTROL_OF_NETWORK_ID = 0x3D0B5E56,
        DOES_SCENARIO_EXIST_IN_AREA = 0x48252E33,
        DOES_SCRIPT_EXIST = 0x1D1B266B,
        DOES_SCRIPT_FIRE_EXIST = 0x637E1D42,
        DOES_TEXT_LABEL_EXIST = 0x2A611607,
        DOES_THIS_MINIGAME_SCRIPT_ALLOW_NON_MINIGAME_HELP_MESSAGES = 0x73A1443F,
        DOES_VEHICLE_EXIST = 0x67A42263,
        DOES_VEHICLE_EXIST_WITH_NETWORK_ID = 0x69C033D8,
        DOES_VIEWPORT_EXIST = 0xC5A551B,
        DOES_WEB_PAGE_EXIST = 0x1DE062FD,
        DOES_WIDGET_GROUP_EXIST = 0x3AAF5BE5,
        DONT_ABORT_CAR_CONVERSATIONS = 0xA432423,
        DONT_DISPATCH_COPS_FOR_PLAYER = 0x63B87EBE,
        DONT_DISPLAY_LOADING_ON_FADE_THIS_FRAME = 0x2F58286C,
        DONT_REMOVE_CHAR = 0x3659084A,
        DONT_REMOVE_OBJECT = 0x74FF26F9,
        DONT_SUPPRESS_ANY_CAR_MODELS = 0x69F55DCC,
        DONT_SUPPRESS_ANY_PED_MODELS = 0x72EF466E,
        DONT_SUPPRESS_CAR_MODEL = 0x348074B,
        DONT_SUPPRESS_PED_MODEL = 0x7CF256D0,
        DO_AUTO_SAVE = 0x9B85174,
        DO_SCREEN_FADE_IN = 0x4D72200,
        DO_SCREEN_FADE_IN_UNHACKED = 0x5F9218C3,
        DO_SCREEN_FADE_OUT = 0x65DE621C,
        DO_SCREEN_FADE_OUT_UNHACKED = 0x42D250A7,
        DO_WEAPON_STUFF_AT_START_OF_2P_GAME = 0x18194E99,
        DRAW_CHECKPOINT = 0x29FC3E19,
        DRAW_CHECKPOINT_WITH_ALPHA = 0x26810BE3,
        DRAW_COLOURED_CYLINDER = 0x309860C4,
        DRAW_CORONA = 0x39ED0C43,
        DRAW_CURVED_WINDOW = 0x4B684D0B,
        DRAW_CURVED_WINDOW_NOTEXT = 0x12B9197E,
        DRAW_CURVED_WINDOW_TEXT = 0x7DD67E15,
        DRAW_DEBUG_SPHERE = 0x539572F3,
        DRAW_FRONTEND_HELPER_TEXT = 0x44E14770,
        DRAW_LIGHT_WITH_RANGE = 0x30D27EB1,
        DRAW_MOVIE = 0x26274628,
        DRAW_RECT = 0x3B2526E3,
        DRAW_SPHERE = 0x769F6E66,
        DRAW_SPRITE = 0x6ADD40EC,
        DRAW_SPRITE_FRONT_BUFF = 0x22417905,
        DRAW_SPRITE_PHOTO = 0x4BD4248E,
        DRAW_SPRITE_WITH_FIXED_ROTATION = 0x7CB404D4,
        DRAW_SPRITE_WITH_UV = 0x58C41E8F,
        DRAW_SPRITE_WITH_UV_COORDS = 0x2D1D17C9,
        DRAW_TOPLEVEL_SPRITE = 0x1849408D,
        DRAW_WINDOW = 0x232642DE,
        DRAW_WINDOW_TEXT = 0x3D0F5735,
        DROP_OBJECT = 0x24C45D0D,
        ENABLE_ALL_PED_HELMETS = 0x6C305137,
        ENABLE_CAM_COLLISION = 0x71AE1BDC,
        ENABLE_CHASE_AUDIO = 0x68664078,
        ENABLE_CONVERSATION = 0xFC15D5F3,
        ENABLE_DEBUG_CAM = 0x296B09E8,
        ENABLE_DEFERRED_LIGHTING = 0x6CFC30AD,
        ENABLE_DISABLED_ATTRACTORS_ON_OBJECT = 0x17F62193,
        ENABLE_END_CREDITS_FADE = 0x1EA85697,
        ENABLE_FANCY_WATER = 0x74FC2325,
        ENABLE_FOV_LOD_MULTIPLIER = 0x556B0755,
        ENABLE_FRONTEND_RADIO = 0x5328068B,
        ENABLE_GPS_IN_VEHICLE = 0x144F3CE5,
        ENABLE_MAX_AMMO_CAP = 0x7E657B56,
        ENABLE_PED_HELMET = 0xC704586,
        ENABLE_POLICE_SCANNER = 0x5B262142,
        ENABLE_SAVE_HOUSE = 0x208C03C9,
        ENABLE_SCENE_STREAMING = 0x362B7D1B,
        ENABLE_SCRIPT_CONTROLLED_MICROPHONE = 0x3EA0648D,
        ENABLE_SHADOWS = 0x41596B09,
        ENABLE_XBOX_SCREEN_SAVER = 0x633426B6,
        END_CAM_COMMANDS = 0x627F3275,
        END_CHAR_SEARCH_CRITERIA = 0x5ECF404A,
        END_PED_QUEUE_MEMBERSHIP_LIST = 0x4449534F,
        END_WIDGET_GROUP = 0x6F760759,
        ENSURE_PLAYER_HAS_DRIVE_BY_WEAPON = 0xD2827A30,
        EVOLVE_PTFX = 0x3CE05E7C,
        EXP = 0x1BA61E20,
        EXPLODE_CAR = 0x505518A2,
        EXPLODE_CAR_IN_CUTSCENE = 0x1820DAA,
        EXPLODE_CAR_IN_CUTSCENE_SHAKE_AND_BIT = 0x7CF61A81,
        EXPLODE_CHAR_HEAD = 0x4A802E89,
        EXTEND_PATROL_ROUTE = 0xF3402B8,
        EXTINGUISH_CAR_FIRE = 0x63A40F58,
        EXTINGUISH_CHAR_FIRE = 0x5D786EEE,
        EXTINGUISH_FIRE_AT_POINT = 0x35A97B73,
        EXTINGUISH_OBJECT_FIRE = 0x5FBC5FFF,
        FAIL_KILL_FRENZY = 0x5EA253A5,
        FAKE_DEATHARREST = 0x30D17655,
        FAST_FORWARD_TO_NEXT_BUS_STOP = 0xA7D2E7F,
        FIND_MAX_NUMBER_OF_GROUP_MEMBERS = 0x7E154274,
        FIND_NEAREST_COLLECTABLE_BIN_BAGS = 0x56314A9,
        FIND_NEAREST_ENTITIES_WITH_SPECIAL_ATTRIBUTE = 0x35261C6,
        FIND_NETWORK_KILLER_OF_PLAYER = 0x766E78A3,
        FIND_NETWORK_RESTART_POINT = 0x66F445BB,
        FIND_POSITION_IN_RECORDING = 0x22087F31,
        FIND_PRIMARY_POPULATION_ZONE_GROUP = 0x36601178,
        FIND_STATIC_EMITTER_INDEX = 0x64793A54,
        FIND_STREET_NAME_AT_POSITION = 0x49763A4F,
        FIND_TIME_POSITION_IN_RECORDED_RECORDING = 0x48E1BD60,
        FIND_TIME_POSITION_IN_RECORDING = 0x8D25912,
        FIND_TRAIN_DIRECTION = 0x13C1EB7,
        FINISH_SETTING_UP_CONVERSATION = 0xBADE4D05,
        FINISH_SETTING_UP_CONVERSATION_NO_SUBTITLES = 0x4D1C3395,
        FINISH_STREAMING_REQUEST_LIST = 0x1788346E,
        FINISH_WIDGET_COMBO = 0x2CCA0D6A,
        FIRE_PED_WEAPON = 0x25BB7D67,
        FIRE_SINGLE_BULLET = 0x30975326,
        FIX_AMBIENCE_ORIENTATION = 0x788F7A03,
        FIX_CAR = 0x3D562F78,
        FIX_CAR_TYRE = 0xFDA7965,
        FIX_SCRIPT_MIC_TO_CURRENT_POSISITION = 0x456C0C43,
        FLASH_BLIP = 0x4DFE09D6,
        FLASH_BLIP_ALT = 0x611948A3,
        FLASH_RADAR = 0x265F6FF5,
        FLASH_ROUTE = 0x20E74A9C,
        FLASH_WEAPON_ICON = 0x796A6B88,
        FLOOR = 0x49261BA6,
        FLUSH_ALL_OUT_OF_DATE_RADAR_BLIPS_FROM_MISSION_CLEANUP_LIST = 0x1F1C77E1,
        FLUSH_ALL_PLAYER_RESPAWN_COORDS = 0x187B3202,
        FLUSH_ALL_SPAWN_BLOCKING_AREAS = 0x65B05F3F,
        FLUSH_COVER_BLOCKING_AREAS = 0x5A535133,
        FLUSH_PATROL_ROUTE = 0x15F4F3E,
        FLUSH_SCENARIO_BLOCKING_AREAS = 0x754D0FC4,
        FORCE_AIR_DRAG_MULT = 0xFD24E0C2,
        FORCE_AIR_DRAG_MULT_FOR_PLAYERS_CAR = 0x554053ED,
        FORCE_ALL_VEHICLE_LIGHTS_OFF = 0xCE96445,
        FORCE_CAR_LIGHTS = 0x71B81DE7,
        FORCE_CHAR_TO_DROP_WEAPON = 0x214C5455,
        FORCE_FULL_VOICE = 0x62285CAD,
        FORCE_GAME_TELESCOPE_CAM = 0x1C51E90,
        FORCE_GENERATE_PARKED_CARS_TOO_CLOSE_TO_OTHERS = 0x1B8F031D,
        FORCE_HIGH_LOD = 0x1EFB0992,
        FORCE_INITIAL_PLAYER_STATION = 0x32D3165D,
        FORCE_INTERIOR_LIGHTING_FOR_PLAYER = 0x45DF1D92,
        FORCE_LOADING_SCREEN = 0x4E68316C,
        FORCE_NET_PLAYER_INVISIBLE = 0x162D395E,
        FORCE_NOISE_OFF = 0xCC0186A,
        FORCE_NO_CAM_PAUSE = 0x2CC70E04,
        FORCE_PED_PINNED_DOWN = 0x56A70F57,
        FORCE_PED_TO_FLEE_WHILST_DRIVING_VEHICLE = 0x2FED14F5,
        FORCE_PED_TO_LOAD_COVER = 0x61D07789,
        FORCE_POPULATION_INIT = 0x42180729,
        FORCE_RADIO_TRACK = 0x6A7E47C9,
        FORCE_RANDOM_CAR_MODEL = 0x521D0D5B,
        FORCE_RANDOM_PED_TYPE = 0x57E37103,
        FORCE_SPAWN_SCENARIO_PEDS_IN_AREA = 0x186D42A4,
        FORCE_TIME_OF_DAY = 0xB9B5070,
        FORCE_WEATHER = 0x7EFB5077,
        FORCE_WEATHER_NOW = 0x63737D31,
        FORCE_WIND = 0x310E75C9,
        FORWARD_TO_TIME_OF_DAY = 0x456C6096,
        FREEZE_CAR_POSITION = 0x295C4C52,
        FREEZE_CAR_POSITION_AND_DONT_LOAD_COLLISION = 0x588A27FB,
        FREEZE_CHAR_POSITION = 0x20266A86,
        FREEZE_CHAR_POSITION_AND_DONT_LOAD_COLLISION = 0x74576E37,
        FREEZE_OBJECT_POSITION = 0x7CA8382B,
        FREEZE_OBJECT_POSITION_AND_DONT_LOAD_COLLISION = 0x668F64C7,
        FREEZE_ONSCREEN_TIMER = 0x4B8B6F24,
        FREEZE_POSITION_OF_CLOSEST_OBJECT_OF_TYPE = 0x5A196B79,
        FREEZE_RADIO_STATION = 0x8A015CF,
        GENERATE_DIRECTIONS = 0x203A137B,
        GENERATE_RANDOM_FLOAT = 0x380C142A,
        GENERATE_RANDOM_FLOAT_IN_RANGE = 0x74C626EB,
        GENERATE_RANDOM_INT = 0x335D0F34,
        GENERATE_RANDOM_INT_IN_RANGE = 0x168B1717,
        GET_ACCEPT_BUTTON = 0x530F4572,
        GET_AMMO_IN_CHAR_WEAPON = 0x23E140A9,
        GET_AMMO_IN_CLIP = 0x612C748F,
        GET_ANGLE_BETWEEN_2D_VECTORS = 0x5BC4602D,
        GET_ANIM_GROUP_FROM_CHAR = 0x55EB748F,
        GET_ASCII_JUST_PRESSED = 0x92829D0,
        GET_ASCII_PRESSED = 0x495F399D,
        GET_ASPECT_RATIO = 0x36600272,
        GET_AUDIBLE_MUSIC_TRACK_TEXT_ID = 0x18246AC8,
        GET_AUDIO_ROOM_ID = 0x3AC3097,
        GET_BITS_IN_RANGE = 0x58AE7C1D,
        GET_BLIP_ALPHA = 0x61497585,
        GET_BLIP_COLOUR = 0x59B425DA,
        GET_BLIP_COORDS = 0x4C1E75DB,
        GET_BLIP_INFO_ID_CAR_INDEX = 0x566D04C2,
        GET_BLIP_INFO_ID_DISPLAY = 0x1B731C3F,
        GET_BLIP_INFO_ID_OBJECT_INDEX = 0x7B05072C,
        GET_BLIP_INFO_ID_PED_INDEX = 0x5FD47B45,
        GET_BLIP_INFO_ID_PICKUP_INDEX = 0x59E3BEB,
        GET_BLIP_INFO_ID_POSITION = 0x413B3893,
        GET_BLIP_INFO_ID_ROTATION = 0x6FBA4274,
        GET_BLIP_INFO_ID_TYPE = 0x6A9E5CE5,
        GET_BLIP_NAME = 0x00000000,
        GET_BLIP_SPRITE = 0x30B1316B,
        GET_BUFFERED_ASCII = 0x21F43531,
        GET_CAMERA_FROM_NETWORK_ID = 0x7E656E50,
        GET_CAM_FAR_CLIP = 0x752643C9,
        GET_CAM_FAR_DOF = 0x1CB27FE1,
        GET_CAM_FOV = 0x7BF4652D,
        GET_CAM_MOTION_BLUR = 0x64EF411D,
        GET_CAM_NEAR_CLIP = 0x2EF477FD,
        GET_CAM_NEAR_DOF = 0x50D15F0D,
        GET_CAM_POS = 0x60C22E93,
        GET_CAM_ROT = 0x51A06698,
        GET_CAM_STATE = 0x22AA0984,
        GET_CAR_ANIM_CURRENT_TIME = 0x5B580DCC,
        GET_CAR_ANIM_TOTAL_TIME = 0x295C34B8,
        GET_CAR_BLOCKING_CAR = 0x66B43B06,
        GET_CAR_CHAR_IS_USING = 0x1B067237,
        GET_CAR_COLOURS = 0x6CAC3D62,
        GET_CAR_COORDINATES = 0x2D432EAB,
        GET_CAR_DEFORMATION_AT_POS = 0x1F913BC7,
        GET_CAR_DOOR_LOCK_STATUS = 0x774426C2,
        GET_CAR_FORWARD_VECTOR = 0x7E4F49B5,
        GET_CAR_FORWARD_X = 0x47A21100,
        GET_CAR_FORWARD_Y = 0x3BDB4496,
        GET_CAR_HEADING = 0x46803CFA,
        GET_CAR_HEALTH = 0x4D417CD3,
        GET_CAR_LIVERY = 0x10237666,
        GET_CAR_MASS = 0x5D7C4F08,
        GET_CAR_MODEL = 0x5FF84497,
        GET_CAR_MODEL_VALUE = 0x29D37792,
        GET_CAR_OBJECT_IS_ATTACHED_TO = 0x2D215414,
        GET_CAR_PITCH = 0x61EE5C9A,
        GET_CAR_ROLL = 0x9C95A65,
        GET_CAR_SIREN_HEALTH = 0x896249A,
        GET_CAR_SPEED = 0x16DD2D00,
        GET_CAR_SPEED_VECTOR = 0x112E7FB1,
        GET_CAR_UPRIGHT_VALUE = 0x326E2886,
        GET_CELLPHONE_RANKED = 0x6B6019DB,
        GET_CHAR_ALLOWED_TO_RUN_ON_BOATS = 0x4C872A85,
        GET_CHAR_ANIM_BLEND_AMOUNT = 0x1DE37A21,
        GET_CHAR_ANIM_CURRENT_TIME = 0x555D3B8C,
        GET_CHAR_ANIM_EVENT_TIME = 0x675A1B4E,
        GET_CHAR_ANIM_IS_EVENT = 0x118174EC,
        GET_CHAR_ANIM_TOTAL_TIME = 0x2E51318F,
        GET_CHAR_AREA_VISIBLE = 0x6EA1F78,
        GET_CHAR_ARMOUR = 0x3C756E54,
        GET_CHAR_COORDINATES = 0x2B5C06E6,
        GET_CHAR_DRAWABLE_VARIATION = 0x1A1A6D83,
        GET_CHAR_EXTRACTED_DISPLACEMENT = 0x466B5AA0,
        GET_CHAR_EXTRACTED_VELOCITY = 0x7B3F0058,
        GET_CHAR_GRAVITY = 0x746E7171,
        GET_CHAR_HEADING = 0x57A3AC7,
        GET_CHAR_HEALTH = 0x4B6C2256,
        GET_CHAR_HEIGHT_ABOVE_GROUND = 0x79973C5A,
        GET_CHAR_HIGHEST_PRIORITY_EVENT = 0x61A75D3,
        GET_CHAR_IN_CAR_PASSENGER_SEAT = 0x5E756B51,
        GET_CHAR_LAST_DAMAGE_BONE = 0x767E5013,
        GET_CHAR_MAX_MOVE_BLEND_RATIO = 0x54AE4F4B,
        GET_CHAR_MELEE_ACTION_FLAG0 = 0x103F14E4,
        GET_CHAR_MELEE_ACTION_FLAG1 = 0x8A308F8,
        GET_CHAR_MELEE_ACTION_FLAG2 = 0x32F729B,
        GET_CHAR_MODEL = 0xA3D60CE,
        GET_CHAR_MONEY = 0x7D675993,
        GET_CHAR_MOVEMENT_ANIMS_BLOCKED = 0x11292C09,
        GET_CHAR_MOVE_ANIM_SPEED_MULTIPLIER = 0x325B1A34,
        GET_CHAR_PROP_INDEX = 0x3AC85DB1,
        GET_CHAR_READY_TO_BE_EXECUTED = 0x3FFF4DE9,
        GET_CHAR_READY_TO_BE_STUNNED = 0x5C422066,
        GET_CHAR_SPEED = 0x3E156AFC,
        GET_CHAR_SWIM_STATE = 0x34460DD7,
        GET_CHAR_TEXTURE_VARIATION = 0x3A7B78C5,
        GET_CHAR_VELOCITY = 0x3B977FD4,
        GET_CHAR_WALK_ALONGSIDE_LEADER_WHEN_APPROPRIATE = 0x6D170B31,
        GET_CHAR_WEAPON_IN_SLOT = 0x74EC7580,
        GET_CHAR_WILL_COWER_INSTEAD_OF_FLEEING = 0x69A52C96,
        GET_CHAR_WILL_TRY_TO_LEAVE_BOAT_AFTER_LEADER = 0x6D5F1592,
        GET_CHAR_WILL_TRY_TO_LEAVE_WATER = 0x7BC85E73,
        GET_CINEMATIC_CAM = 0xC87FB8,
        GET_CLOSEST_CAR = 0x2CB303F8,
        GET_CLOSEST_CAR_NODE = 0x27F87222,
        GET_CLOSEST_CAR_NODE_FAVOUR_DIRECTION = 0x2F2405D1,
        GET_CLOSEST_CAR_NODE_WITH_HEADING = 0x371467E0,
        GET_CLOSEST_CHAR = 0xF4B0239,
        GET_CLOSEST_MAJOR_CAR_NODE = 0x406A035E,
        GET_CLOSEST_NETWORK_RESTART_NODE = 0x46CD1D73,
        GET_CLOSEST_ROAD = 0x63C00DE7,
        GET_CLOSEST_STEALABLE_OBJECT = 0x27045521,
        GET_CLOSEST_STRAIGHT_ROAD = 0x1501CBA,
        GET_CONSOLE_COMMAND = 0x3BC51157,
        GET_CONSOLE_COMMAND_TOKEN = 0x5D607947,
        GET_CONTENTS_OF_TEXT_WIDGET = 0x742E3376,
        GET_CONTROL_VALUE = 0x6285788,
        GET_COORDINATES_FOR_NETWORK_RESTART_NODE = 0x2EAA3C4A,
        GET_CORRECTED_COLOUR = 0x64D35E1D,
        GET_CREATE_RANDOM_COPS = 0x4F9342F3,
        GET_CURRENT_BASIC_COP_MODEL = 0x1B305900,
        GET_CURRENT_BASIC_POLICE_CAR_MODEL = 0x76901A85,
        GET_CURRENT_CHAR_WEAPON = 0x5AB8289F,
        GET_CURRENT_COP_MODEL = 0x18B2055,
        GET_CURRENT_DATE = 0x2E5B068F,
        GET_CURRENT_DAY_OF_WEEK = 0x39FD432B,
        GET_CURRENT_EPISODE = 0x7D7619D2,
        GET_CURRENT_LANGUAGE = 0x1105259C,
        GET_CURRENT_PLAYBACK_NUMBER_FOR_CAR = 0x678813A4,
        GET_CURRENT_POLICE_CAR_MODEL = 0x20A53B7F,
        GET_CURRENT_POPULATION_ZONE_TYPE = 0x30516A11,
        GET_CURRENT_SCRIPTED_CONVERSATION_LINE = 0xDE30821,
        GET_CURRENT_STACK_SIZE = 0x6AC52840,
        GET_CURRENT_STATION_FOR_TRAIN = 0x10FE0FE9,
        GET_CURRENT_TAXI_CAR_MODEL = 0x1D6D767E,
        GET_CURRENT_WEATHER = 0x27E421EA,
        GET_CURRENT_WEATHER_FULL = 0x3FFA65EE,
        GET_CURRENT_ZONE_SCUMMINESS = 0x4B7B5F77,
        GET_CUTSCENE_AUDIO_TIME_MS = 0x2B8A0C6B,
        GET_CUTSCENE_PED_POSITION = 0x366B549F,
        GET_CUTSCENE_SECTION_PLAYING = 0x4C65BEB,
        GET_CUTSCENE_TIME = 0x7DF26C8C,
        GET_DAMAGE_TO_PED_BODY_PART = 0x62A507A,
        GET_DEAD_CAR_COORDINATES = 0x3BC827E6,
        GET_DEAD_CHAR_COORDINATES = 0x51457269,
        GET_DEAD_CHAR_PICKUP_COORDS = 0x2A7475D8,
        GET_DEBUG_CAM = 0x7D15544E,
        GET_DESTROYER_OF_NETWORK_ID = 0x11E80442,
        GET_DISPLAY_NAME_FROM_VEHICLE_MODEL = 0x404E0056,
        GET_DISTANCE_BETWEEN_COORDS_2D = 0x687107CA,
        GET_DISTANCE_BETWEEN_COORDS_3D = 0x23F772E7,
        GET_DOOR_ANGLE_RATIO = 0x44EA2669,
        GET_DOOR_STATE = 0x64861559,
        GET_DRIVER_OF_CAR = 0x22457083,
        GET_ENGINE_HEALTH = 0x2B0A05E0,
        GET_EPISODE_INDEX_FROM_SUMMONS = 0x704E638F,
        GET_EPISODE_NAME = 0x6004431B,
        GET_EXTRA_CAR_COLOURS = 0x25B87BCA,
        GET_FILTER_MENU_ON = 0x509D75E8,
        GET_FILTER_SAVE_SETTING = 0x25CA45EA,
        GET_FIRST_BLIP_INFO_ID = 0x3BD729E9,
        GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING = 0x42D249E3,
        GET_FIRST_N_CHARACTERS_OF_STRING = 0x108B4A25,
        GET_FLOAT_STAT = 0x1D801FC0,
        GET_FOLLOW_VEHICLE_CAM_SUBMODE = 0x4C7B7A29,
        GET_FRAGMENT_DAMAGE_HEALTH_OF_CLOSEST_OBJECT_OF_TYPE = 0x52803D0,
        GET_FRAME_COUNT = 0xDA146AA,
        GET_FRAME_TIME = 0x206420A6,
        GET_FREE_CAM = 0x538514CC,
        GET_FRONTEND_DESIGN_VALUE = 0x747E681E,
        GET_FURTHEST_NETWORK_RESTART_NODE = 0x2FEF2477,
        GET_GAMER_NETWORK_SCORE = 0x6C507EAC,
        GET_GAME_CAM = 0xB2A2801,
        GET_GAME_CAM_CHILD = 0x588F6BC0,
        GET_GAME_TIMER = 0x22B2DA9,
        GET_GAME_VIEWPORT_ID = 0x57F7558B,
        GET_GFWL_HAS_SAFE_HOUSE = 0x6CC85D46,
        GET_GFWL_IS_RETURNING_TO_SINGLE_PLAYER = 0x2FDF565D,
        GET_GROUND_Z_FOR_3D_COORD = 0x6D902EE3,
        GET_GROUP_CHAR_DUCKS_WHEN_AIMED_AT = 0x70B1C45,
        GET_GROUP_FORMATION = 0x596174E5,
        GET_GROUP_FORMATION_SPACING = 0x67DB4150,
        GET_GROUP_LEADER = 0x5DBB46B5,
        GET_GROUP_MEMBER = 0x2FF90FF5,
        GET_GROUP_SIZE = 0x45EE4E9A,
        GET_HASH_KEY = 0x68FF7165,
        GET_HEADING_FROM_VECTOR_2D = 0x9DD61E1,
        GET_HEIGHT_OF_VEHICLE = 0x5FAD09CA,
        GET_HELP_MESSAGE_BOX_SIZE = 0x267D251F,
        GET_HOST_ID = 0x79C84DBC,
        GET_HOST_MATCH_ON = 0x757A0EB8,
        GET_HOURS_OF_DAY = 0xA9F7BA1,
        GET_HUD_COLOUR = 0x7533EC9,
        GET_ID_OF_THIS_THREAD = 0x51A131D,
        GET_INTERIOR_AT_COORDS = 0x29216610,
        GET_INTERIOR_FROM_CAR = 0x25714BE4,
        GET_INTERIOR_FROM_CHAR = 0x28227F7,
        GET_INTERIOR_FROM_DUMMY_CHAR = 0x380751A9,
        GET_INTERIOR_HEADING = 0x73245AB3,
        GET_INT_STAT = 0x48994D58,
        GET_IS_AUTOSAVE_OFF = 0x551C6295,
        GET_IS_DEPOSIT_ANIM_RUNNING = 0x3CCB4248,
        GET_IS_DISPLAYINGSAVEMESSAGE = 0x34F9164D,
        GET_IS_HIDEF = 0x19976813,
        GET_IS_PROJECTILE_TYPE_IN_AREA = 0x7B2E70F3,
        GET_IS_STICKY_BOMB_STUCK_TO_OBJECT = 0x4D623FF,
        GET_IS_STICKY_BOMB_STUCK_TO_VEHICLE = 0x29BF0233,
        GET_IS_WIDESCREEN = 0xF0269B5,
        GET_KEYBOARD_MOVE_INPUT = 0x4AF73456,
        GET_KEY_FOR_CAR_IN_ROOM = 0xE390571,
        GET_KEY_FOR_CHAR_IN_ROOM = 0x266D0801,
        GET_KEY_FOR_DUMMY_CHAR_IN_ROOM = 0x74672C8C,
        GET_KEY_FOR_VIEWPORT_IN_ROOM = 0x10776AAE,
        GET_KILL_TRACKING_RESULTS = 0x95932D8,
        GET_LAST_TIME_NETWORK_ID_DAMAGED = 0x3A8D7BA4,
        GET_LATEST_CONSOLE_COMMAND = 0x670E3DE3,
        GET_LCPD_COP_SCORE = 0x17C05D83,
        GET_LCPD_CRIMINAL_SCORE = 0x1207025C,
        GET_LEFT_PLAYER_CASH_TO_REACH_LEVEL = 0x6DD754DD,
        GET_LENGTH_OF_LITERAL_STRING = 0x2BE2D97,
        GET_LENGTH_OF_STRING_WITH_THIS_HASH_KEY = 0x6C013A17,
        GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL = 0x6D795EC0,
        GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL_INS_NUM = 0x5F02084D,
        GET_LEVEL_DESIGN_COORDS_FOR_OBJECT = 0x3E762D9D,
        GET_LINE_HEIGHT = 0x150B0C33,
        GET_LOCAL_GAMERLEVEL_FROM_PROFILESETTINGS = 0x7C5F327E,
        GET_LOCAL_PLAYER_MP_CASH = 0x76B068CA,
        GET_LOCAL_PLAYER_WEAPON_STAT = 0x3CCC5AFD,
        GET_MAP_AREA_FROM_COORDS = 0x5ED33D46,
        GET_MAXIMUM_NUMBER_OF_PASSENGERS = 0x554014F1,
        GET_MAX_AMMO = 0x7C6968F8,
        GET_MAX_AMMO_IN_CLIP = 0x1794A3C,
        GET_MAX_WANTED_LEVEL = 0x71755E9B,
        GET_MENU_ITEM_ACCEPTED = 0xF322A6C,
        GET_MENU_ITEM_SELECTED = 0x22442A7F,
        GET_MENU_POSITION = 0x5B576767,
        GET_MINUTES_OF_DAY = 0x3DFE691D,
        GET_MINUTES_TO_TIME_OF_DAY = 0x740C4C84,
        GET_MISSION_FLAG = 0x2BC64736,
        GET_MOBILE_PHONE_POSITION = 0x67C45774,
        GET_MOBILE_PHONE_RENDER_ID = 0x5E7B3816,
        GET_MOBILE_PHONE_ROTATION = 0x13A83A28,
        GET_MOBILE_PHONE_SCALE = 0x1E951606,
        GET_MOBILE_PHONE_TASK_SUB_TASK = 0x517B226E,
        GET_MODEL_DIMENSIONS = 0x191B7021,
        GET_MODEL_NAME_FOR_DEBUG = 0x4342350C,
        GET_MODEL_NAME_OF_CAR_FOR_DEBUG_ONLY = 0x18062DA6,
        GET_MODEL_PED_IS_HOLDING = 0xAF378D5,
        GET_MOTION_CONTROLS_ENABLED = 0x6E936A1A,
        GET_MOTION_CONTROL_PREFERENCE = 0x41B8701F,
        GET_MOTION_SENSOR_VALUES = 0x998069B,
        GET_MOUSE_INPUT = 0x447B154B,
        GET_MOUSE_POSITION = 0xECB2DEE,
        GET_MOUSE_SENSITIVITY = 0x41401D46,
        GET_MOUSE_WHEEL = 0x51870C68,
        GET_NAME_OF_INFO_ZONE = 0x5CAD7949,
        GET_NAME_OF_SCRIPT_TO_AUTOMATICALLY_START = 0x72C13404,
        GET_NAME_OF_ZONE = 0x25442DF7,
        GET_NAVMESH_ROUTE_RESULT = 0x4EFE6B67,
        GET_NEAREST_CABLE_CAR = 0x7F3A0E22,
        GET_NEEDED_PLAYER_CASH_FOR_LEVEL = 0x3C14367C,
        GET_NETWORK_ID_FROM_OBJECT = 0x50424095,
        GET_NETWORK_ID_FROM_PED = 0x7BEE5003,
        GET_NETWORK_ID_FROM_VEHICLE = 0x1BC70617,
        GET_NETWORK_JOIN_FAIL = 0x4A164056,
        GET_NETWORK_PLAYER_VIP = 0xB6B0C10,
        GET_NETWORK_RESTART_NODE_DEBUG = 0x6629119D,
        GET_NETWORK_TIMER = 0x20FD4F4E,
        GET_NEXT_BLIP_INFO_ID = 0x154932F0,
        GET_NEXT_CLOSEST_CAR_NODE = 0x5935382A,
        GET_NEXT_CLOSEST_CAR_NODE_FAVOUR_DIRECTION = 0x6E3906E4,
        GET_NEXT_CLOSEST_CAR_NODE_WITH_HEADING = 0x3D7A673F,
        GET_NEXT_CLOSEST_CAR_NODE_WITH_HEADING_ON_ISLAND = 0x320E1E3B,
        GET_NEXT_STATION_FOR_TRAIN = 0x4835637D,
        GET_NO_LAW_VEHICLES_DESTROYED_BY_LOCAL_PLAYER = 0x63C50673,
        GET_NO_OF_PLAYERS_IN_TEAM = 0x1CFD32E5,
        GET_NTH_CLOSEST_CAR_NODE = 0x740912C2,
        GET_NTH_CLOSEST_CAR_NODE_FAVOUR_DIRECTION = 0x6F766824,
        GET_NTH_CLOSEST_CAR_NODE_WITH_HEADING = 0x1F6B3FF0,
        GET_NTH_CLOSEST_CAR_NODE_WITH_HEADING_ON_ISLAND = 0x59DB1AD1,
        GET_NTH_CLOSEST_WATER_NODE_WITH_HEADING = 0x36F453FF,
        GET_NTH_GROUP_MEMBER = 0x48CE0609,
        GET_NTH_INTEGER_IN_STRING = 0x301545FD,
        GET_NUMBER_LINES = 0x67B725B2,
        GET_NUMBER_LINES_WITH_LITERAL_STRINGS = 0x71DE26A3,
        GET_NUMBER_LINES_WITH_SUBSTRINGS = 0x541084,
        GET_NUMBER_OF_ACTIVE_STICKY_BOMBS_OWNED_BY_PED = 0x21B85DA9,
        GET_NUMBER_OF_CHAR_DRAWABLE_VARIATIONS = 0x3C293296,
        GET_NUMBER_OF_CHAR_TEXTURE_VARIATIONS = 0x6C4113E,
        GET_NUMBER_OF_FIRES_IN_AREA = 0x1E144C8B,
        GET_NUMBER_OF_FIRES_IN_RANGE = 0x283821D2,
        GET_NUMBER_OF_FOLLOWERS = 0x303C3059,
        GET_NUMBER_OF_INJURED_PEDS_IN_RANGE = 0x3BB313CB,
        GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT = 0x5A1C52C7,
        GET_NUMBER_OF_PASSENGERS = 0x5BE30681,
        GET_NUMBER_OF_PLAYERS = 0x62405882,
        GET_NUMBER_OF_STICKY_BOMBS_STUCK_TO_OBJECT = 0x4AD026EE,
        GET_NUMBER_OF_STICKY_BOMBS_STUCK_TO_VEHICLE = 0x285D1184,
        GET_NUMBER_OF_WEB_PAGE_LINKS = 0x18A22AE4,
        GET_NUM_CAR_COLOURS = 0x5AA025C2,
        GET_NUM_CAR_LIVERIES = 0xA632BB4,
        GET_NUM_CONSOLE_COMMAND_TOKENS = 0x205E2D92,
        GET_NUM_KILLS_FOR_RANK_POINTS = 0x239C0EEC,
        GET_NUM_OF_MODELS_KILLED_BY_PLAYER = 0x75B43A72,
        GET_NUM_STREAMING_REQUESTS = 0x53216168,
        GET_OBJECT_ANIM_CURRENT_TIME = 0x29F02CB1,
        GET_OBJECT_ANIM_TOTAL_TIME = 0x26E66DF3,
        GET_OBJECT_COORDINATES = 0x49DA4F9E,
        GET_OBJECT_FRAGMENT_DAMAGE_HEALTH = 0x79CA30B1,
        GET_OBJECT_FROM_NETWORK_ID = 0x7AA91131,
        GET_OBJECT_HEADING = 0x791D1778,
        GET_OBJECT_HEALTH = 0x4ACB039B,
        GET_OBJECT_MASS = 0xB8B3941,
        GET_OBJECT_MODEL = 0x5CC55619,
        GET_OBJECT_PED_IS_HOLDING = 0x45345838,
        GET_OBJECT_QUATERNION = 0xF731898,
        GET_OBJECT_ROTATION_VELOCITY = 0x492A71E2,
        GET_OBJECT_SPEED = 0x1C2F57FB,
        GET_OBJECT_TURN_MASS = 0x3C85109F,
        GET_OBJECT_VELOCITY = 0x6D651A7,
        GET_OFFSETS_FOR_ATTACH_CAR_TO_CAR = 0x2CAD4E39,
        GET_OFFSET_FROM_CAR_GIVEN_WORLD_COORDS = 0x373B213C,
        GET_OFFSET_FROM_CAR_IN_WORLD_COORDS = 0x7F8D3DD9,
        GET_OFFSET_FROM_CHAR_IN_WORLD_COORDS = 0x737F24F9,
        GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS = 0x68966670,
        GET_OFFSET_FROM_OBJECT_IN_WORLD_COORDS = 0x449F4165,
        GET_ONLINE_LAN = 0x6B032A0B,
        GET_ONLINE_SCORE = 0x6CFD3E5F,
        GET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER = 0x5B652681,
        GET_PAD_ORIENTATION = 0x58EF2B2B,
        GET_PAD_PITCH_ROLL = 0x767B7EC9,
        GET_PAD_STATE = 0x5D4C1D59,
        GET_PARKING_NODE_IN_AREA = 0x70CB4DCE,
        GET_PED_AT_HEAD_OF_QUEUE = 0x9FE0380,
        GET_PED_BONE_POSITION = 0x43475BB3,
        GET_PED_CLIMB_STATE = 0x391822A7,
        GET_PED_FROM_NETWORK_ID = 0x69F11716,
        GET_PED_GROUP_INDEX = 0x58E53B06,
        GET_PED_MODEL_FROM_INDEX = 0x124D4571,
        GET_PED_OBJECT_IS_ATTACHED_TO = 0x755D6DF8,
        GET_PED_PATH_MAY_DROP_FROM_HEIGHT = 0x45AA529D,
        GET_PED_PATH_MAY_USE_CLIMBOVERS = 0x714C1031,
        GET_PED_PATH_MAY_USE_LADDERS = 0x503E2D1E,
        GET_PED_PATH_WILL_AVOID_DYNAMIC_OBJECTS = 0x74F97CF8,
        GET_PED_STEERS_AROUND_OBJECTS = 0x75E32257,
        GET_PED_STEERS_AROUND_PEDS = 0x179848E4,
        GET_PED_TYPE = 0x18F477E1,
        GET_PETROL_TANK_HEALTH = 0x2C835642,
        GET_PHYSICAL_SCREEN_RESOLUTION = 0x3CD830D0,
        GET_PICKUP_COORDINATES = 0xF636C38,
        GET_PLANE_UNDERCARRIAGE_POSITION = 0x353F0568,
        GET_PLAYERSETTINGS_MODEL_CHOICE = 0x116E5A1F,
        GET_PLAYERS_LAST_CAR_NO_SAVE = 0x12067E8D,
        GET_PLAYER_CHAR = 0x511454A9,
        GET_PLAYER_COLOUR = 0x25270A4B,
        GET_PLAYER_GROUP = 0x41AB3C30,
        GET_PLAYER_HAS_TRACKS = 0x396844BE,
        GET_PLAYER_ID = 0x62E319C6,
        GET_PLAYER_ID_FOR_THIS_PED = 0x733B61C6,
        GET_PLAYER_LCPD_SCORE = 0x2BEB02D6,
        GET_PLAYER_MAX_ARMOUR = 0x17265607,
        GET_PLAYER_MAX_HEALTH = 0x52F27084,
        GET_PLAYER_NAME = 0x570F5725,
        GET_PLAYER_POINTS = 0x38111C8B,
        GET_PLAYER_RADIO_MODE = 0x32795678,
        GET_PLAYER_RADIO_STATION_INDEX = 0x4E493AAF,
        GET_PLAYER_RADIO_STATION_NAME = 0x25136AC2,
        GET_PLAYER_RADIO_STATION_NAME_ROLL = 0x1A936344,
        GET_PLAYER_RANK_LEVEL_DURING_MP = 0x7B31633E,
        GET_PLAYER_RGB_COLOUR = 0x73BD71A9,
        GET_PLAYER_TEAM = 0x4C2879AD,
        GET_PLAYER_TO_PLACE_BOMB_IN_CAR = 0x17572318,
        GET_PLAYER_WANTED_LEVEL_INCREMENT = 0x44BB2306,
        GET_POSITION_OF_ANALOGUE_STICKS = 0x4F7F4FAE,
        GET_POSITION_OF_CAR_RECORDING_AT_TIME = 0x3B37165,
        GET_PROFILE_SETTING = 0x575A3431,
        GET_PROGRESS_PERCENTAGE = 0x78E9500C,
        GET_RADAR_VIEWPORT_ID = 0x4A7C19FE,
        GET_RADIO_NAME = 0x7EC9580E,
        GET_RANDOM_CAR_BACK_BUMPER_IN_SPHERE = 0x2C37408C,
        GET_RANDOM_CAR_FRONT_BUMPER_IN_SPHERE_NO_SAVE = 0x13C91ACD,
        GET_RANDOM_CAR_IN_SPHERE = 0x528F5EA7,
        GET_RANDOM_CAR_IN_SPHERE_NO_SAVE = 0xA7E36E5,
        GET_RANDOM_CAR_MODEL_IN_MEMORY = 0x195C13BC,
        GET_RANDOM_CAR_NODE = 0x588E1506,
        GET_RANDOM_CAR_NODE_INCLUDE_SWITCHED_OFF_NODES = 0x2D1A5F8C,
        GET_RANDOM_CAR_OF_TYPE_IN_ANGLED_AREA_NO_SAVE = 0x6D4746D8,
        GET_RANDOM_CAR_OF_TYPE_IN_AREA = 0x2E774002,
        GET_RANDOM_CAR_OF_TYPE_IN_AREA_NO_SAVE = 0x74AF54F0,
        GET_RANDOM_CHAR_IN_AREA_OFFSET_NO_SAVE = 0x6ED17CF8,
        GET_RANDOM_NETWORK_RESTART_NODE = 0xA2B76C2,
        GET_RANDOM_NETWORK_RESTART_NODE_EXCLUDING_GROUP = 0x393309,
        GET_RANDOM_NETWORK_RESTART_NODE_OF_GROUP = 0x1A7C1AA7,
        GET_RANDOM_NETWORK_RESTART_NODE_USING_GROUP_LIST = 0x3CA3302,
        GET_RANDOM_WATER_NODE = 0x6FBE6CE6,
        GET_REMOTE_CONTROLLED_CAR = 0x311926C6,
        GET_RETURN_TO_FILTER_MENU = 0x2A055AFA,
        GET_RID_OF_PLAYER_PROSTITUTE = 0x512D5D7C,
        GET_ROOM_KEY_FROM_OBJECT = 0x561509AD,
        GET_ROOM_KEY_FROM_PICKUP = 0x28045C47,
        GET_ROOM_NAME_FROM_CHAR_DEBUG = 0x4A7620F7,
        GET_ROOT_CAM = 0x75E005F1,
        GET_ROPE_HEIGHT_FOR_OBJECT = 0x473B1371,
        GET_ROUTE_SIZE = 0x86138DE,
        GET_SAFE_LOCAL_RESTART_COORDS = 0x477450D4,
        GET_SAFE_PICKUP_COORDS = 0x1AE44443,
        GET_SAFE_POSITION_FOR_CHAR = 0x5D877285,
        GET_SCREEN_FADE_ALPHA = 0x4161E66,
        GET_SCREEN_RESOLUTION = 0xD8A1BCF,
        GET_SCREEN_VIEWPORT_ID = 0x25271044,
        GET_SCRIPT_CAM = 0x5F00596C,
        GET_SCRIPT_DRAW_CAM = 0x30F71BC6,
        GET_SCRIPT_FIRE_COORDS = 0x4F256F49,
        GET_SCRIPT_RENDERTARGET_RENDER_ID = 0x58296B19,
        GET_SCRIPT_TASK_STATUS = 0x74C14D31,
        GET_SEQUENCE_PROGRESS = 0x1FBD3ACA,
        GET_SEQUENCE_PROGRESS_RECURSIVE = 0x60BC4116,
        GET_SERVER_ID = 0x51983F94,
        GET_SIMPLE_BLIP_ID = 0x47B0898,
        GET_SORTED_NETWORK_RESTART_NODE = 0x5BF71B87,
        GET_SORTED_NETWORK_RESTART_NODE_EXCLUDING_GROUP = 0x55AC75E2,
        GET_SORTED_NETWORK_RESTART_NODE_OF_GROUP = 0x209F734C,
        GET_SORTED_NETWORK_RESTART_NODE_USING_GROUP_LIST = 0x22463E22,
        GET_SOUND_ID = 0x6342018A,
        GET_SOUND_LEVEL_AT_COORDS = 0x433E74C6,
        GET_SPAWN_COORDINATES_FOR_CAR_NODE = 0x5B386B6C,
        GET_SPEECH_FOR_EMERGENCY_SERVICE_CALL = 0x1B915945,
        GET_START_FROM_FILTER_MENU = 0x45073C46,
        GET_STATE_OF_CLOSEST_DOOR_OF_TYPE = 0x14007AC6,
        GET_STATIC_EMITTER_PLAYTIME = 0x68774A4,
        GET_STATION_NAME = 0x46F87F55,
        GET_STAT_FRONTEND_DISPLAY_TYPE = 0x347C4300,
        GET_STAT_FRONTEND_VISIBILITY = 0x38905687,
        GET_STREAM_BEAT_INFO = 0x6A3A2C88,
        GET_STREAM_PLAYTIME = 0x4B6211F2,
        GET_STRING_FROM_HASH_KEY = 0x16E14EA4,
        GET_STRING_FROM_STRING = 0x434534BE,
        GET_STRING_FROM_TEXT_FILE = 0x332F0E9A,
        GET_STRING_WIDTH = 0x64660709,
        GET_STRING_WIDTH_WITH_NUMBER = 0x33E0601D,
        GET_STRING_WIDTH_WITH_STRING = 0x48850E66,
        GET_STRING_WIDTH_WITH_TEXT_AND_INT = 0x5267B97,
        GET_TASK_PLACE_CAR_BOMB_UNSUCCESSFUL = 0xA4608E9,
        GET_TEAM_COLOUR = 0x4FC96A24,
        GET_TEAM_RGB_COLOUR = 0x42F561F2,
        GET_TEXTURE = 0xF5D1937,
        GET_TEXTURE_FROM_STREAMED_TXD = 0x32C24491,
        GET_TEXTURE_RESOLUTION = 0x1A75F0C,
        GET_TEXT_INPUT_ACTIVE = 0x32A3647C,
        GET_TIME_OF_DAY = 0x384B3876,
        GET_TIME_SINCE_LAST_ARREST = 0x475D2BEA,
        GET_TIME_SINCE_LAST_DEATH = 0x11162A93,
        GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC = 0x3B007E58,
        GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT = 0x19610E35,
        GET_TIME_SINCE_PLAYER_HIT_BUILDING = 0x126C0B99,
        GET_TIME_SINCE_PLAYER_HIT_CAR = 0x58C01823,
        GET_TIME_SINCE_PLAYER_HIT_OBJECT = 0x43C2796B,
        GET_TIME_SINCE_PLAYER_HIT_PED = 0x40602B66,
        GET_TIME_SINCE_PLAYER_RAN_LIGHT = 0x65D95395,
        GET_TIME_TIL_NEXT_STATION = 0x142E7C40,
        GET_TOTAL_DURATION_OF_CAR_RECORDING = 0x5F8C3937,
        GET_TOTAL_NUMBER_OF_PEDS_KILLED_BY_PLAYER = 0xB29AF78F,
        GET_TOTAL_NUMBER_OF_STATS = 0x6D823703,
        GET_TRAIN_CABOOSE = 0x3FB72D27,
        GET_TRAIN_CARRIAGE = 0x7F861E46,
        GET_TRAIN_PLAYER_WOULD_ENTER = 0x30481141,
        GET_TXD = 0x15D668D0,
        GET_VEHICLE_CLASS = 0x6F796702,
        GET_VEHICLE_COMPONENT_INFO = 0x3B5D0F27,
        GET_VEHICLE_DIRT_LEVEL = 0x571152F5,
        GET_VEHICLE_ENGINE_REVS = 0x2FFA0249,
        GET_VEHICLE_FROM_NETWORK_ID = 0x794E4A82,
        GET_VEHICLE_GEAR = 0x2D2F452D,
        GET_VEHICLE_MODEL_FROM_INDEX = 0x7E5C70BF,
        GET_VEHICLE_PLAYER_WOULD_ENTER = 0x20430265,
        GET_VEHICLE_QUATERNION = 0x6C5871D6,
        GET_VEHICLE_TYPE_OF_MODEL = 0x60F720F6,
        GET_VIEWPORT_POSITION_OF_COORD = 0x287A49A5,
        GET_VIEWPORT_POS_AND_SIZE = 0x4DDC6FB4,
        GET_WATER_HEIGHT = 0x2BB9620F,
        GET_WATER_HEIGHT_NO_WAVES = 0x67C82864,
        GET_WEAPONTYPE_MODEL = 0x4FE23F25,
        GET_WEAPONTYPE_SLOT = 0x5E4F6DE3,
        GET_WEB_PAGE_HEIGHT = 0x9FD24F3,
        GET_WEB_PAGE_LINK_AT_POSN = 0xC1C5B1B,
        GET_WEB_PAGE_LINK_HREF = 0x750C1CD7,
        GET_WEB_PAGE_LINK_POSN = 0x717B5EFB,
        GET_WIDTH_OF_LITERAL_STRING = 0x164B7363,
        GET_WIDTH_OF_SUBSTRING_GIVEN_TEXT_LABEL = 0x64E51535,
        GIVE_CONTROL_OF_NETWORK_ID_TO_CLIENT = 0x2BDADF3F,
        GIVE_DELAYED_WEAPON_TO_CHAR = 0x709154FC,
        GIVE_MELEE_ATTACK_TO_CHAR = 0xC38AE12C,
        GIVE_PED_AMBIENT_OBJECT = 0x44AA71F9,
        GIVE_PED_FAKE_NETWORK_NAME = 0x55E0158B,
        GIVE_PED_HELMET = 0x7A0177D,
        GIVE_PED_HELMET_WITH_OPTS = 0x3B6E1D1E,
        GIVE_PED_PICKUP_OBJECT = 0x684D1517,
        GIVE_PLAYER_HELMET = 0x463F190F,
        GIVE_PLAYER_RAGDOLL_CONTROL = 0x5A1D7A2F,
        GIVE_REMOTE_CONTROLLED_MODEL_TO_PLAYER = 0x663979D9,
        GIVE_WEAPON_TO_CHAR = 0x3E90416,
        GRAB_ENTITY_ON_ROPE_FOR_OBJECT = 0x309F1F4B,
        GRAB_NEARBY_OBJECT_WITH_SPECIAL_ATTRIBUTE = 0x256472F1,
        HANDLE_AUDIO_ANIM_EVENT = 0x56C15139,
        HAND_VEHICLE_CONTROL_BACK_TO_PLAYER = 0x6C654678,
        HAS_ACHIEVEMENT_BEEN_PASSED = 0x32765F37,
        HAS_ADDITIONAL_TEXT_LOADED = 0x4832644E,
        HAS_CAR_BEEN_DAMAGED_BY_CAR = 0x119A668D,
        HAS_CAR_BEEN_DAMAGED_BY_CHAR = 0x61487DBF,
        HAS_CAR_BEEN_DAMAGED_BY_WEAPON = 0xEE34390,
        HAS_CAR_BEEN_DROPPED_OFF = 0x24C3A6C,
        HAS_CAR_BEEN_RESPRAYED = 0x3D0432F2,
        HAS_CAR_RECORDING_BEEN_LOADED = 0x453F587D,
        HAS_CAR_STOPPED_BECAUSE_OF_LIGHT = 0x40CD2BD4,
        HAS_CHAR_ANIM_FINISHED = 0x53F34027,
        HAS_CHAR_BEEN_ARRESTED = 0x210A0879,
        HAS_CHAR_BEEN_DAMAGED_BY_CAR = 0x30A65021,
        HAS_CHAR_BEEN_DAMAGED_BY_CHAR = 0x1DD624A0,
        HAS_CHAR_BEEN_DAMAGED_BY_WEAPON = 0x6DB26E07,
        HAS_CHAR_BEEN_PHOTOGRAPHED = 0x1F2928A6,
        HAS_CHAR_GOT_WEAPON = 0x11F759DE,
        HAS_CHAR_SPOTTED_CHAR = 0x1ADD68E8,
        HAS_CHAR_SPOTTED_CHAR_IN_FRONT = 0x156D5236,
        HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_CAR = 0x4D6B3E20,
        HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_CHAR = 0x1FC90C7C,
        HAS_COLLISION_FOR_MODEL_LOADED = 0x7C3939E7,
        HAS_CONTROL_OF_NETWORK_ID = 0x176C2DB5,
        HAS_CUTSCENE_FINISHED = 0x4ECE1AD2,
        HAS_CUTSCENE_LOADED = 0x5DE43980,
        HAS_DEATHARREST_EXECUTED = 0x3B0C6738,
        HAS_FRAGMENT_ROOT_OF_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED = 0x31B64D2B,
        HAS_GAMER_CHANGED_NETWORK_MODEL_SETTINGS = 0x7EBB00D7,
        HAS_MODEL_LOADED = 0x4E61480A,
        HAS_NETWORK_PLAYER_LEFT_GAME = 0x135154B0,
        HAS_NET_ID_BEEN_CLONED = 0x1F0A3D73,
        HAS_OBJECT_BEEN_DAMAGED = 0x7E0D6CB8,
        HAS_OBJECT_BEEN_DAMAGED_BY_CAR = 0x50801274,
        HAS_OBJECT_BEEN_DAMAGED_BY_CHAR = 0xB464BE8,
        HAS_OBJECT_BEEN_DAMAGED_BY_WEAPON = 0x547C42B1,
        HAS_OBJECT_BEEN_PHOTOGRAPHED = 0x57895F38,
        HAS_OBJECT_BEEN_UPROOTED = 0x58737620,
        HAS_OBJECT_COLLIDED_WITH_ANYTHING = 0x106811E4,
        HAS_OBJECT_FRAGMENT_ROOT_BEEN_DAMAGED = 0x3162071D,
        HAS_OVERRIDEN_SIT_IDLE_ANIM_FINISHED = 0x520A745D,
        HAS_PICKUP_BEEN_COLLECTED = 0x2F2226E5,
        HAS_PLAYER_COLLECTED_PICKUP = 0x25D2170,
        HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED = 0x64E06CBB,
        HAS_PLAYER_DAMAGED_AT_LEAST_ONE_VEHICLE = 0x674849B5,
        HAS_PLAYER_RANK_BEEN_UPGRADED = 0x6A842382,
        HAS_POOL_OBJECT_COLLIDED_WITH_CUSHION = 0x3E8D7D3F,
        HAS_POOL_OBJECT_COLLIDED_WITH_OBJECT = 0x24D70069,
        HAS_RELOADED_WITH_MOTION_CONTROL = 0x8C6502C,
        HAS_RESPRAY_HAPPENED = 0x465574B0,
        HAS_SCRIPT_LOADED = 0x2A171915,
        HAS_SOUND_FINISHED = 0x2CA53AA1,
        HAS_STREAMED_TXD_LOADED = 0x5F9C43D4,
        HAS_THIS_ADDITIONAL_TEXT_LOADED = 0x6CF248FD,
        HAS_TRAIN_DERAILED = 0x961212CB,
        HAVE_ANIMS_LOADED = 0x1D3F681D,
        HAVE_REQUESTED_PATH_NODES_BEEN_LOADED = 0x54DD5868,
        HELI_AUDIO_SHOULD_SKIP_STARTUP = 0x4CC001AC,
        HIDE_CHAR_WEAPON_FOR_SCRIPTED_CUTSCENE = 0x2B7C5CFB,
        HIDE_HELP_TEXT_THIS_FRAME = 0x16AF6DEB,
        HIDE_HUD_AND_RADAR_THIS_FRAME = 0x60320FEB,
        HIGHLIGHT_MENU_ITEM = 0x1ABE6A4C,
        HIGH_FALL_SCREAM = 0x478976DB,
        HINT_CAM = 0x1B637A1C,
        HOW_LONG_HAS_NETWORK_PLAYER_BEEN_DEAD_FOR = 0x4E6120A9,
        IMPROVE_CAR_BY_CHEATING = 0xB63BAF8D,
        IMPROVE_LOW_PERFORMANCE_MISSION_PER_FRAME_FLAG = 0x2B64229C,
        INCREASE_PLAYER_MAX_ARMOUR = 0x2232704D,
        INCREASE_PLAYER_MAX_HEALTH = 0x40A703A6,
        INCREMENT_FLOAT_STAT = 0x548E3AFC,
        INCREMENT_FLOAT_STAT_NO_MESSAGE = 0x2C6564F2,
        INCREMENT_INT_STAT = 0x14D242D9,
        INCREMENT_INT_STAT_NO_MESSAGE = 0x29827605,
        INIT_CUTSCENE = 0x47E50BD3,
        INIT_DEBUG_WIDGETS = 0x73E911E8,
        INIT_FRONTEND_HELPER_TEXT = 0x617B191D,
        IS_2PLAYER_GAME_GOING_ON = 0x604E1C46,
        IS_AMBIENT_SPEECH_DISABLED = 0x563F4CC2,
        IS_AMBIENT_SPEECH_PLAYING = 0x32F24CB,
        IS_ANY_CHAR_SHOOTING_IN_AREA = 0x19D16ACE,
        IS_ANY_PICKUP_AT_COORDS = 0x75DC4737,
        IS_ANY_SPEECH_PLAYING = 0x170F7E75,
        IS_AREA_OCCUPIED = 0x5BE1238D,
        IS_ATTACHED_PLAYER_HEADING_ACHIEVED = 0x487A1886,
        IS_AUSSIE_VERSION = 0x1AE72F40,
        IS_AUTO_AIMING_ON = 0x366B0444,
        IS_AUTO_SAVE_IN_PROGRESS = 0x601A5770,
        IS_BIG_VEHICLE = 0x60305168,
        IS_BIT_SET = 0x5373544E,
        IS_BLIP_SHORT_RANGE = 0x32E84B6A,
        IS_BULLET_IN_AREA = 0x58493B8E,
        IS_BULLET_IN_BOX = 0x60964DB8,
        IS_BUTTON_JUST_PRESSED = 0x16C37CD,
        IS_BUTTON_PRESSED = 0x7FF21081,
        IS_CAM_ACTIVE = 0x348D7AF5,
        IS_CAM_COLLIDING = 0x39595CE1,
        IS_CAM_HAPPY = 0x7D95313B,
        IS_CAM_INTERPOLATING = 0x1AE118F4,
        IS_CAM_PROPAGATING = 0x7EAC3387,
        IS_CAM_SEQUENCE_COMPLETE = 0x55727056,
        IS_CAM_SHAKING = 0x89C57D7,
        IS_CAR_ATTACHED = 0x6BDC40EB,
        IS_CAR_A_MISSION_CAR = 0x7A422E14,
        IS_CAR_DEAD = 0x2AAB340A,
        IS_CAR_DOOR_DAMAGED = 0x5AFE791F,
        IS_CAR_DOOR_FULLY_OPEN = 0x55444602,
        IS_CAR_HEALTH_GREATER = 0x63F07A46,
        IS_CAR_IN_AIR_PROPER = 0x37BF18AC,
        IS_CAR_IN_ANGLED_AREA_2D = 0x74290BCB,
        IS_CAR_IN_ANGLED_AREA_3D = 0x3521612F,
        IS_CAR_IN_AREA_2D = 0x7EA03481,
        IS_CAR_IN_AREA_3D = 0x289D3888,
        IS_CAR_IN_GARAGE_AREA = 0x5868E2,
        IS_CAR_IN_WATER = 0xFF342B2,
        IS_CAR_LOW_RIDER = 0x6B3D5D45,
        IS_CAR_MODEL = 0x3D16145,
        IS_CAR_ON_FIRE = 0x189A2BB1,
        IS_CAR_ON_SCREEN = 0x59E3553F,
        IS_CAR_PASSENGER_SEAT_FREE = 0x1BDA0DA5,
        IS_CAR_PLAYING_ANIM = 0x49F619F1,
        IS_CAR_SIREN_ON = 0x129A1569,
        IS_CAR_STOPPED = 0x4A000F52,
        IS_CAR_STOPPED_AT_TRAFFIC_LIGHTS = 0x141B23A9,
        IS_CAR_STOPPED_IN_AREA_2D = 0x2ED27636,
        IS_CAR_STREET_RACER = 0x24DF32CC,
        IS_CAR_STUCK = 0xCD276B4,
        IS_CAR_STUCK_ON_ROOF = 0x46892D07,
        IS_CAR_TOUCHING_CAR = 0x7B014306,
        IS_CAR_TYRE_BURST = 0x1DF623F9,
        IS_CAR_UPRIGHT = 0x1A212500,
        IS_CAR_UPSIDEDOWN = 0x2E291239,
        IS_CAR_VISIBLY_DAMAGED = 0x7A81B369,
        IS_CAR_WAITING_FOR_WORLD_COLLISION = 0x6EA72622,
        IS_CHAR_ARMED = 0x46A4720,
        IS_CHAR_DEAD = 0x6A6B4F18,
        IS_CHAR_DUCKING = 0x495D6021,
        IS_CHAR_FACING_CHAR = 0x5AD758A,
        IS_CHAR_FATALLY_INJURED = 0x4A7802CB,
        IS_CHAR_GESTURING = 0x7025A4A,
        IS_CHAR_GETTING_IN_TO_A_CAR = 0x5C8C2E39,
        IS_CHAR_GETTING_UP = 0x4A906237,
        IS_CHAR_HEAD_MISSING = 0xD1E0327,
        IS_CHAR_HEALTH_GREATER = 0x7B75036E,
        IS_CHAR_HOLDING_OBJECT = 0x1C51AA94,
        IS_CHAR_INJURED = 0x4ECB2267,
        IS_CHAR_IN_AIR = 0x23C15141,
        IS_CHAR_IN_ANGLED_AREA_2D = 0x7D591EAD,
        IS_CHAR_IN_ANGLED_AREA_3D = 0x610157C9,
        IS_CHAR_IN_ANY_BOAT = 0x210A4F1D,
        IS_CHAR_IN_ANY_CAR = 0x71184DA3,
        IS_CHAR_IN_ANY_HELI = 0xFC40275,
        IS_CHAR_IN_ANY_PLANE = 0x4BAC2912,
        IS_CHAR_IN_ANY_POLICE_VEHICLE = 0x4414660B,
        IS_CHAR_IN_ANY_TRAIN = 0x22434C20,
        IS_CHAR_IN_AREA_2D = 0x7F371477,
        IS_CHAR_IN_AREA_3D = 0x44A30283,
        IS_CHAR_IN_AREA_ON_FOOT_2D = 0x3F2D7D06,
        IS_CHAR_IN_CAR = 0x7D037B40,
        IS_CHAR_IN_FLYING_VEHICLE = 0x7FA763E8,
        IS_CHAR_IN_MELEE_COMBAT = 0x68855BE7,
        IS_CHAR_IN_MODEL = 0x45DB5FE9,
        IS_CHAR_IN_TAXI = 0x28A73BCA,
        IS_CHAR_IN_WATER = 0x7B1F0130,
        IS_CHAR_IN_ZONE = 0x435054B3,
        IS_CHAR_MALE = 0x7D76127F,
        IS_CHAR_MODEL = 0x6C403ACC,
        IS_CHAR_ON_ANY_BIKE = 0xFB44F54,
        IS_CHAR_ON_FIRE = 0x358E21C5,
        IS_CHAR_ON_FOOT = 0x10A86CF4,
        IS_CHAR_ON_PLAYER_MACHINE = 0x1BFE7952,
        IS_CHAR_ON_SCREEN = 0x59471B11,
        IS_CHAR_PLAYING_ANIM = 0x673E4CD2,
        IS_CHAR_RESPONDING_TO_ANY_EVENT = 0x5DDB09F8,
        IS_CHAR_RESPONDING_TO_EVENT = 0x32653482,
        IS_CHAR_SHOOTING = 0x324D1594,
        IS_CHAR_SHOOTING_IN_AREA = 0x42941472,
        IS_CHAR_SITTING_IDLE = 0x64621F1,
        IS_CHAR_SITTING_IN_ANY_CAR = 0x1DBD7385,
        IS_CHAR_SITTING_IN_CAR = 0x309C265B,
        IS_CHAR_STOPPED = 0xCA614E6,
        IS_CHAR_STUCK_UNDER_CAR = 0x70BB021A,
        IS_CHAR_SWIMMING = 0x75D21B78,
        IS_CHAR_TOUCHING_CHAR = 0x3FB6DED,
        IS_CHAR_TOUCHING_OBJECT = 0x3AB06137,
        IS_CHAR_TOUCHING_OBJECT_ON_FOOT = 0x7C0B46C8,
        IS_CHAR_TOUCHING_VEHICLE = 0x307A4B8E,
        IS_CHAR_TRYING_TO_ENTER_A_LOCKED_CAR = 0x1C132038,
        IS_CHAR_USING_ANY_SCENARIO = 0x64BD4664,
        IS_CHAR_USING_MAP_ATTRACTOR = 0x60B26D74,
        IS_CHAR_USING_SCENARIO = 0x62842540,
        IS_CHAR_VISIBLE = 0xA0F19D1,
        IS_CHAR_WAITING_FOR_WORLD_COLLISION = 0x51453EA2,
        IS_CLOSEST_OBJECT_OF_TYPE_SMASHED_OR_DAMAGED = 0x788026F4,
        IS_CONTROL_JUST_PRESSED = 0x4CB729F1,
        IS_CONTROL_PRESSED = 0xE635761,
        IS_CONVERSATION_AT_NODE = 0x7C6452DC,
        IS_COP_PED_IN_AREA_3D_NO_SAVE = 0x1866CB5,
        IS_COP_VEHICLE_IN_AREA_3D_NO_SAVE = 0x72F81072,
        IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID = 0x5A2F2DD1,
        IS_DEBUG_CAMERA_ON = 0x4E26149C,
        IS_EMERGENCY_SERVICES_VEHICLE = 0x6AFF0587,
        IS_EPISODE_AVAILABLE = 0x232800BD,
        IS_EPISODIC_DISC_BUILD = 0x511A2EC9,
        IS_EXPLOSION_IN_AREA = 0x676B6BCA,
        IS_EXPLOSION_IN_SPHERE = 0x47A77D2E,
        IS_FOLLOW_VEHICLE_CAM_OFFSET_ACTIVE = 0x40072120,
        IS_FONT_LOADED = 0x69B53ADA,
        IS_FRONTEND_FADING = 0x9FD7668,
        IS_GAME_IN_CONTROL_OF_MUSIC = 0x4FF71989,
        IS_GAME_KEYBOARD_KEY_JUST_PRESSED = 0x540D127D,
        IS_GAME_KEYBOARD_KEY_PRESSED = 0x5FA96262,
        IS_GAME_KEYBOARD_NAV_DOWN_PRESSED = 0x45E45B1D,
        IS_GAME_KEYBOARD_NAV_LEFT_PRESSED = 0x793F238A,
        IS_GAME_KEYBOARD_NAV_RIGHT_PRESSED = 0x3C156533,
        IS_GAME_KEYBOARD_NAV_UP_PRESSED = 0x14AB75AE,
        IS_GARAGE_CLOSED = 0x26BC1939,
        IS_GARAGE_OPEN = 0x65A80992,
        IS_GERMAN_VERSION = 0x18CC0AB6,
        IS_GROUP_LEADER = 0x2CEC22DA,
        IS_GROUP_MEMBER = 0x674D6F8E,
        IS_HELI_PART_BROKEN = 0x1E2D5A7B,
        IS_HELP_MESSAGE_BEING_DISPLAYED = 0x6E4E1BEC,
        IS_HINT_RUNNING = 0x323806B1,
        IS_HUD_PREFERENCE_SWITCHED_ON = 0x69604AE2,
        IS_HUD_RETICULE_COMPLEX = 0x4DDB5D59,
        IS_INTERIOR_SCENE = 0x61DA102E,
        IS_IN_ATTRACT_MODE = 0xBC3E1F60,
        IS_IN_CAR_FIRE_BUTTON_PRESSED = 0x63B70F7C,
        IS_IN_LAN_MODE = 0x1B8E7EED,
        IS_IN_MP_TUTORIAL = 0x13750991,
        IS_IN_PLAYER_SETTINGS_MENU = 0x18CA2D3A,
        IS_IN_SPECTATOR_MODE = 0x7CC3F86,
        IS_JAPANESE_VERSION = 0x37D022E0,
        IS_KEYBOARD_KEY_JUST_PRESSED = 0x75C9772B,
        IS_KEYBOARD_KEY_PRESSED = 0x1D334237,
        IS_LAZLOW_STATION_LOCKED = 0x1CB80079,
        IS_LCPD_DATA_VALID = 0x611D69BC,
        IS_LIVE_VERSION = 0x15A02268,
        IS_LOOK_INVERTED = 0x1817000B,
        IS_MEMORY_CARD_IN_USE = 0x38F61531,
        IS_MESSAGE_BEING_DISPLAYED = 0x68EA6EBE,
        IS_MINIGAME_IN_PROGRESS = 0x68F06A02,
        IS_MISSION_COMPLETE_PLAYING = 0x6C3B5917,
        IS_MOBILE_PHONE_CALL_ONGOING = 0x698F6172,
        IS_MOBILE_PHONE_RADIO_ACTIVE = 0x4AF14146,
        IS_MODEL_IN_CDIMAGE = 0x771C2838,
        IS_MONEY_PICKUP_AT_COORDS = 0x43167C6E,
        IS_MOUSE_BUTTON_JUST_PRESSED = 0x27323E51,
        IS_MOUSE_BUTTON_PRESSED = 0x39E600D0,
        IS_MOUSE_USING_VERTICAL_INVERSION = 0x64655F10,
        IS_NETWORK_CONNECTED = 0x43945A83,
        IS_NETWORK_GAME_PENDING = 0x7563071D,
        IS_NETWORK_GAME_RUNNING = 0x1CF773D4,
        IS_NETWORK_PLAYER_ACTIVE = 0x4E237943,
        IS_NETWORK_PLAYER_VISIBLE = 0x1031625F,
        IS_NETWORK_SESSION = 0x6E2B38F3,
        IS_NEXT_STATION_ALLOWED = 0x7B8B1D10,
        IS_NON_FRAG_OBJECT_SMASHED = 0x5C723F31,
        IS_NUMLOCK_ENABLED = 0x39487FB9,
        IS_OBJECT_ATTACHED = 0x701F4004,
        IS_OBJECT_IN_ANGLED_AREA_2D = 0x9B37544,
        IS_OBJECT_IN_ANGLED_AREA_3D = 0x5D5A06F7,
        IS_OBJECT_IN_AREA_2D = 0x2C6D65AD,
        IS_OBJECT_IN_AREA_3D = 0x6D717883,
        IS_OBJECT_IN_WATER = 0x7BF7646F,
        IS_OBJECT_ON_FIRE = 0x7A240412,
        IS_OBJECT_ON_PLAYER_MACHINE = 0x736569,
        IS_OBJECT_ON_SCREEN = 0x6A9A3B1F,
        IS_OBJECT_PLAYING_ANIM = 0x4D2E58D5,
        IS_OBJECT_REASSIGNMENT_IN_PROGRESS = 0x7D0D6779,
        IS_OBJECT_STATIC = 0x7B181EB0,
        IS_OBJECT_TOUCHING_OBJECT = 0x6A2E514F,
        IS_OBJECT_UPRIGHT = 0x1EE13E29,
        IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE = 0x472C710B,
        IS_OUR_PLAYER_HIGHER_PRIORITY_FOR_CAR_GENERATION = 0x504E03FC,
        IS_PAIN_PLAYING = 0x32422759,
        IS_PARTY_MODE = 0x2A3A77FD,
        IS_PAUSE_MENU_ACTIVE = 0x6C4568A7,
        IS_PAY_N_SPRAY_ACTIVE = 0x1EE70376,
        IS_PC_USING_JOYPAD = 0x7E8E06F8,
        IS_PC_VERSION = 0x1D9853EA,
        IS_PEDS_VEHICLE_HOT = 0x470A7CBD,
        IS_PED_ATTACHED_TO_ANY_CAR = 0x78DC034E,
        IS_PED_ATTACHED_TO_OBJECT = 0xBCE3423,
        IS_PED_A_MISSION_PED = 0x5801768,
        IS_PED_BEING_JACKED = 0x68B829C7,
        IS_PED_CLIMBING = 0x66F5118F,
        IS_PED_DOING_DRIVEBY = 0x80F3B37,
        IS_PED_FLEEING = 0x5E486AA1,
        IS_PED_HOLDING_AN_OBJECT = 0x22811897,
        IS_PED_IN_COMBAT = 0x20106D6,
        IS_PED_IN_COVER = 0x5C825D83,
        IS_PED_IN_CUTSCENE_BLOCKING_BOUNDS = 0x55916D7A,
        IS_PED_IN_GROUP = 0x365054A7,
        IS_PED_JACKING = 0x676F0004,
        IS_PED_LOOKING_AT_CAR = 0x4859273F,
        IS_PED_LOOKING_AT_OBJECT = 0x5DD231A2,
        IS_PED_LOOKING_AT_PED = 0x7F206A7F,
        IS_PED_PINNED_DOWN = 0x3B13377,
        IS_PED_RAGDOLL = 0x3E251ADE,
        IS_PED_RETREATING = 0x7A0B156B,
        IS_PLACE_CAR_BOMB_ACTIVE = 0x775F6665,
        IS_PLAYBACK_GOING_ON_FOR_CAR = 0x375F145D,
        IS_PLAYER_BEING_ARRESTED = 0x79A95BF9,
        IS_PLAYER_CLIMBING = 0x3BF5404E,
        IS_PLAYER_CONTROL_ON = 0x30CD2F1F,
        IS_PLAYER_DEAD = 0x12AE0E27,
        IS_PLAYER_FREE_AIMING_AT_CHAR = 0x30D427B4,
        IS_PLAYER_FREE_FOR_AMBIENT_TASK = 0x63E7509E,
        IS_PLAYER_IN_INFO_ZONE = 0x66133D7,
        IS_PLAYER_IN_POSITION_FOR_CONVERSATION = 0x523284A3,
        IS_PLAYER_IN_REMOTE_MODE = 0x526B7BA9,
        IS_PLAYER_IN_SHORTCUT_TAXI = 0x44052D59,
        IS_PLAYER_LOGGING_IN_NP = 0x284E05E4,
        IS_PLAYER_ONLINE = 0x61C65FDE,
        IS_PLAYER_ONLINE_GAMESPY = 0x4C8C444B,
        IS_PLAYER_ONLINE_NP = 0x75593E18,
        IS_PLAYER_PERFORMING_STOPPIE = 0x2E815A94,
        IS_PLAYER_PERFORMING_WHEELIE = 0x613510D0,
        IS_PLAYER_PLAYING = 0x8274BA4,
        IS_PLAYER_PRESSING_HORN = 0x583A7A8B,
        IS_PLAYER_READY_FOR_CUTSCENE = 0x29D46FF4,
        IS_PLAYER_SCRIPT_CONTROL_ON = 0x38861F3A,
        IS_PLAYER_SIGNED_IN_LOCALLY = 0x547523EE,
        IS_PLAYER_TARGETTING_ANYTHING = 0x665F6BB7,
        IS_PLAYER_TARGETTING_CHAR = 0x58A6457C,
        IS_PLAYER_TARGETTING_OBJECT = 0x679934F9,
        IS_PLAYER_USING_JETPACK = 0xDB23A75A,
        IS_PLAYER_VEHICLE_ENTRY_DISABLED = 0x4908091D,
        IS_POINT_OBSCURED_BY_A_MISSION_ENTITY = 0x7FBC713E,
        IS_POS_IN_CUTSCENE_BLOCKING_BOUNDS = 0x593A553B,
        IS_PROJECTILE_IN_AREA = 0x7BB35FCF,
        IS_RADIO_HUD_ON = 0x45F249B7,
        IS_RADIO_RETUNING = 0x45C344AA,
        IS_RECORDING_GOING_ON_FOR_CAR = 0x4EAD730E,
        IS_RELATIONSHIP_SET = 0x4C076B40,
        IS_REPLAY_SAVING = 0x78021D03,
        IS_REPLAY_SYSTEM_ACTIVE = 0x41B2356C,
        IS_REPLAY_SYSTEM_SAVING = 0x318F65E6,
        IS_RUNNING_NETWORK_SCRIPT = 0xCDAFC3E,
        IS_SCORE_GREATER = 0x517B7068,
        IS_SCREEN_FADED_IN = 0x5E0713B2,
        IS_SCREEN_FADED_OUT = 0x59EE3A11,
        IS_SCREEN_FADING = 0x73700561,
        IS_SCREEN_FADING_IN = 0x5D1425DF,
        IS_SCREEN_FADING_OUT = 0xA940E03,
        IS_SCRIPTED_CONVERSATION_ONGOING = 0x3CA23254,
        IS_SCRIPTED_SPEECH_PLAYING = 0x12D71B44,
        IS_SCRIPT_FIRE_EXTINGUISHED = 0x394C1E55,
        IS_SITTING_OBJECT_NEAR = 0x120B4F15,
        IS_SNIPER_BULLET_IN_AREA = 0x6E435BDE,
        IS_SNIPER_INVERTED = 0x50DC54B3,
        IS_SPECIFIC_CAM_INTERPOLATING = 0x17C37E6D,
        IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE = 0x11EE28D5,
        IS_STREAMING_ADDITIONAL_TEXT = 0x23B00129,
        IS_STREAMING_PRIORITY_REQUESTS = 0x64342B55,
        IS_STREAMING_THIS_ADDITIONAL_TEXT = 0x4D077DBA,
        IS_STRING_NULL = 0x49A75618,
        IS_SYSTEM_UI_SHOWING = 0x5F643EE6,
        IS_THIS_A_MINIGAME_SCRIPT = 0x219A3AF6,
        IS_THIS_HELP_MESSAGE_BEING_DISPLAYED = 0x505D37D8,
        IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED = 0x9E878A4,
        IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED = 0x4D155EE8,
        IS_THIS_MACHINE_THE_SERVER = 0x2E5E1600,
        IS_THIS_MODEL_A_BIKE = 0x57F46B33,
        IS_THIS_MODEL_A_BOAT = 0x43CC0913,
        IS_THIS_MODEL_A_CAR = 0x6EA92FD5,
        IS_THIS_MODEL_A_HELI = 0x62EA75E0,
        IS_THIS_MODEL_A_PED = 0xE2438E5,
        IS_THIS_MODEL_A_PLANE = 0x176F4D4C,
        IS_THIS_MODEL_A_TRAIN = 0x7B8537F7,
        IS_THIS_MODEL_A_VEHICLE = 0x62BC0AEE,
        IS_THIS_PED_A_PLAYER = 0x37C85316,
        IS_THIS_PRINT_BEING_DISPLAYED = 0x459A7F23,
        IS_THREAD_ACTIVE = 0x52A30F7,
        IS_TRIP_SKIP_WAITING_FOR_SCRIPT_TO_FADE_IN = 0x9C65D24A,
        IS_USING_CONTROLLER = 0x669D053F,
        IS_VEHICLE_EXTRA_TURNED_ON = 0x4B920E81,
        IS_VEHICLE_ON_ALL_WHEELS = 0x4D460265,
        IS_VEHICLE_ON_PLAYER_MACHINE = 0x2CFE78F5,
        IS_VEHICLE_TOUCHING_OBJECT = 0x6CD4EB4,
        IS_VEH_DRIVEABLE = 0x17BC668D,
        IS_VEH_STUCK = 0x460D2EBB,
        IS_VEH_WINDOW_INTACT = 0x1D0B131A,
        IS_VIEWPORT_ACTIVE = 0x5D2B2A9A,
        IS_WANTED_LEVEL_GREATER = 0x7DA4736D,
        IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE = 0x5E7B0F23,
        IS_XBOX360_VERSION = 0x7E8C7096,
        KNOCK_PED_OFF_BIKE = 0x6CA57960,
        LAUNCH_LOCAL_PLAYER_IN_NETWORK_GAME = 0x70FE415C,
        LCPD_FIRST_TIME = 0x6C82562E,
        LCPD_HAS_BEEN_CONFIGURED = 0x23254427,
        LIMIT_ANGLE = 0x4CAE3B65,
        LIMIT_TWO_PLAYER_DISTANCE = 0x50AD1F3E,
        LINE = 0x6C6F6052,
        LISTEN_TO_PLAYER_GROUP_COMMANDS = 0x34AC73D6,
        LOAD_ADDITIONAL_TEXT = 0x28897EBD,
        LOAD_ALL_OBJECTS_NOW = 0x4BF36A32,
        LOAD_ALL_PATH_NODES = 0x356C2DDB,
        LOAD_CHAR_DECISION_MAKER = 0x7F7B4FC5,
        LOAD_COMBAT_DECISION_MAKER = 0xC7B14D9,
        LOAD_COMBAT_DECISION_MAKER_EVENT_RESPONSE = 0xC7B14D9,
        LOAD_GROUP_DECISION_MAKER = 0x67B13AF7,
        LOAD_PATH_NODES_IN_AREA = 0x44640C28,
        LOAD_SCENE = 0x39F62BFB,
        LOAD_SCENE_FOR_ROOM_BY_KEY = 0x6E904C1A,
        LOAD_SETTINGS = 0x77745390,
        LOAD_TEXT_FONT = 0x2D371601,
        LOAD_TXD = 0x52FC763A,
        LOAD_WEB_PAGE = 0x78C17971,
        LOCAL_PLAYER_IS_READY_TO_START_PLAYING = 0x5C03585C,
        LOCATE_CAR_2D = 0x36F70AF6,
        LOCATE_CAR_3D = 0x2A221E97,
        LOCATE_CHAR_ANY_MEANS_2D = 0x5BB767AD,
        LOCATE_CHAR_ANY_MEANS_3D = 0x437222B,
        LOCATE_CHAR_ANY_MEANS_CAR_2D = 0x1A455E51,
        LOCATE_CHAR_ANY_MEANS_CAR_3D = 0x58DD4CCC,
        LOCATE_CHAR_ANY_MEANS_CHAR_2D = 0x18EA4926,
        LOCATE_CHAR_ANY_MEANS_CHAR_3D = 0x3E441A58,
        LOCATE_CHAR_ANY_MEANS_OBJECT_2D = 0x4FD34079,
        LOCATE_CHAR_ANY_MEANS_OBJECT_3D = 0x6D0E1BCE,
        LOCATE_CHAR_IN_CAR_2D = 0x1DDA54EF,
        LOCATE_CHAR_IN_CAR_3D = 0xAC92D36,
        LOCATE_CHAR_IN_CAR_CAR_2D = 0x53B429F9,
        LOCATE_CHAR_IN_CAR_CAR_3D = 0x4D3547D1,
        LOCATE_CHAR_IN_CAR_CHAR_2D = 0x17BC4531,
        LOCATE_CHAR_IN_CAR_CHAR_3D = 0x14F234F,
        LOCATE_CHAR_IN_CAR_OBJECT_2D = 0x6CCB719D,
        LOCATE_CHAR_IN_CAR_OBJECT_3D = 0xC26452D,
        LOCATE_CHAR_ON_FOOT_2D = 0x50EE161F,
        LOCATE_CHAR_ON_FOOT_3D = 0x3D003090,
        LOCATE_CHAR_ON_FOOT_CAR_2D = 0x78A75EF4,
        LOCATE_CHAR_ON_FOOT_CAR_3D = 0x3C3E5FA0,
        LOCATE_CHAR_ON_FOOT_CHAR_2D = 0x191E2F12,
        LOCATE_CHAR_ON_FOOT_CHAR_3D = 0x4DA362B0,
        LOCATE_CHAR_ON_FOOT_OBJECT_2D = 0x67F518F0,
        LOCATE_CHAR_ON_FOOT_OBJECT_3D = 0x4A8E429A,
        LOCATE_DEAD_CAR_3D = 0x584D0C79,
        LOCATE_OBJECT_2D = 0x59A57BA8,
        LOCATE_OBJECT_3D = 0x6DB47487,
        LOCK_CAR_DOORS = 0x6702757C,
        LOCK_DOOR = 0x4083E337,
        LOCK_LAZLOW_STATION = 0x1B215A3B,
        LOCK_PLAYER_SETTINGS_GENRE_CHANGE = 0x33F4498E,
        LOOK_AT_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE = 0x6EB639E8,
        LOOP_RACE_TRACK = 0x77FD5097,
        MAINTAIN_FLASHING_STAR_AFTER_OFFENCE = 0x68880DCD,
        MAKE_OBJECT_TARGETTABLE = 0x228F1801,
        MAKE_PLAYER_FIRE_PROOF = 0x38293796,
        MAKE_PLAYER_GANG_DISAPPEAR = 0x34211CDA,
        MAKE_PLAYER_GANG_REAPPEAR = 0x295A652A,
        MAKE_PLAYER_SAFE_FOR_CUTSCENE = 0x45852A03,
        MAKE_ROOM_IN_PLAYER_GANG_FOR_MISSION_PEDS = 0x210E265E,
        MARK_CAR_AS_CONVOY_CAR = 0x79274447,
        MARK_CAR_AS_NO_LONGER_NEEDED = 0x20C76FD1,
        MARK_CHAR_AS_NO_LONGER_NEEDED = 0xB774604,
        MARK_MISSION_TRAINS_AS_NO_LONGER_NEEDED = 0x7E7104E,
        MARK_MISSION_TRAIN_AS_NO_LONGER_NEEDED = 0x37AC2A95,
        MARK_MODEL_AS_NO_LONGER_NEEDED = 0xFA0E33,
        MARK_OBJECT_AS_NO_LONGER_NEEDED = 0x493B655B,
        MARK_ROAD_NODE_AS_DONT_WANDER = 0x4C2621B6,
        MARK_SCRIPT_AS_NO_LONGER_NEEDED = 0x9E405DB,
        MARK_STREAMED_TXD_AS_NO_LONGER_NEEDED = 0x70EA2B89,
        MISSION_AUDIO_BANK_NO_LONGER_NEEDED = 0x12C42F66,
        MODIFY_CHAR_MOVE_BLEND_RATIO = 0x3E657606,
        MODIFY_CHAR_MOVE_STATE = 0x5CD32071,
        MP_GET_AMOUNT_OF_ANCHOR_POINTS = 0x6C7566F3,
        MP_GET_AMOUNT_OF_VARIATION_COMPONENT = 0x54DD6ACF,
        MP_GET_PREFERENCE_VALUE = 0x54F61C99,
        MP_GET_PROP_SETUP = 0x1C00658B,
        MP_GET_VARIATION_SETUP = 0x3775138E,
        MP_SET_PREFERENCE_VALUE = 0x216804D3,
        MUTE_GAMEWORLD_AND_POSITIONED_RADIO_FOR_TV = 0x79974E04,
        MUTE_GAMEWORLD_AUDIO = 0x446677C6,
        MUTE_POSITIONED_RADIO = 0x32C75195,
        MUTE_STATIC_EMITTER = 0xFCC0410,
        NETWORK_ACCEPT_INVITE = 0x4FDD00CE,
        NETWORK_ADVERTISE_SESSION = 0x1B9E5D07,
        NETWORK_ALL_PARTY_MEMBERS_PRESENT = 0x59C53FBA,
        NETWORK_AM_I_BLOCKED_BY_PLAYER = 0x4FAF2007,
        NETWORK_AM_I_MUTED_BY_PLAYER = 0x448F486A,
        NETWORK_CHANGE_EXTENDED_GAME_CONFIG = 0x4CFE3998,
        NETWORK_CHANGE_GAME_MODE = 0x3F054F44,
        NETWORK_CHANGE_GAME_MODE_PENDING = 0x379930F3,
        NETWORK_CHANGE_GAME_MODE_SUCCEEDED = 0x6D302DA9,
        NETWORK_CHECK_INVITE_ARRIVAL = 0x308E3719,
        NETWORK_CLEAR_INVITE_ARRIVAL = 0x37282D4F,
        NETWORK_CLEAR_SUMMONS = 0x6289239F,
        NETWORK_DID_INVITE_FRIEND = 0x3CAA1340,
        NETWORK_DISPLAY_HOST_GAMER_CARD = 0x414E4E7F,
        NETWORK_END_SESSION = 0x75291BEC,
        NETWORK_END_SESSION_PENDING = 0x489B0BB9,
        NETWORK_EXPAND_TO_32_PLAYERS = 0x36511E0A,
        NETWORK_FIND_GAME = 0x5D4D0C86,
        NETWORK_FIND_GAME_PENDING = 0x23D60810,
        NETWORK_FINISH_EXTENDED_SEARCH = 0x1E0A7AD8,
        NETWORK_GET_FIND_RESULT = 0x282D2CAA,
        NETWORK_GET_FRIENDLY_FIRE_OPTION = 0x577144A0,
        NETWORK_GET_FRIEND_COUNT = 0x5EEA3F25,
        NETWORK_GET_FRIEND_NAME = 0x17FD0934,
        NETWORK_GET_GAME_MODE = 0x29A75D1F,
        NETWORK_GET_HEALTH_RETICULE_OPTION = 0x546F581F,
        NETWORK_GET_HOST_AVERAGE_RANK = 0x4261E4C,
        NETWORK_GET_HOST_LATENCY = 0x74093768,
        NETWORK_GET_HOST_MATCH_PROGRESS = 0x59AA0635,
        NETWORK_GET_HOST_NAME = 0x4A8048F8,
        NETWORK_GET_HOST_SERVER_NAME = 0x31D740F,
        NETWORK_GET_LAN_SESSION = 0x48A723C1,
        NETWORK_GET_MAX_PRIVATE_SLOTS = 0x2EF80425,
        NETWORK_GET_MAX_SLOTS = 0x524F7543,
        NETWORK_GET_MET_PLAYER_NAME = 0x1F35F5C,
        NETWORK_GET_NEXT_TEXT_CHAT = 0x314E106A,
        NETWORK_GET_NUMBER_OF_GAMES = 0x10DF4CED,
        NETWORK_GET_NUM_OPEN_PUBLIC_SLOTS = 0x4E323A0A,
        NETWORK_GET_NUM_PARTY_MEMBERS = 0x27F65637,
        NETWORK_GET_NUM_PLAYERS_MET = 0x33500089,
        NETWORK_GET_NUM_UNACCEPTED_INVITES = 0x13244634,
        NETWORK_GET_NUM_UNFILLED_RESERVATIONS = 0x43C3B0B,
        NETWORK_GET_PLAYER_ID_OF_NEXT_TEXT_CHAT = 0x145B50AF,
        NETWORK_GET_RENDEZVOUS_HOST_PLAYER_ID = 0x282D29FE,
        NETWORK_GET_SERVER_NAME = 0x3665B8D,
        NETWORK_GET_TEAM_OPTION = 0x52152E04,
        NETWORK_GET_UNACCEPTED_INVITER_NAME = 0x1A7B3125,
        NETWORK_GET_UNACCEPTED_INVITE_EPISODE = 0x3432536A,
        NETWORK_GET_UNACCEPTED_INVITE_GAME_MODE = 0x5E44065D,
        NETWORK_HAS_STRICT_NAT = 0x2704460E,
        NETWORK_HAVE_ACCEPTED_INVITE = 0xBC86FA7,
        NETWORK_HAVE_ONLINE_PRIVILEGES = 0x4B907716,
        NETWORK_HAVE_SUMMONS = 0x48726B45,
        NETWORK_HOST_GAME = 0x5BEA05E2,
        NETWORK_HOST_GAME_CNC = 0x26CF21AF,
        NETWORK_HOST_GAME_E1 = 0x5BEA05E2,
        NETWORK_HOST_GAME_PENDING = 0x391E4575,
        NETWORK_HOST_GAME_SUCCEEDED = 0x1CA77E94,
        NETWORK_HOST_RENDEZVOUS = 0x48032420,
        NETWORK_HOST_RENDEZVOUS_E1 = 0x48032420,
        NETWORK_INVITE_FRIEND = 0x62B15CD7,
        NETWORK_IS_BEING_KICKED = 0x52364369,
        NETWORK_IS_COMMON_EPISODE = 0x26094A53,
        NETWORK_IS_DATA_MODDED = 0x2F76C16,
        NETWORK_IS_FIND_RESULT_UPDATED = 0x7ED34379,
        NETWORK_IS_FIND_RESULT_VALID = 0x51DF00D8,
        NETWORK_IS_FRIEND_IN_SAME_TITLE = 0x4B5C4957,
        NETWORK_IS_FRIEND_ONLINE = 0x4783029,
        NETWORK_IS_GAME_RANKED = 0x50C72493,
        NETWORK_IS_INVITEE_ONLINE = 0x772B01CC,
        NETWORK_IS_LINK_CONNECTED = 0x14332DE0,
        NETWORK_IS_NETWORK_AVAILABLE = 0x4E11812,
        NETWORK_IS_OPERATION_PENDING = 0x71AE456A,
        NETWORK_IS_PLAYER_BLOCKED_BY_ME = 0x23B76F88,
        NETWORK_IS_PLAYER_MUTED_BY_ME = 0x120962E7,
        NETWORK_IS_PLAYER_TALKING = 0x544625D9,
        NETWORK_IS_PLAYER_TYPING = 0x5AE1245E,
        NETWORK_IS_RENDEZVOUS = 0x60560DAE,
        NETWORK_IS_RENDEZVOUS_HOST = 0x6EB3047F,
        NETWORK_IS_ROCKSTART_SESSION_ID_VALID = 0x6C434E0B,
        NETWORK_IS_SESSION_ADVERTISE = 0x1B6716B8,
        NETWORK_IS_SESSION_ADVERTISED = 0x4A0791A1,
        NETWORK_IS_SESSION_INVITABLE = 0x4A8245F1,
        NETWORK_IS_SESSION_STARTED = 0x65B83AFB,
        NETWORK_IS_TVT = 0x73D87A5F,
        NETWORK_JOIN_GAME = 0x60806A0C,
        NETWORK_JOIN_GAME_CNC = 0x358F40E9,
        NETWORK_JOIN_GAME_PENDING = 0x76C53927,
        NETWORK_JOIN_GAME_SUCCEEDED = 0x59F24327,
        NETWORK_JOIN_SUMMONS = 0x360751AE,
        NETWORK_KICK_PLAYER = 0x7E8C1C45,
        NETWORK_LEAVE_GAME = 0x55D66E24,
        NETWORK_LEAVE_GAME_PENDING = 0x497E6745,
        NETWORK_LIMIT_TO_16_PLAYERS = 0xA1D6E36,
        NETWORK_PLAYER_HAS_COMM_PRIVS = 0x2854024A,
        NETWORK_PLAYER_HAS_DIED_RECENTLY = 0x75CD1A28,
        NETWORK_PLAYER_HAS_HEADSET = 0x408E2F70,
        NETWORK_PLAYER_HAS_KEYBOARD = 0x4FE5C34,
        NETWORK_RESTORE_GAME_CONFIG = 0x1E1B5C26,
        NETWORK_RESULT_MATCHES_SEARCH_CRITERIA = 0x767F1E44,
        NETWORK_RETURN_TO_RENDEZVOUS = 0x31EC6,
        NETWORK_RETURN_TO_RENDEZVOUS_PENDING = 0x6A66149A,
        NETWORK_RETURN_TO_RENDEZVOUS_SUCCEEDED = 0x208F671C,
        NETWORK_SEND_TEXT_CHAT = 0x18C67E6D,
        NETWORK_SET_FRIENDLY_FIRE_OPTION = 0x5AC43965,
        NETWORK_SET_HEALTH_RETICULE_OPTION = 0x3998154E,
        NETWORK_SET_LAN_SESSION = 0x6FDA43A3,
        NETWORK_SET_LOCAL_PLAYER_CAN_TALK = 0x4CC379D0,
        NETWORK_SET_LOCAL_PLAYER_IS_TYPING = 0x141D24A6,
        NETWORK_SET_MATCH_PROGRESS = 0x5C8D66EA,
        NETWORK_SET_PLAYER_MUTED = 0xB1562DF,
        NETWORK_SET_SCRIPT_LOBBY_STATE = 0x17767D95,
        NETWORK_SET_SERVER_NAME = 0x580E1C3D,
        NETWORK_SET_SESSION_INVITABLE = 0x5FB15E81,
        NETWORK_SET_TALKER_FOCUS = 0x753714F8,
        NETWORK_SET_TALKER_PROXIMITY = 0x2F542797,
        NETWORK_SET_TEAM_ONLY_CHAT = 0x31492174,
        NETWORK_SET_TEXT_CHAT_RECIPIENTS = 0x3A2246BB,
        NETWORK_SHOW_FRIEND_PROFILE_UI = 0x696021E6,
        NETWORK_SHOW_MET_PLAYER_FEEDBACK_UI = 0x2CD73270,
        NETWORK_SHOW_MET_PLAYER_PROFILE_UI = 0x1B183AFE,
        NETWORK_SHOW_PLAYER_FEEDBACK_UI = 0x6FC54C6B,
        NETWORK_SHOW_PLAYER_PROFILE_UI = 0x6F2A5430,
        NETWORK_START_EXTENDED_SEARCH = 0x7FD3C35,
        NETWORK_START_SESSION = 0x58802CE5,
        NETWORK_START_SESSION_PENDING = 0x7F853FF4,
        NETWORK_START_SESSION_SUCCEEDED = 0x5873667B,
        NETWORK_STORE_GAME_CONFIG = 0x30D373DF,
        NETWORK_STORE_SINGLE_PLAYER_GAME = 0x8181609,
        NETWORK_STRING_VERIFY_PENDING = 0x44AA32A7,
        NETWORK_STRING_VERIFY_SUCCEEDED = 0x3F1D4677,
        NETWORK_VERIFY_USER_STRING = 0x59884407,
        NEW_MOBILE_PHONE_CALL = 0x720E7EA6,
        NEW_SCRIPTED_CONVERSATION = 0x6C213305,
        OBFUSCATE_INT = 0x31A219FA,
        OBFUSCATE_INT_ARRAY = 0x3EF15B6A,
        OBFUSCATE_STRING = 0x4F12617,
        ON_FIRE_SCREAM = 0x6BE062DF,
        OPEN_CAR_DOOR = 0x1E352CEF,
        OPEN_DEBUG_FILE = 0x7A2B266D,
        OPEN_GARAGE = 0x5086785F,
        OPEN_SEQUENCE_TASK = 0x14A67125,
        OVERRIDE_FREEZE_FLAGS = 0x710E6D16,
        OVERRIDE_NEXT_RESTART = 0x27636B69,
        OVERRIDE_NUMBER_OF_PARKED_CARS = 0x7F483739,
        PANIC_SCREAM = 0x4F8B4507,
        PAUSE_GAME = 0x7FB41425,
        PAUSE_PLAYBACK_RECORDED_CAR = 0x24256EFB,
        PAUSE_SCRIPTED_CONVERSATION = 0x2A491A70,
        PED_QUEUE_CONSIDER_PEDS_WITH_FLAG_FALSE = 0x555213B4,
        PED_QUEUE_CONSIDER_PEDS_WITH_FLAG_TRUE = 0x489C3A48,
        PED_QUEUE_REJECT_PEDS_WITH_FLAG_FALSE = 0x61A812F5,
        PED_QUEUE_REJECT_PEDS_WITH_FLAG_TRUE = 0x79E5237B,
        PICKUPS_PASS_TIME = 0x59DA4975,
        PICK_RANDOM_WEATHER = 0x46A71949,
        PLACE_OBJECT_RELATIVE_TO_CAR = 0x21DE7496,
        PLANE_STARTS_IN_AIR = 0xE1645CD,
        PLAYER_HAS_CHAR = 0x22545844,
        PLAYER_HAS_FLASHING_STARS_ABOUT_TO_DROP = 0x69804B35,
        PLAYER_HAS_FLASHING_STAR_AFTER_OFFENCE = 0x70F287A,
        PLAYER_HAS_GREYED_OUT_STARS = 0x2B670CD0,
        PLAYER_IS_INTERACTING_WITH_GARAGE = 0x2B446480,
        PLAYER_IS_NEAR_FIRST_PIGEON = 0x6D631CED,
        PLAYER_IS_PISSED_OFF = 0x7FA21A1E,
        PLAYER_WANTS_TO_JOIN_NETWORK_GAME = 0x7D99343C,
        PLAYSTATS_CHEAT = 0xF9B3A1C,
        PLAYSTATS_FLOAT = 0x6B735ED,
        PLAYSTATS_INT = 0x41FA2D0C,
        PLAYSTATS_INT_FLOAT = 0x511200C7,
        PLAYSTATS_INT_INT = 0x7F35BFE,
        PLAYSTATS_MISSION_CANCELLED = 0x60D94FA7,
        PLAYSTATS_MISSION_FAILED = 0x50BB02F7,
        PLAYSTATS_MISSION_PASSED = 0x437D3E19,
        PLAYSTATS_MISSION_STARTED = 0x26747EBE,
        PLAY_AUDIO_EVENT = 0x486F3D93,
        PLAY_AUDIO_EVENT_FROM_OBJECT = 0x4BB9178A,
        PLAY_AUDIO_EVENT_FROM_PED = 0x61064783,
        PLAY_AUDIO_EVENT_FROM_VEHICLE = 0x2F4B2A8B,
        PLAY_CAR_ANIM = 0x3EE5F1C,
        PLAY_FIRE_SOUND_FROM_POSITION = 0x4B6135E8,
        PLAY_MOVIE = 0x3CD60F11,
        PLAY_OBJECT_ANIM = 0x5D3241E4,
        PLAY_SCRIPTED_CONVERSATION_FRONTEND = 0x1B1E5A,
        PLAY_SOUND = 0x47CA7C53,
        PLAY_SOUND_FROM_OBJECT = 0x60AE0867,
        PLAY_SOUND_FROM_PED = 0x56F37A81,
        PLAY_SOUND_FROM_POSITION = 0x65752C65,
        PLAY_SOUND_FROM_VEHICLE = 0x763274B7,
        PLAY_SOUND_FRONTEND = 0x4DAF2C87,
        PLAY_STREAM_FROM_OBJECT = 0x4AA86394,
        PLAY_STREAM_FROM_PED = 0xC47057F,
        PLAY_STREAM_FRONTEND = 0x133C257F,
        POINT_CAM_AT_CAM = 0x44717CF9,
        POINT_CAM_AT_COORD = 0x4496175C,
        POINT_CAM_AT_OBJECT = 0x5E627D20,
        POINT_CAM_AT_PED = 0x495B0B6F,
        POINT_CAM_AT_VEHICLE = 0x69F02BA0,
        POINT_FIXED_CAM = 0x4FF3F49,
        POINT_FIXED_CAM_AT_OBJ = 0x2326335,
        POINT_FIXED_CAM_AT_PED = 0x3D3B5D94,
        POINT_FIXED_CAM_AT_POS = 0x6D4E2A4A,
        POINT_FIXED_CAM_AT_VEHICLE = 0x52FF28DF,
        POPULATE_NOW = 0x7E3A7E2A,
        POP_CAR_BOOT = 0x3C78449F,
        POW = 0x5ADD1F46,
        PRELOAD_STREAM = 0x39DE515D,
        PRELOAD_STREAM_WITH_START_OFFSET = 0x2B8836A6,
        PREVIEW_RINGTONE = 0x79660015,
        PRINT = 0xA491CFF,
        PRINTFLOAT = 0x2F206763,
        PRINTFLOAT2 = 0x108A527F,
        PRINTINT = 0x20421014,
        PRINTINT2 = 0x49B35C2D,
        PRINTNL = 0x4013147B,
        PRINTSTRING = 0x616F492C,
        PRINTVECTOR = 0x61965EB3,
        PRINT_BIG = 0x2C8A5404,
        PRINT_BIG_Q = 0x2B2E39BB,
        PRINT_HELP = 0x71076BBA,
        PRINT_HELP_FOREVER = 0x43F7517D,
        PRINT_HELP_FOREVER_WITH_NUMBER = 0x19836A5B,
        PRINT_HELP_FOREVER_WITH_STRING = 0x36D60616,
        PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND = 0x55687797,
        PRINT_HELP_FOREVER_WITH_TWO_NUMBERS = 0x795227EE,
        PRINT_HELP_OVER_FRONTEND = 0x1C334022,
        PRINT_HELP_WITH_NUMBER = 0x4475789E,
        PRINT_HELP_WITH_STRING = 0x521035AA,
        PRINT_HELP_WITH_STRING_NO_SOUND = 0x15734852,
        PRINT_HELP_WITH_TWO_NUMBERS = 0x76D157A,
        PRINT_MISSION_DESCRIPTION = 0x65712730,
        PRINT_NOW = 0x73B01573,
        PRINT_STRING_IN_STRING = 0x4DAA221F,
        PRINT_STRING_IN_STRING_NOW = 0x2BB65467,
        PRINT_STRING_WITH_LITERAL_STRING = 0x3F89280B,
        PRINT_STRING_WITH_LITERAL_STRING_NOW = 0xCA539D6,
        PRINT_STRING_WITH_SUBSTRING_GIVEN_HASH_KEY_NOW = 0xFD3647,
        PRINT_STRING_WITH_TWO_LITERAL_STRINGS = 0x19486759,
        PRINT_STRING_WITH_TWO_LITERAL_STRINGS_NOW = 0x7DE7708E,
        PRINT_WITH_2_NUMBERS = 0x230A740F,
        PRINT_WITH_2_NUMBERS_BIG = 0x43197215,
        PRINT_WITH_2_NUMBERS_NOW = 0x5D251D72,
        PRINT_WITH_3_NUMBERS = 0x5FE61572,
        PRINT_WITH_3_NUMBERS_NOW = 0x1A4D0C60,
        PRINT_WITH_4_NUMBERS = 0x4D4F65AE,
        PRINT_WITH_4_NUMBERS_NOW = 0x5CCD150B,
        PRINT_WITH_5_NUMBERS = 0x2CC356D0,
        PRINT_WITH_5_NUMBERS_NOW = 0x5EC2479B,
        PRINT_WITH_6_NUMBERS = 0x3A01F39,
        PRINT_WITH_6_NUMBERS_NOW = 0x156E12CA,
        PRINT_WITH_NUMBER = 0x76A63B4C,
        PRINT_WITH_NUMBER_BIG = 0x49850843,
        PRINT_WITH_NUMBER_NOW = 0x3BDA562E,
        PRIORITIZE_STREAMING_REQUEST = 0x1DD926BA,
        PROCESS_MISSION_DELETION_LIST = 0x33565078,
        PROPAGATE_CAM_TO_NET_PLAYER = 0xFA5AC4AB,
        PROSTITUTE_CAM_ACTIVATE = 0x346D76E8,
        READ_KILL_FRENZY_STATUS = 0x3F9F0CF5,
        READ_LOBBY_PREFERENCE = 0x177A3DA4,
        REGISTER_BEST_POSITION = 0xC051FE2,
        REGISTER_CLIENT_BROADCAST_VARIABLES = 0x499B6DB6,
        REGISTER_FASTEST_TIME = 0xF7522ED,
        REGISTER_FLOAT_STAT = 0x347E05F3,
        REGISTER_HATED_TARGETS_AROUND_PED = 0x70A62140,
        REGISTER_HATED_TARGETS_IN_AREA = 0x619E7657,
        REGISTER_HOST_BROADCAST_VARIABLES = 0x18DB4CAF,
        REGISTER_INT_STAT = 0x609D07DB,
        REGISTER_KILL_IN_MULTIPLAYER_GAME = 0x7D6D0A6C,
        REGISTER_MISSION_GIVEN = 0x4F237F7B,
        REGISTER_MISSION_PASSED = 0x5FBE5F52,
        REGISTER_MOD = 0x327866F6,
        REGISTER_MODEL_FOR_RANK_POINTS = 0x39E61536,
        REGISTER_MULTIPLAYER_GAME_WIN = 0x43E41D81,
        REGISTER_NETWORK_BEST_GAME_SCORES = 0x4ADB10A4,
        REGISTER_ODDJOB_MISSION_PASSED = 0x1B0963AF,
        REGISTER_PLAYER_RESPAWN_COORDS = 0x1954A2,
        REGISTER_SAVE_HOUSE = 0x7DF45001,
        REGISTER_SCRIPT_WITH_AUDIO = 0x5B4452F3,
        REGISTER_STRING_FOR_FRONTEND_STAT = 0x3C295451,
        REGISTER_TARGET = 0x5F456B53,
        REGISTER_TRACK_NUMBER = 0x519B3104,
        REGISTER_TRACK_NUMBER_EFLC = 0x4D7E12A7,
        REGISTER_WORLD_POINT_SCRIPT_BRAIN = 0x32563E09,
        RELEASE_ENTITY_FROM_ROPE_FOR_OBJECT = 0x7A575AC9,
        RELEASE_MOVIE = 0x55C84CB7,
        RELEASE_PATH_NODES = 0x2CE231DC,
        RELEASE_SCRIPT_CONTROLLED_MICROPHONE = 0x2F907FF2,
        RELEASE_SOUND_ID = 0x211D390A,
        RELEASE_TEXTURE = 0x58524B04,
        RELEASE_TIME_OF_DAY = 0x2AD2206E,
        RELEASE_TWO_PLAYER_DISTANCE = 0x6423636D,
        RELEASE_WEATHER = 0x3A115D9D,
        RELOAD_WEB_PAGE = 0x565B0C3E,
        REMOVE_ADDITIONAL_POPULATION_MODEL = 0x602112FC,
        REMOVE_ALL_CHAR_WEAPONS = 0x6BA520F0,
        REMOVE_ALL_INACTIVE_GROUPS_FROM_CLEANUP_LIST = 0x622E3D34,
        REMOVE_ALL_NETWORK_RESTART_POINTS = 0x3FC034EB,
        REMOVE_ALL_PICKUPS_OF_TYPE = 0x3622640,
        REMOVE_ALL_SCRIPT_FIRES = 0x488CBB60,
        REMOVE_ANIMS = 0x55E00E7E,
        REMOVE_BLIP = 0x7BBF3625,
        REMOVE_BLIP_AND_CLEAR_INDEX = 0x66385B6C,
        REMOVE_CARS_FROM_GENERATORS_IN_AREA = 0x2BEE5F97,
        REMOVE_CAR_RECORDING = 0x484964FE,
        REMOVE_CAR_WINDOW = 0x38A7526,
        REMOVE_CHAR_DEFENSIVE_AREA = 0x2BC44D7D,
        REMOVE_CHAR_ELEGANTLY = 0x5731084A,
        REMOVE_CHAR_FROM_CAR_MAINTAIN_POSITION = 0x3DA4533F,
        REMOVE_CHAR_FROM_GROUP = 0x649316B7,
        REMOVE_CLOSE_MIC_PED = 0x72B73FBA,
        REMOVE_COVER_POINT = 0x4371502A,
        REMOVE_DECISION_MAKER = 0x47147EC5,
        REMOVE_FAKE_NETWORK_NAME_FROM_PED = 0x37A86FBD,
        REMOVE_GROUP = 0x250C2D39,
        REMOVE_IPL = 0x787F38B5,
        REMOVE_IPL_DISCREETLY = 0x658F21AF,
        REMOVE_NAVMESH_REQUIRED_REGION = 0x772660D7,
        REMOVE_PED_HELMET = 0x15F033A6,
        REMOVE_PED_QUEUE = 0x2FB410E4,
        REMOVE_PICKUP = 0x2119007F,
        REMOVE_PLAYER_HELMET = 0x5CF1303D,
        REMOVE_PROJTEX_FROM_OBJECT = 0x7330132C,
        REMOVE_PROJTEX_IN_RANGE = 0x170F0D58,
        REMOVE_PTFX = 0x4AF643D5,
        REMOVE_PTFX_FROM_OBJECT = 0x4D7775BA,
        REMOVE_PTFX_FROM_PED = 0x2FC9782A,
        REMOVE_PTFX_FROM_VEHICLE = 0x3FB14EC5,
        REMOVE_RC_BUGGY = 0x48BC2249,
        REMOVE_SCRIPT_FIRE = 0xE633C13,
        REMOVE_SCRIPT_MIC = 0x4307784F,
        REMOVE_SPHERE = 0x12A909C9,
        REMOVE_STUCK_CAR_CHECK = 0x213308DB,
        REMOVE_TEMPORARY_RADAR_BLIPS_FOR_PICKUPS = 0x6F797AF3,
        REMOVE_TXD = 0x44C27071,
        REMOVE_UPSIDEDOWN_CAR_CHECK = 0x6A1244E9,
        REMOVE_USER_3D_MARKER = 0xC607EB8,
        REMOVE_WEAPON_FROM_CHAR = 0x2485231E,
        RENDER_LOADING_CLOCK = 0xCD70514,
        RENDER_RACE_TRACK = 0x5062055B,
        RENDER_RADIOHUD_SPRITE_IN_LOBBY = 0x11887D84,
        RENDER_RADIOHUD_SPRITE_IN_MOBILE_PHONE = 0x704D5747,
        RENDER_WEAPON_PICKUPS_BIGGER = 0x3B6B13,
        REPORT_CRIME = 0x76B4C7C,
        REPORT_DISPATCH = 0x388D6B44,
        REPORT_POLICE_SPOTTING_SUSPECT = 0x7D97F81,
        REPORT_SUSPECT_ARRESTED = 0x8932D3,
        REPORT_SUSPECT_DOWN = 0x6A660231,
        REPORT_TAGGED_RADIO_TRACK = 0xED8621F,
        REQUEST_ADDITIONAL_TEXT = 0x6A9F01AF,
        REQUEST_ALL_SLODS_IN_WORLD = 0x39264921,
        REQUEST_AMBIENT_AUDIO_BANK = 0x754E1999,
        REQUEST_ANIMS = 0x65F874DE,
        REQUEST_CAR_RECORDING = 0x41D045B,
        REQUEST_COLLISION_AT_POSN = 0x12ED0BC9,
        REQUEST_COLLISION_FOR_MODEL = 0x66E93537,
        REQUEST_CONTROL_OF_NETWORK_ID = 0x29926B20,
        REQUEST_INTERIOR_MODELS = 0x302E113D,
        REQUEST_IPL = 0x59FD4E83,
        REQUEST_MISSION_AUDIO_BANK = 0x335E603B,
        REQUEST_MODEL = 0x502B5185,
        REQUEST_SCRIPT = 0x6FFE0DFD,
        REQUEST_STREAMED_TXD = 0x7C7B1237,
        RESERVE_NETWORK_MISSION_OBJECTS = 0x720A4D47,
        RESERVE_NETWORK_MISSION_OBJECTS_FOR_HOST = 0x2F7508E7,
        RESERVE_NETWORK_MISSION_PEDS = 0x4B2F6DDC,
        RESERVE_NETWORK_MISSION_PEDS_FOR_HOST = 0x557C7C4A,
        RESERVE_NETWORK_MISSION_VEHICLES = 0x15652DC1,
        RESERVE_NETWORK_MISSION_VEHICLES_FOR_HOST = 0x3E9C7CD3,
        RESET_ACHIEVEMENTS_AWARD = 0x11E22D1B,
        RESET_ARMOUR_PICKUP_NETWORK_REGEN_TIME = 0x5B4F27F9,
        RESET_CAM_INTERP_CUSTOM_SPEED_GRAPH = 0x779F3EC6,
        RESET_CAM_SPLINE_CUSTOM_SPEED_GRAPH = 0x13135C95,
        RESET_CAR_WHEELS = 0x78CE659D,
        RESET_CONSOLE_COMMAND = 0x26B6430B,
        RESET_HEALTH_PICKUP_NETWORK_REGEN_TIME = 0x8237C10,
        RESET_LATEST_CONSOLE_COMMAND = 0x6F94DB7,
        RESET_LOCAL_PLAYER_WEAPON_STAT = 0x6C1344C6,
        RESET_MONEY_PICKUP_NETWORK_REGEN_TIME = 0x12FB7D2A,
        RESET_NETWORK_RESTART_NODE_GROUP_MAPPING = 0x8C12FAE,
        RESET_NO_LAW_VEHICLES_DESTROYED_BY_LOCAL_PLAYER = 0x63615A6D,
        RESET_NUM_OF_MODELS_KILLED_BY_PLAYER = 0xFB17679,
        RESET_STUCK_TIMER = 0x73260714,
        RESET_VISIBLE_PED_DAMAGE = 0x2A7247EF,
        RESET_WEAPON_PICKUP_NETWORK_REGEN_TIME = 0x5F3459B2,
        RESTART_SCRIPTED_CONVERSATION = 0x43A67F1B,
        RESTORE_SCRIPT_ARRAY_FROM_SCRATCHPAD = 0x522B182B,
        RESTORE_SCRIPT_VALUES_FOR_NETWORK_GAME = 0x37CD55AA,
        RESTRICT_CHAR_PROPS = 0x46E6A215,
        RESURRECT_NETWORK_PLAYER = 0x17901684,
        RETUNE_RADIO_DOWN = 0xE843CEA,
        RETUNE_RADIO_TO_STATION_INDEX = 0x48ED6432,
        RETUNE_RADIO_TO_STATION_NAME = 0x58BA4401,
        RETUNE_RADIO_UP = 0x6B1C6027,
        RETURN_CONTROL_OF_NETWORK_ID_TO_SERVER = 0x83013662,
        REVIVE_INJURED_PED = 0x54EB576A,
        ROTATE_OBJECT = 0x12B524B7,
        ROUND = 0x7CA5476A,
        SAVE_FLOAT_TO_DEBUG_FILE = 0x66317064,
        SAVE_INT_TO_DEBUG_FILE = 0x65EF0CB8,
        SAVE_NEWLINE_TO_DEBUG_FILE = 0x69D90F11,
        SAVE_SCRIPT_ARRAY_IN_SCRATCHPAD = 0x331F7E6F,
        SAVE_SETTINGS = 0x584C3830,
        SAVE_STRING_TO_DEBUG_FILE = 0x27FA32D4,
        SAY_AMBIENT_SPEECH = 0x5CF149C8,
        SAY_AMBIENT_SPEECH_WITH_VOICE = 0x2FA55669,
        SCRIPT_ASSERT = 0x10C75BDA,
        SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN = 0x4804149,
        SCRIPT_IS_USING_MOBILE_PHONE = 0x1B0741BA,
        SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_FALSE = 0x2A860E89,
        SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_TRUE = 0x20EC5B84,
        SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_FALSE = 0xA0444B3,
        SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_TRUE = 0x27211B1A,
        SECUROM_SPOT_CHECK1 = 0x63576E53,
        SECUROM_SPOT_CHECK2 = 0x1F40505C,
        SECUROM_SPOT_CHECK3 = 0x5D1C0A6A,
        SECUROM_SPOT_CHECK4 = 0x764236CE,
        SELECT_WEAPONS_FOR_VEHICLE = 0x7AD71A55,
        SEND_CLIENT_BROADCAST_VARIABLES_NOW = 0x36B40989,
        SEND_HOST_BROADCAST_VARIABLES_NOW = 0xE4741E1,
        SEND_NM_MESSAGE = 0x75AC2519,
        SETTIMERA = 0x32501B1E,
        SETTIMERB = 0x3B4C2E2E,
        SETTIMERC = 0x499852DB,
        SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN = 0x378531F8,
        SET_ADVANCED_BOOL_IN_DECISION_MAKER = 0x709D2036,
        SET_ALLOW_DUMMY_CONVERSIONS = 0x8AB2787,
        SET_ALL_CARS_CAN_BE_DAMAGED = 0x3EA5269D,
        SET_ALL_CAR_GENERATORS_BACK_TO_ACTIVE = 0x399E1A43,
        SET_ALL_MOTION_CONTROL_PREFERENCES_ON_OFF = 0x00000000,
        SET_ALL_PEDS_SPAWNED_ARE_COPS = 0x632630C5,
        SET_ALL_PICKUPS_OF_TYPE_COLLECTABLE_BY_CAR = 0x54B054D0,
        SET_ALL_RANDOM_PEDS_FLEE = 0x110957EF,
        SET_ALL_TAXIS_HAVE_NITRO = 0xE3ED03E6,
        SET_ALTERNATIVE_HEAD_FOR_PED_QUEUE = 0x5B814784,
        SET_ALWAYS_DISPLAY_WEAPON_PICKUP_MESSAGE = 0x3F0A2A72,
        SET_AMBIENT_PLANES_SPEED_MULTIPLIER = 0x4B470947,
        SET_AMBIENT_VOICE_NAME = 0x426A4ED8,
        SET_AMMO_IN_CLIP = 0x6E1A0A84,
        SET_ANIM_GROUP_FOR_CHAR = 0x4CD43E46,
        SET_AREA_NAME = 0x3C3879C6,
        SET_ARMOUR_PICKUP_NETWORK_REGEN_TIME = 0x53CC1D3C,
        SET_BIKE_RIDER_WILL_PUT_FOOT_DOWN_WHEN_STOPPED = 0x6E77153D,
        SET_BIT = 0x39551B76,
        SET_BITS_IN_RANGE = 0x14DD5F87,
        SET_BLIP_AS_FRIENDLY = 0x580462A,
        SET_BLIP_AS_SHORT_RANGE = 0x2ED90276,
        SET_BLIP_COORDINATES = 0x3D91564E,
        SET_BLIP_MARKER_LONG_DISTANCE = 0x150A6532,
        SET_BLIP_THROTTLE_RANDOMLY = 0x12A619E9,
        SET_BLOCKING_OF_NON_TEMPORARY_EVENTS = 0x76247429,
        SET_BLOCK_CAMERA_TOGGLE = 0x45C63B22,
        SET_BRIANS_MOOD = 0x34F128F9,
        SET_CAMERA_AUTO_SCRIPT_ACTIVATION = 0x31D53B3D,
        SET_CAMERA_BEGIN_CAM_COMMANDS_REQUIRED = 0x3B12ED0,
        SET_CAMERA_CONTROLS_DISABLED_WITH_PLAYER_CONTROLS = 0x3C714F12,
        SET_CAMERA_STATE = 0x14702FDF,
        SET_CAM_ACTIVE = 0x43E42686,
        SET_CAM_ATTACH_OFFSET = 0x72E93E13,
        SET_CAM_ATTACH_OFFSET_IS_RELATIVE = 0x44984033,
        SET_CAM_BEHIND_PED = 0x48740598,
        SET_CAM_COMPONENT_SHAKE = 0x52CE5D9F,
        SET_CAM_DOF_FOCUSPOINT = 0x39DC5AEB,
        SET_CAM_FAR_CLIP = 0x181F6B00,
        SET_CAM_FAR_DOF = 0x52F543A3,
        SET_CAM_FOV = 0x55D470C2,
        SET_CAM_INHERIT_ROLL_OBJECT = 0x208B4A6A,
        SET_CAM_INHERIT_ROLL_PED = 0x9A34209,
        SET_CAM_INHERIT_ROLL_VEHICLE = 0x51AD2993,
        SET_CAM_INTERP_CUSTOM_SPEED_GRAPH = 0x3102FEE,
        SET_CAM_INTERP_DETAIL_ROT_STYLE_ANGLES = 0x5F7307F4,
        SET_CAM_INTERP_DETAIL_ROT_STYLE_QUATS = 0x439C47D5,
        SET_CAM_INTERP_STYLE_CORE = 0x72297CDC,
        SET_CAM_INTERP_STYLE_DETAILED = 0x683927F5,
        SET_CAM_IN_FRONT_OF_PED = 0x423661A7,
        SET_CAM_MOTION_BLUR = 0x693D7B21,
        SET_CAM_NAME = 0x2AE87B02,
        SET_CAM_NEAR_CLIP = 0x298827FC,
        SET_CAM_NEAR_DOF = 0x60AD2FE0,
        SET_CAM_POINT_DAMPING_PARAMS = 0x57AC39F5,
        SET_CAM_POINT_OFFSET = 0x1C887939,
        SET_CAM_POINT_OFFSET_IS_RELATIVE = 0x12F20552,
        SET_CAM_POS = 0x152F6314,
        SET_CAM_PROPAGATE = 0x44414E60,
        SET_CAM_ROLL = 0x4C5142C0,
        SET_CAM_ROT = 0x746744D1,
        SET_CAM_SHAKE = 0x686B6395,
        SET_CAM_SPLINE_CUSTOM_SPEED_GRAPH = 0x391B5A76,
        SET_CAM_SPLINE_DURATION = 0x4ADB6F79,
        SET_CAM_SPLINE_PROGRESS = 0x5A712F63,
        SET_CAM_SPLINE_SPEED_CONSTANT = 0x2CF72EB7,
        SET_CAM_SPLINE_SPEED_GRAPH = 0x47AC289C,
        SET_CAM_STATE = 0x14702FDF,
        SET_CAM_TARGET_PED = 0x50E21E4C,
        SET_CAN_BURST_CAR_TYRES = 0x24DE2039,
        SET_CAN_RESPRAY_CAR = 0x76A2739D,
        SET_CAN_TARGET_CHAR_WITHOUT_LOS = 0x3FA651A7,
        SET_CAR_ALLOWED_TO_DROWN = 0x31026CE0,
        SET_CAR_ALWAYS_CREATE_SKIDS = 0xB9F0356,
        SET_CAR_ANIM_CURRENT_TIME = 0x4485574,
        SET_CAR_ANIM_SPEED = 0x74CD7D1F,
        SET_CAR_AS_MISSION_CAR = 0x210A33B2,
        SET_CAR_CAN_BE_DAMAGED = 0x394E733E,
        SET_CAR_CAN_BE_VISIBLY_DAMAGED = 0x4727446B,
        SET_CAR_CAN_GO_AGAINST_TRAFFIC = 0xFF41401,
        SET_CAR_COLLISION = 0x6A9033B3,
        SET_CAR_COLOUR_COMBINATION = 0xB823C8D,
        SET_CAR_COORDINATES = 0x567B6C56,
        SET_CAR_COORDINATES_NO_OFFSET = 0x12D64378,
        SET_CAR_DENSITY_MULTIPLIER = 0xAA73A12,
        SET_CAR_DISTANCE_AHEAD_MULTIPLIER = 0x71B6690,
        SET_CAR_DOOR_LATCHED = 0xEAD6CFB,
        SET_CAR_ENGINE_ON = 0xCAA42D0,
        SET_CAR_EXISTS_ON_ALL_MACHINES = 0x7BAC73DF,
        SET_CAR_FORWARD_SPEED = 0x65BB0060,
        SET_CAR_FOV_FADE_MULT = 0x5EEE6ADB,
        SET_CAR_FOV_MAX = 0x3FBF13BD,
        SET_CAR_FOV_MIN = 0x68F59E3,
        SET_CAR_FOV_RATE = 0x536B4F4A,
        SET_CAR_FOV_START_SPEED = 0x3CF41D47,
        SET_CAR_FOV_START_SPEED_BOAT = 0x40FC5520,
        SET_CAR_GENERATORS_ACTIVE_IN_AREA = 0x69CE154F,
        SET_CAR_HAS_BEEN_CREATED_IN_INTERIOR = 0x71FE1C0A,
        SET_CAR_HEADING = 0x75E40528,
        SET_CAR_HEALTH = 0x49B6525C,
        SET_CAR_HEAVY = 0xD4DA017D,
        SET_CAR_HYDRAULICS = 0x4F0001F3,
        SET_CAR_IN_CUTSCENE = 0x32593711,
        SET_CAR_LANE_SHIFT = 0x10FD2442,
        SET_CAR_LIGHTS_ON = 0x22888C5A,
        SET_CAR_LIGHT_MULTIPLIER = 0x74824ADA,
        SET_CAR_LIVERY = 0x2E9E149D,
        SET_CAR_MOTION_BLUR_EFFECT_BOAT = 0x7D106167,
        SET_CAR_NOT_DAMAGED_BY_RELATIONSHIP_GROUP = 0x3AAD447A,
        SET_CAR_ONLY_DAMAGED_BY_PLAYER = 0x2880077C,
        SET_CAR_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP = 0x783F287A,
        SET_CAR_ON_GROUND_PROPERLY = 0xE717E98,
        SET_CAR_PROOFS = 0x137C35BA,
        SET_CAR_RANDOM_ROUTE_SEED = 0x19D302AE,
        SET_CAR_STAY_IN_FAST_LANE = 0x5EAD47E8,
        SET_CAR_STAY_IN_SLOW_LANE = 0x1B8B3973,
        SET_CAR_STOP_CLONING = 0x407371FF,
        SET_CAR_STRONG = 0x61F40670,
        SET_CAR_TRACTION = 0x278F2D0A,
        SET_CAR_VISIBLE = 0x2D13D06,
        SET_CAR_WATERTIGHT = 0x31017E6E,
        SET_CELLPHONE_RANKED = 0x47E03E87,
        SET_CHAR_ACCURACY = 0x1958471A,
        SET_CHAR_ALLOWED_TO_DUCK = 0x6E2E55B5,
        SET_CHAR_ALLOWED_TO_RUN_ON_BOATS = 0x662235A5,
        SET_CHAR_ALL_ANIMS_SPEED = 0x5BDB7E2C,
        SET_CHAR_AMMO = 0x437D247E,
        SET_CHAR_ANGLED_DEFENSIVE_AREA = 0xDBD5654,
        SET_CHAR_ANIM_BLEND_OUT_DELTA = 0xA1FCE,
        SET_CHAR_ANIM_CURRENT_TIME = 0x245F424F,
        SET_CHAR_ANIM_PLAYING_FLAG = 0x52DA430A,
        SET_CHAR_ANIM_SPEED = 0x3C2A3334,
        SET_CHAR_AS_ENEMY = 0x1C35407F,
        SET_CHAR_AS_MISSION_CHAR = 0x60EC0540,
        SET_CHAR_BLEEDING = 0x38330B4A,
        SET_CHAR_BULLETPROOF_VEST = 0x76A7E4E,
        SET_CHAR_CANT_BE_DRAGGED_OUT = 0x2E5C36C0,
        SET_CHAR_CAN_BE_KNOCKED_OFF_BIKE = 0x30C54CD2,
        SET_CHAR_CAN_BE_SHOT_IN_VEHICLE = 0x79912ADC,
        SET_CHAR_CAN_SMASH_GLASS = 0xF634F9D,
        SET_CHAR_CLIMB_ANIM_RATE = 0x68AB2DD9,
        SET_CHAR_COLLISION = 0x2A7413EB,
        SET_CHAR_COMPONENT_VARIATION = 0x71A52973,
        SET_CHAR_COORDINATES = 0x689D0F5F,
        SET_CHAR_COORDINATES_DONT_CLEAR_PLAYER_TASKS = 0x3458600C,
        SET_CHAR_COORDINATES_DONT_WARP_GANG = 0x624E5833,
        SET_CHAR_COORDINATES_DONT_WARP_GANG_NO_OFFSET = 0x355F3FEB,
        SET_CHAR_COORDINATES_NO_OFFSET = 0x57C758F0,
        SET_CHAR_CURRENT_WEAPON_VISIBLE = 0x6DAB7270,
        SET_CHAR_DECISION_MAKER = 0x1F8116C,
        SET_CHAR_DECISION_MAKER_TO_DEFAULT = 0x73CB1489,
        SET_CHAR_DEFAULT_COMPONENT_VARIATION = 0x4FB30DB6,
        SET_CHAR_DEFENSIVE_AREA_ATTACHED_TO_CAR = 0x7191562B,
        SET_CHAR_DEFENSIVE_AREA_ATTACHED_TO_PED = 0x51C00627,
        SET_CHAR_DESIRED_HEADING = 0x6EF64079,
        SET_CHAR_DIES_INSTANTLY_IN_WATER = 0xCCA5CFC,
        SET_CHAR_DROPS_WEAPONS_WHEN_DEAD = 0x2D43113A,
        SET_CHAR_DROWNS_IN_SINKING_VEHICLE = 0x1E805412,
        SET_CHAR_DROWNS_IN_WATER = 0xC2A7847,
        SET_CHAR_DRUGGED_UP = 0x458C333D,
        SET_CHAR_DUCKING = 0x64302F16,
        SET_CHAR_DUCKING_TIMED = 0x3A7647,
        SET_CHAR_FIRE_DAMAGE_MULTIPLIER = 0x29AE70A8,
        SET_CHAR_FORCE_DIE_IN_CAR = 0x54AF2F7A,
        SET_CHAR_GESTURE_GROUP = 0x1106579B,
        SET_CHAR_GET_OUT_UPSIDE_DOWN_CAR = 0x1AAF54BE,
        SET_CHAR_GRAVITY = 0x602C46E7,
        SET_CHAR_HAS_BEEN_CREATED_IN_INTERIOR = 0xD58BAA34,
        SET_CHAR_HEADING = 0x46B5523B,
        SET_CHAR_HEALTH = 0x575E2880,
        SET_CHAR_INVINCIBLE = 0x2A58578B,
        SET_CHAR_IN_CUTSCENE = 0x12850007,
        SET_CHAR_IS_TARGET_PRIORITY = 0x163A1D77,
        SET_CHAR_KEEP_TASK = 0x264009D3,
        SET_CHAR_MAX_HEALTH = 0x8A453C9,
        SET_CHAR_MAX_MOVE_BLEND_RATIO = 0x640E7764,
        SET_CHAR_MAX_TIME_IN_WATER = 0x45F32596,
        SET_CHAR_MAX_TIME_UNDERWATER = 0x7110790B,
        SET_CHAR_MELEE_ACTION_FLAG0 = 0x771F3D7D,
        SET_CHAR_MELEE_ACTION_FLAG1 = 0x2EF60AA6,
        SET_CHAR_MELEE_ACTION_FLAG2 = 0x265E37E1,
        SET_CHAR_MELEE_MOVEMENT_CONSTAINT_BOX = 0x5A7D2C3C,
        SET_CHAR_MONEY = 0x7B44224F,
        SET_CHAR_MOVEMENT_ANIMS_BLOCKED = 0x346B4FE7,
        SET_CHAR_MOVE_ANIM_SPEED_MULTIPLIER = 0x5DC456DE,
        SET_CHAR_NAME_DEBUG = 0x751967FD,
        SET_CHAR_NEVER_LEAVES_GROUP = 0xF4C513E,
        SET_CHAR_NEVER_TARGETTED = 0x5EA84115,
        SET_CHAR_NOT_DAMAGED_BY_RELATIONSHIP_GROUP = 0x77A0221,
        SET_CHAR_ONLY_DAMAGED_BY_PLAYER = 0x440D0A91,
        SET_CHAR_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP = 0x506C2898,
        SET_CHAR_PROOFS = 0x76F25B4B,
        SET_CHAR_PROP_INDEX = 0x5FE95249,
        SET_CHAR_PROP_INDEX_TEXTURE = 0x57390041,
        SET_CHAR_PROVIDE_COVERING_FIRE = 0x1A827B2C,
        SET_CHAR_RANDOM_COMPONENT_VARIATION = 0x47D9437C,
        SET_CHAR_READY_TO_BE_EXECUTED = 0x5F58606A,
        SET_CHAR_READY_TO_BE_STUNNED = 0x2B416A06,
        SET_CHAR_RELATIONSHIP = 0x6D9538E1,
        SET_CHAR_RELATIONSHIP_GROUP = 0x61822A3C,
        SET_CHAR_ROTATION = 0x70E13826,
        SET_CHAR_SHOOT_RATE = 0x2AE979DC,
        SET_CHAR_SIGNAL_AFTER_KILL = 0x6C6C1CF3,
        SET_CHAR_SPHERE_DEFENSIVE_AREA = 0x56AD2409,
        SET_CHAR_STAY_IN_CAR_WHEN_JACKED = 0x1A02748F,
        SET_CHAR_SUFFERS_CRITICAL_HITS = 0x154E450E,
        SET_CHAR_USES_DEAFULT_ANIM_GROUP_WHEN_FLEEING = 0xDD71BA9,
        SET_CHAR_USES_UPPERBODY_DAMAGE_ANIMS_ONLY = 0x268F1413,
        SET_CHAR_VELOCITY = 0x7C76803,
        SET_CHAR_VISIBLE = 0x4CF0105,
        SET_CHAR_WALK_ALONGSIDE_LEADER_WHEN_APPROPRIATE = 0x41121D51,
        SET_CHAR_WANTED_BY_POLICE = 0x5C619D7,
        SET_CHAR_WATCH_MELEE = 0x142A5E83,
        SET_CHAR_WEAPON_SKILL = 0x441B1EAF,
        SET_CHAR_WILL_COWER_INSTEAD_OF_FLEEING = 0x58FB0BC1,
        SET_CHAR_WILL_DO_DRIVEBYS = 0x2C9E0483,
        SET_CHAR_WILL_FLY_THROUGH_WINDSCREEN = 0x6FC75ABD,
        SET_CHAR_WILL_LEAVE_CAR_IN_COMBAT = 0x7CFC39CB,
        SET_CHAR_WILL_MOVE_WHEN_INJURED = 0x1EF36397,
        SET_CHAR_WILL_ONLY_FIRE_WITH_CLEAR_LOS = 0x4458184A,
        SET_CHAR_WILL_REMAIN_ON_BOAT_AFTER_MISSION_ENDS = 0x5E8D08CE,
        SET_CHAR_WILL_TRY_TO_LEAVE_BOAT_AFTER_LEADER = 0x62AB2AB4,
        SET_CHAR_WILL_TRY_TO_LEAVE_WATER = 0x1D1B6750,
        SET_CHAR_WILL_USE_CARS_IN_COMBAT = 0x2FD83FB5,
        SET_CHAR_WILL_USE_COVER = 0x5F2F1680,
        SET_CINEMATIC_BUTTON_ENABLED = 0xF13355A,
        SET_CLEAR_HELP_IN_MISSION_CLEANUP = 0x4371559F,
        SET_CLEAR_MANIFOLDS = 0x5B7A738C,
        SET_COLLECTABLE1_TOTAL = 0x79574B3B,
        SET_COLLIDE_WITH_PEDS = 0x5FDF1493,
        SET_COMBAT_DECISION_MAKER = 0x526B048C,
        SET_CONTENTS_OF_TEXT_WIDGET = 0x6B9C6127,
        SET_CONVERTIBLE_ROOF = 0x3A9A0869,
        SET_CREATE_RANDOM_COPS = 0x5C832C1F,
        SET_CREATE_RANDOM_GANG_MEMBERS = 0x3ADC6D2D,
        SET_CREDITS_TO_RENDER_BEFORE_FADE = 0x35FA026D,
        SET_CURRENT_CHAR_WEAPON = 0x6CF44DD6,
        SET_CURRENT_MOVIE = 0x5AF23F31,
        SET_CUTSCENE_EXTRA_ROOM_POS = 0x226A7227,
        SET_DANCE_SHAKE_ACTIVE_THIS_UPDATE = 0x1E880709,
        SET_DANCE_SHAKE_INACTIVE_IMMEDIATELY = 0x2DAE50C0,
        SET_DEAD_CHAR_COORDINATES = 0x68C57282,
        SET_DEAD_PEDS_DROP_WEAPONS = 0x2A5262C0,
        SET_DEATH_WEAPONS_PERSIST = 0x49F86791,
        SET_DEBUG_TEXT_VISIBLE = 0x39D87BD6,
        SET_DECISION_MAKER_ATTRIBUTE_CAN_CHANGE_TARGET = 0x51F54148,
        SET_DECISION_MAKER_ATTRIBUTE_CAUTION = 0x6BAC2781,
        SET_DECISION_MAKER_ATTRIBUTE_FIRE_RATE = 0x31FC3392,
        SET_DECISION_MAKER_ATTRIBUTE_LOW_HEALTH = 0x2FFA6C89,
        SET_DECISION_MAKER_ATTRIBUTE_MOVEMENT_STYLE = 0x273134E,
        SET_DECISION_MAKER_ATTRIBUTE_NAVIGATION_STYLE = 0x26A1722C,
        SET_DECISION_MAKER_ATTRIBUTE_RETREATING_BEHAVIOUR = 0x67890049,
        SET_DECISION_MAKER_ATTRIBUTE_SIGHT_RANGE = 0x2F444F95,
        SET_DECISION_MAKER_ATTRIBUTE_STANDING_STYLE = 0x7D767108,
        SET_DECISION_MAKER_ATTRIBUTE_TARGET_INJURED_REACTION = 0x7CAE2557,
        SET_DECISION_MAKER_ATTRIBUTE_TARGET_LOSS_RESPONSE = 0x65490A3D,
        SET_DECISION_MAKER_ATTRIBUTE_TEAMWORK = 0x7EAE7F2F,
        SET_DECISION_MAKER_ATTRIBUTE_WEAPON_ACCURACY = 0x21B8337F,
        SET_DEFAULT_GLOBAL_INSTANCE_PRIORITY = 0x58E835E4,
        SET_DEFAULT_TARGET_SCORING_FUNCTION = 0xB164EF2,
        SET_DISABLE_PLAYER_SHOVE_ANIMATION = 0x73F869CF,
        SET_DISPLAY_PLAYER_NAME_AND_ICON = 0x7370330,
        SET_DITCH_POLICE_MODELS = 0x25AC586E,
        SET_DONT_ACTIVATE_RAGDOLL_FROM_PLAYER_IMPACT = 0x5A676BCD,
        SET_DOOR_STATE = 0x7E3D3430,
        SET_DO_NOT_SPAWN_PARKED_CARS_ON_TOP = 0x7A93645C,
        SET_DRAW_PLAYER_COMPONENT = 0x3EFE3DC8,
        SET_DRIVE_TASK_CRUISE_SPEED = 0x499700EF,
        SET_DRUNK_CAM = 0x74B90C48,
        SET_ENABLE_NEAR_CLIP_SCAN = 0x35CC3267,
        SET_ENABLE_RC_DETONATE = 0x1FC96A99,
        SET_ENABLE_RC_DETONATE_ON_CONTACT = 0x7BD06E31,
        SET_ENGINE_HEALTH = 0x3F413561,
        SET_EVENT_PRECEDENCE = 0x40C54978,
        SET_EVERYONE_IGNORE_PLAYER = 0x59901B9,
        SET_EXTRA_CAR_COLOURS = 0x6CB14354,
        SET_EXTRA_HOSPITAL_RESTART_POINT = 0x4B6E368D,
        SET_EXTRA_POLICE_STATION_RESTART_POINT = 0x1C4E7A79,
        SET_FADE_IN_AFTER_LOAD = 0x5384065B,
        SET_FAKE_WANTED_CIRCLE = 0x3CEE0376,
        SET_FAKE_WANTED_LEVEL = 0x29D91F3D,
        SET_FILTER_MENU_ON = 0x18F43649,
        SET_FILTER_SAVE_SETTING = 0x47F971E8,
        SET_FIXED_CAM_POS = 0x511A3B01,
        SET_FLOAT_STAT = 0x5213511B,
        SET_FOLLOW_PED_PITCH_LIMIT_DOWN = 0x31DB4020,
        SET_FOLLOW_PED_PITCH_LIMIT_UP = 0x360E2977,
        SET_FOLLOW_VEHICLE_CAM_OFFSET = 0x56507469,
        SET_FOLLOW_VEHICLE_CAM_SUBMODE = 0x20BC708E,
        SET_FOLLOW_VEHICLE_PITCH_LIMIT_DOWN = 0x2F65CB2,
        SET_FOLLOW_VEHICLE_PITCH_LIMIT_UP = 0x5567728E,
        SET_FORCE_LOOK_BEHIND = 0x64961488,
        SET_FORCE_PLAYER_TO_ENTER_THROUGH_DIRECT_DOOR = 0x79B73666,
        SET_FOV_CHANNEL_SCRIPT = 0x68AB6E72,
        SET_FREEBIES_IN_VEHICLE = 0x25541DBE,
        SET_FREE_HEALTH_CARE = 0xAD880E,
        SET_FREE_RESPRAYS = 0x710A49,
        SET_GAME_CAMERA_CONTROLS_ACTIVE = 0x57952546,
        SET_GAME_CAM_HEADING = 0x45FB5CE1,
        SET_GAME_CAM_PITCH = 0x1BC772AC,
        SET_GANG_CAR = 0x3A8531E8,
        SET_GANG_WEAPONS = 0x53BFA346,
        SET_GARAGE_LEAVE_CAMERA_ALONE = 0x5BC10979,
        SET_GFWL_HAS_SAFE_HOUSE = 0x6136B6A,
        SET_GFWL_IS_RETURNING_TO_SINGLE_PLAYER = 0x755F292D,
        SET_GLOBAL_INSTANCE_PRIORITY = 0x573F5B48,
        SET_GLOBAL_RENDER_FLAGS = 0x4FE23851,
        SET_GPS_REMAINS_WHEN_TARGET_REACHED_FLAG = 0x4C9B749F,
        SET_GPS_TEST_IN_3D_FLAG = 0x28D17798,
        SET_GPS_VOICE_FOR_VEHICLE = 0x356876BF,
        SET_GRAVITY_OFF = 0x3CDA1A07,
        SET_GROUP_CHAR_DECISION_MAKER = 0x14166075,
        SET_GROUP_CHAR_DUCKS_WHEN_AIMED_AT = 0x5C8C7F9E,
        SET_GROUP_COMBAT_DECISION_MAKER = 0x58123F7A,
        SET_GROUP_DECISION_MAKER = 0xB7F9858F,
        SET_GROUP_DEFAULT_TASK_ALLOCATOR = 0x759F531F,
        SET_GROUP_FOLLOW_STATUS = 0x64B9757E,
        SET_GROUP_FORMATION = 0x6D05484F,
        SET_GROUP_FORMATION_SPACING = 0x69315157,
        SET_GROUP_LEADER = 0x4C85E23,
        SET_GROUP_MEMBER = 0x5E0F611E,
        SET_GROUP_SEPARATION_RANGE = 0x22DD329E,
        SET_GUNSHOT_SENSE_RANGE_FOR_RIOT2 = 0x1A081F78,
        SET_HAS_BEEN_OWNED_BY_PLAYER = 0x25750E4F,
        SET_HAS_BEEN_OWNED_FOR_CAR_GENERATOR = 0x60E335FA,
        SET_HEADING_FOR_ATTACHED_PLAYER = 0x6B247B9E,
        SET_HEADING_LIMIT_FOR_ATTACHED_PED = 0x15B07D4D,
        SET_HEADING_OF_CLOSEST_OBJECT_OF_TYPE = 0x7ABD4D4D,
        SET_HEALTH_PICKUP_NETWORK_REGEN_TIME = 0x72516B4,
        SET_HELI_BLADES_FULL_SPEED = 0x557C3641,
        SET_HELI_FORCE_ENGINE_ON = 0x3B8F5E20,
        SET_HELI_STABILISER = 0x4E653BCC,
        SET_HELP_MESSAGE_BOX_SIZE = 0x4FB069ED,
        SET_HELP_MESSAGE_BOX_SIZE_F = 0x7A521650,
        SET_HIDE_WEAPON_ICON = 0xF1B1AA1,
        SET_HINT_ADVANCED_PARAMS = 0x2E096356,
        SET_HINT_FOV = 0x2F9751E2,
        SET_HINT_MOVE_IN_DIST = 0x661A0CCC,
        SET_HINT_MOVE_IN_DIST_DEFAULT = 0x449264B6,
        SET_HINT_TIMES = 0x4CC81FCB,
        SET_HINT_TIMES_DEFAULT = 0x6ADF2929,
        SET_HOST_MATCH_ON = 0x2C41421A,
        SET_HOT_WEAPON_SWAP = 0x7FF260D0,
        SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS = 0x5CC3DA1,
        SET_IGNORE_NO_GPS_FLAG = 0x1FC06A1B,
        SET_IGNORE_SERVER_UPDATE = 0x6B2F6234,
        SET_IK_DISABLED_FOR_NETWORK_PLAYER = 0x13B27FFE,
        SET_INFORM_RESPECTED_FRIENDS = 0x509F236D,
        SET_INSTANT_WIDESCREEN_BORDERS = 0x728C1CC0,
        SET_INTERP_FROM_GAME_TO_SCRIPT = 0x45CE21CA,
        SET_INTERP_FROM_SCRIPT_TO_GAME = 0x69B140F6,
        SET_INTERP_IN_OUT_VEHICLE_ENABLED_THIS_FRAME = 0x120D3155,
        SET_INT_STAT = 0x1B64665B,
        SET_INVINCIBILITY_TIMER_DURATION = 0x3E4233F7,
        SET_IN_MP_TUTORIAL = 0x1AEB793A,
        SET_IN_SPECTATOR_MODE = 0x40035D5D,
        SET_KILLSTREAK = 0x7D070604,
        SET_LCPD_COP_SCORE = 0x39C6699D,
        SET_LCPD_CRIMINAL_SCORE = 0x7457458C,
        SET_LOAD_COLLISION_FOR_CAR_FLAG = 0x1E5C50B5,
        SET_LOAD_COLLISION_FOR_CHAR_FLAG = 0x4AA762A4,
        SET_LOAD_COLLISION_FOR_OBJECT_FLAG = 0x70D13342,
        SET_LOBBY_MUTE_OVERRIDE = 0x10800FD6,
        SET_LOCAL_PLAYER_PAIN_VOICE = 0x1DDD0073,
        SET_LOCAL_PLAYER_VOICE = 0x7092DC4,
        SET_LOCK_STATE_OF_CLOSEST_OBJECT_OF_TYPE = 0x34FF4544,
        SET_LOUD_VEHICLE_RADIO = 0x34686B92,
        SET_MASK = 0xD3A3160,
        SET_MAX_FIRE_GENERATIONS = 0x3BA036B,
        SET_MAX_WANTED_LEVEL = 0x5D622498,
        SET_MELEE_ACTION_SENSE_RANGE_FOR_RIOT2 = 0x8E4A6B0D,
        SET_MENU_COLUMN = 0x4D317353,
        SET_MENU_COLUMN_ORIENTATION = 0x7CC63464,
        SET_MENU_COLUMN_WIDTH = 0xDBF663C,
        SET_MENU_ITEM_WITH_2_NUMBERS = 0x7C4E54ED,
        SET_MENU_ITEM_WITH_NUMBER = 0x32E45138,
        SET_MESSAGES_WAITING = 0x7DC061F5,
        SET_MESSAGE_FORMATTING = 0x679A474E,
        SET_MINIGAME_IN_PROGRESS = 0x3ED135AD,
        SET_MIN_MAX_PED_ACCURACY = 0x74627538,
        SET_MISSION_FLAG = 0x4FE923DC,
        SET_MISSION_PASSED_CASH = 0x60DC6E25,
        SET_MISSION_PICKUP_SOUND = 0x3F0F4E0C,
        SET_MISSION_RESPECT_TOTAL = 0x3FA46EB8,
        SET_MISSION_TRAIN_COORDINATES = 0x2A3F654A,
        SET_MOBILE_PHONE_POSITION = 0x463832F7,
        SET_MOBILE_PHONE_RADIO_STATE = 0x52C83902,
        SET_MOBILE_PHONE_ROTATION = 0x7E7E4879,
        SET_MOBILE_PHONE_SCALE = 0x61C921EF,
        SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY = 0x688557E4,
        SET_MOBILE_RING_TYPE = 0x24885050,
        SET_MONEY_CARRIED_BY_ALL_NEW_PEDS = 0x64CA2868,
        SET_MONEY_CARRIED_BY_PED_WITH_MODEL = 0x47D3BD6,
        SET_MONEY_PICKUP_NETWORK_REGEN_TIME = 0x61243F34,
        SET_MOVIE_TIME = 0x37871A37,
        SET_MOVIE_VOLUME = 0x32486214,
        SET_MSG_FOR_LOADING_SCREEN = 0x4E4C2F92,
        SET_MULTIPLAYER_BRIEF = 0x1F5A6C94,
        SET_MULTIPLAYER_HUD_CASH = 0x51742D5,
        SET_MULTIPLAYER_HUD_TIME = 0x3A820D46,
        SET_NEEDS_TO_BE_HOTWIRED = 0x40A708A6,
        SET_NETWORK_ID_CAN_MIGRATE = 0x2FA5601D,
        SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES = 0x4E2C764D,
        SET_NETWORK_ID_STOP_CLONING = 0x86452E7,
        SET_NETWORK_ID_STOP_CLONING_FOR_ENEMIES = 0x320B3D0C,
        SET_NETWORK_ID_STOP_SYNCING = 0x8D1404C1,
        SET_NETWORK_JOIN_FAIL = 0x5849311B,
        SET_NETWORK_PED_USING_PARACHUTE = 0x6E8B7611,
        SET_NETWORK_PLAYER_AS_VIP = 0x28251E62,
        SET_NETWORK_VEHICLE_RESPOT_TIMER = 0x266F327C,
        SET_NETWORK_VISIBILITY = 0x24403F44,
        SET_NEXT_DESIRED_MOVE_STATE = 0x2033258,
        SET_NM_ANIM_POSE = 0x50311928,
        SET_NM_MESSAGE_BOOL = 0x202F384E,
        SET_NM_MESSAGE_FLOAT = 0x6CE00370,
        SET_NM_MESSAGE_INSTANCE_INDEX = 0x48543AED,
        SET_NM_MESSAGE_INT = 0x49105005,
        SET_NM_MESSAGE_STRING = 0x3F296F78,
        SET_NM_MESSAGE_VEC3 = 0x6E8F7FA4,
        SET_NO_RESPRAYS = 0x418D0889,
        SET_OBJECT_ALPHA = 0x7F0040DE,
        SET_OBJECT_ANIM_CURRENT_TIME = 0x368274DA,
        SET_OBJECT_ANIM_PLAYING_FLAG = 0x6A7236C9,
        SET_OBJECT_ANIM_SPEED = 0x168B18ED,
        SET_OBJECT_AS_STEALABLE = 0x2DDE3785,
        SET_OBJECT_CCD = 0x677861E1,
        SET_OBJECT_COLLISION = 0x24A40229,
        SET_OBJECT_COORDINATES = 0x52FD30EB,
        SET_OBJECT_DRAW_LAST = 0x19DD44F2,
        SET_OBJECT_DYNAMIC = 0x2C591CCD,
        SET_OBJECT_EXISTS_ON_ALL_MACHINES = 0x672139F0,
        SET_OBJECT_HEADING = 0x4F5D027C,
        SET_OBJECT_HEALTH = 0x46C41EA8,
        SET_OBJECT_INITIAL_ROTATION_VELOCITY = 0x1C7C4B89,
        SET_OBJECT_INITIAL_VELOCITY = 0x41ED206B,
        SET_OBJECT_INVINCIBLE = 0x1D2F46AE,
        SET_OBJECT_LIGHTS = 0x45D71590,
        SET_OBJECT_ONLY_DAMAGED_BY_PLAYER = 0x2E321155,
        SET_OBJECT_PHYSICS_PARAMS = 0x1B9A44D4,
        SET_OBJECT_PROOFS = 0x352865D2,
        SET_OBJECT_QUATERNION = 0x71270D73,
        SET_OBJECT_RECORDS_COLLISIONS = 0xCA93513,
        SET_OBJECT_RENDER_SCORCHED = 0x1AD3394A,
        SET_OBJECT_ROTATION = 0x81D549C,
        SET_OBJECT_SCALE = 0x145B13C7,
        SET_OBJECT_STOP_CLONING = 0x2F400F5F,
        SET_OBJECT_USED_IN_POOL_GAME = 0x7B23203,
        SET_OBJECT_VISIBLE = 0x372C7B2A,
        SET_ONLINE_LAN = 0x7E113020,
        SET_ONLINE_SCORE = 0x6B9C7392,
        SET_ONLY_CREATE_RANDOM_GANG_MEMBERS = 0xFCCE1D7,
        SET_ONSCREEN_COUNTER_FLASH_WHEN_FIRST_DISPLAYED = 0x6F54963,
        SET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER = 0x75F85826,
        SET_PARKED_CAR_DENSITY_MULTIPLIER = 0x10C7044,
        SET_PED_ALLOW_MISSION_ONLY_DRIVEBY_USE = 0x6E7C6687,
        SET_PED_ALPHA = 0x5AA1795C,
        SET_PED_COMPONENTS_TO_NETWORK_PLAYERSETTINGS_MODEL = 0x5C3053C0,
        SET_PED_DENSITY_MULTIPLIER = 0x540F2DF7,
        SET_PED_DIES_WHEN_INJURED = 0x3BF93ED7,
        SET_PED_DONT_DO_EVASIVE_DIVES = 0x1EAD1D7D,
        SET_PED_DONT_USE_VEHICLE_SPECIFIC_ANIMS = 0xB6E6107,
        SET_PED_ENABLE_LEG_IK = 0x695C429D,
        SET_PED_EXISTS_ON_ALL_MACHINES = 0x79700852,
        SET_PED_FALL_OFF_BIKES_WHEN_SHOT = 0x78E00C86,
        SET_PED_FIRE_FX_LOD_SCALER = 0x679C4276,
        SET_PED_FORCE_FLY_THROUGH_WINDSCREEN = 0x6E354B41,
        SET_PED_FORCE_VISUALISE_HEAD_DAMAGE_FROM_BULLETS = 0x2BA92322,
        SET_PED_GENERATES_DEAD_BODY_EVENTS = 0x3DBF53E0,
        SET_PED_HEEDS_THE_EVERYONE_IGNORE_PLAYER_FLAG = 0x3BBE6DBE,
        SET_PED_HELI_PILOT_RESPECTS_MINIMUMM_HEIGHT = 0x20BB5507,
        SET_PED_HELMET_TEXTURE_INDEX = 0x6AC14091,
        SET_PED_INSTANT_BLENDS_WEAPON_ANIMS = 0x2CB572B5,
        SET_PED_IS_BLIND_RAGING = 0x5D800A4,
        SET_PED_IS_DRUNK = 0x67CC007C,
        SET_PED_MOBILE_RING_TYPE = 0x7E1C01D7,
        SET_PED_MOTION_BLUR = 0x73E6005B,
        SET_PED_NON_CREATION_AREA = 0x3DAB7D72,
        SET_PED_NON_REMOVAL_AREA = 0x52D34ED3,
        SET_PED_PATH_MAY_DROP_FROM_HEIGHT = 0x4F37648C,
        SET_PED_PATH_MAY_USE_CLIMBOVERS = 0x34BD72D7,
        SET_PED_PATH_MAY_USE_LADDERS = 0x6B2838C7,
        SET_PED_PATH_WILL_AVOID_DYNAMIC_OBJECTS = 0x1E901BB6,
        SET_PED_QUEUE_MEMBERSHIP_LIST = 0x2BD46BB,
        SET_PED_SKIPS_COMPLEX_COVER_COLLISION_CHECKS = 0x2CD33526,
        SET_PED_STEERS_AROUND_OBJECTS = 0x7D071EE0,
        SET_PED_STEERS_AROUND_PEDS = 0x57A236F0,
        SET_PED_STOP_CLONING = 0x74C55395,
        SET_PED_WINDY_CLOTHING_SCALE = 0x12865550,
        SET_PED_WITH_BRAIN_CAN_BE_CONVERTED_TO_DUMMY_PED = 0x1461418C,
        SET_PED_WONT_ATTACK_PLAYER_WITHOUT_WANTED_LEVEL = 0x3BF06336,
        SET_PETROL_TANK_HEALTH = 0x17E2319C,
        SET_PETROL_TANK_WEAKPOINT = 0x667517AB,
        SET_PHONE_HUD_ITEM = 0x43A13718,
        SET_PHYS_CCD_HANDLES_ROTATION = 0xC7B7CF4,
        SET_PICKUPS_FIX_CARS = 0x59DC6B9A,
        SET_PICKUP_COLLECTABLE_BY_CAR = 0x6DA91393,
        SET_PLANE_THROTTLE = 0x5B2442A,
        SET_PLANE_UNDERCARRIAGE_UP = 0x7953702C,
        SET_PLAYBACK_SPEED = 0xEAF6A68,
        SET_PLAYERSETTINGS_MODEL_VARIATIONS_CHOICE = 0x27650F37,
        SET_PLAYERS_CAN_BE_IN_SEPARATE_CARS = 0x58704CAD,
        SET_PLAYERS_DROP_MONEY_IN_NETWORK_GAME = 0x1651FBA,
        SET_PLAYER_AS_COP = 0x1D161BB8,
        SET_PLAYER_AS_DAMAGED_PLAYER = 0x633A012B,
        SET_PLAYER_CAN_BE_HASSLED_BY_GANGS = 0x9C5648C,
        SET_PLAYER_CAN_DO_DRIVE_BY = 0x561471FB,
        SET_PLAYER_CAN_DROP_WEAPONS_IN_CAR = 0x4F884E33,
        SET_PLAYER_CAN_USE_COVER = 0x4AC023C4,
        SET_PLAYER_COLOUR = 0x6C8F2EEE,
        SET_PLAYER_CONTROL = 0x1A6203EA,
        SET_PLAYER_CONTROL_ADVANCED = 0x31E25160,
        SET_PLAYER_CONTROL_FOR_AMBIENT_SCRIPT = 0x647E2BF7,
        SET_PLAYER_CONTROL_FOR_NETWORK = 0x2AF07CC8,
        SET_PLAYER_CONTROL_FOR_TEXT_CHAT = 0x13267663,
        SET_PLAYER_CONTROL_ON_IN_MISSION_CLEANUP = 0x6F271B2,
        SET_PLAYER_DISABLE_CROUCH = 0x3BB57426,
        SET_PLAYER_DISABLE_JUMP = 0x4B5832BE,
        SET_PLAYER_FAST_RELOAD = 0x29B53DFF,
        SET_PLAYER_FORCED_AIM = 0x7E603872,
        SET_PLAYER_GROUP_RECRUITMENT = 0x7A9B6E17,
        SET_PLAYER_GROUP_TO_FOLLOW_ALWAYS = 0x700165C2,
        SET_PLAYER_GROUP_TO_FOLLOW_NEVER = 0x4F29072E,
        SET_PLAYER_ICON_COLOUR = 0x689D5EEE,
        SET_PLAYER_INVINCIBLE = 0x7E9E02E1,
        SET_PLAYER_INVISIBLE_TO_AI = 0x68083431,
        SET_PLAYER_IS_IN_STADIUM = 0x349D5C27,
        SET_PLAYER_KEEPS_WEAPONS_WHEN_RESPAWNED = 0x6C321179,
        SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE = 0x6BC05942,
        SET_PLAYER_MOOD_NORMAL = 0x546F5326,
        SET_PLAYER_MOOD_PISSED_OFF = 0x5E061170,
        SET_PLAYER_MP_MODIFIER = 0x2B111E69,
        SET_PLAYER_NEVER_GETS_TIRED = 0xDDC19F4,
        SET_PLAYER_PAIN_ROOT_BANK_NAME = 0x70AF1D38,
        SET_PLAYER_PLAYER_TARGETTING = 0x46920944,
        SET_PLAYER_SETTINGS_GENRE = 0x379B0A8F,
        SET_PLAYER_TEAM = 0x3E733990,
        SET_POLICE_FOCUS_WILL_TRACK_CAR = 0xD374615,
        SET_POLICE_IGNORE_PLAYER = 0x619D51D3,
        SET_POLICE_RADAR_BLIPS = 0x14790F9F,
        SET_PTFX_CAM_INSIDE_VEHICLE = 0x137E6800,
        SET_RADAR_AS_INTERIOR_THIS_FRAME = 0x5C3F7E39,
        SET_RADAR_SCALE = 0x75ED39CF,
        SET_RADAR_ZOOM = 0x35E37826,
        SET_RAILTRACK_RESISTANCE_MULT = 0x3D7B10E7,
        SET_RANDOM_CAR_DENSITY_MULTIPLIER = 0x73505E0,
        SET_RANDOM_SEED = 0x1BA8350B,
        SET_RECORDING_TO_POINT_NEAREST_TO_COORS = 0x7B732460,
        SET_REDUCE_PED_MODEL_BUDGET = 0x44474526,
        SET_REDUCE_VEHICLE_MODEL_BUDGET = 0x71F965B4,
        SET_RELATIONSHIP = 0x3D916E4,
        SET_RENDER_TRAIN_AS_DERAILED = 0x8240FB7,
        SET_RETURN_TO_FILTER_MENU = 0x733846D5,
        SET_RICH_PRESENCE = 0x73AB2028,
        SET_RICH_PRESENCE_TEMPLATEFILTER = 0x6B434D0D,
        SET_RICH_PRESENCE_TEMPLATELOBBY = 0x77D72045,
        SET_RICH_PRESENCE_TEMPLATEMP1 = 0x6C236A54,
        SET_RICH_PRESENCE_TEMPLATEMP2 = 0x5AFA67D7,
        SET_RICH_PRESENCE_TEMPLATEMP3 = 0x612062DB,
        SET_RICH_PRESENCE_TEMPLATEMP4 = 0x2BF8368E,
        SET_RICH_PRESENCE_TEMPLATEMP5 = 0x314F6DD3,
        SET_RICH_PRESENCE_TEMPLATEMP6 = 0x5D70FE8,
        SET_RICH_PRESENCE_TEMPLATEPARTY = 0x422055C7,
        SET_RICH_PRESENCE_TEMPLATESP1 = 0x132487,
        SET_RICH_PRESENCE_TEMPLATESP2 = 0x9766174,
        SET_ROCKET_LAUNCHER_FREEBIE_IN_HELI = 0x77A97169,
        SET_ROMANS_MOOD = 0x126F1175,
        SET_ROOM_FOR_CAR_BY_KEY = 0x1E106A88,
        SET_ROOM_FOR_CAR_BY_NAME = 0x2667609A,
        SET_ROOM_FOR_CHAR_BY_KEY = 0x620C26D8,
        SET_ROOM_FOR_CHAR_BY_NAME = 0x2E9B1F77,
        SET_ROOM_FOR_DUMMY_CHAR_BY_KEY = 0x29907BEF,
        SET_ROOM_FOR_DUMMY_CHAR_BY_NAME = 0x75B024C6,
        SET_ROOM_FOR_VIEWPORT_BY_KEY = 0x7EE2A45,
        SET_ROOM_FOR_VIEWPORT_BY_NAME = 0x3DAF3F94,
        SET_ROPE_HEIGHT_FOR_OBJECT = 0x3D79554A,
        SET_ROTATION_FOR_ATTACHED_PED = 0x1FE21CF0,
        SET_ROT_ORDER = 0x662E4376,
        SET_ROUTE = 0x7B8D68E7,
        SET_SCENARIO_PED_DENSITY_MULTIPLIER = 0x3F0022F7,
        SET_SCREEN_FADE = 0x188E0FAC,
        SET_SCRIPTED_ANIM_SEAT_OFFSET = 0x718939EF,
        SET_SCRIPTED_CONVERSION_CENTRE = 0x40F61D4A,
        SET_SCRIPT_FIRE_AUDIO = 0x6DFFBCD0,
        SET_SCRIPT_LIMIT_TO_GANG_SIZE = 0x352921C4,
        SET_SCRIPT_MIC_LOOK_AT = 0x4DD43FFD,
        SET_SCRIPT_MIC_POSITION = 0x295D3A87,
        SET_SELECTED_MENU_ITEM = 0x70291096,
        SET_SENSE_RANGE = 0x44D56F66,
        SET_SEQUENCE_TO_REPEAT = 0x22E91F1F,
        SET_SERVER_ID = 0x575136AC,
        SET_SIREN_WITH_NO_DRIVER = 0x47FD2517,
        SET_SLEEP_MODE_ACTIVE = 0x1C5552E9,
        SET_SNIPER_ZOOM_FACTOR = 0x42690F6B,
        SET_SPECIFIC_PASSENGER_INDEX_TO_USE_IN_GROUPS = 0xEA118D0,
        SET_SPRITES_DRAW_BEFORE_FADE = 0x615959BA,
        SET_SPRITE_HDR_MULTIPLIER = 0x523F11FD,
        SET_START_FROM_FILTER_MENU = 0x3F6B5975,
        SET_STATE_OF_CLOSEST_DOOR_OF_TYPE = 0x10974B70,
        SET_STAT_FRONTEND_ALWAYS_VISIBLE = 0x656F1A7A,
        SET_STAT_FRONTEND_DISPLAY_TYPE = 0x10436A86,
        SET_STAT_FRONTEND_NEVER_VISIBLE = 0x3A6B0308,
        SET_STAT_FRONTEND_VISIBILITY = 0x45D23711,
        SET_STAT_FRONTEND_VISIBLE_AFTER_INCREMENTED = 0x12D67ADA,
        SET_STREAMING_REQUEST_LIST_TIME = 0x1FF6618,
        SET_STREAM_PARAMS = 0x16CB4F86,
        SET_SUPPRESS_HEADLIGHT_SWITCH = 0x43EF56EE,
        SET_SWIM_SPEED = 0x32B4293B,
        SET_SYNC_WEATHER_AND_GAME_TIME = 0x51112E95,
        SET_TARGET_CAR_FOR_MISSION_GARAGE = 0x6EF667A4,
        SET_TAXI_GARAGE_RADIO_STATE = 0x299C5EBC,
        SET_TAXI_LIGHTS = 0x460837F9,
        SET_TEAM_COLOUR = 0x22780707,
        SET_TELESCOPE_CAM_ANGLE_LIMITS = 0x6680196B,
        SET_TEXT_BACKGROUND = 0x768F5140,
        SET_TEXT_CENTRE = 0x204A6AA4,
        SET_TEXT_CENTRE_WRAPX = 0x2F9E362B,
        SET_TEXT_COLOUR = 0x19C967B5,
        SET_TEXT_DRAW_BEFORE_FADE = 0x6CFD0610,
        SET_TEXT_DROPSHADOW = 0x58F5023F,
        SET_TEXT_EDGE = 0x2D7A725D,
        SET_TEXT_FONT = 0x75363BB5,
        SET_TEXT_INPUT_ACTIVE = 0x2A28684C,
        SET_TEXT_JUSTIFY = 0x49D23F9,
        SET_TEXT_LINE_DISPLAY = 0x1F6A54B6,
        SET_TEXT_LINE_HEIGHT_MULT = 0x5BF53817,
        SET_TEXT_PROPORTIONAL = 0x15585A65,
        SET_TEXT_RENDER_ID = 0x2B1B0290,
        SET_TEXT_RIGHT_JUSTIFY = 0x748B78B6,
        SET_TEXT_SCALE = 0x2C069E5,
        SET_TEXT_TO_USE_TEXT_FILE_COLOURS = 0x52CE650B,
        SET_TEXT_USE_UNDERSCORE = 0xAD54D75,
        SET_TEXT_VIEWPORT_ID = 0x3F9B2DD6,
        SET_TEXT_WRAP = 0x19D006EB,
        SET_TEXT_WRAPX = 0x2F9E362B,
        SET_THIS_MACHINE_RUNNING_SERVER_SCRIPT = 0x382A19BE,
        SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT = 0x29D64E72,
        SET_TIMECYCLE_MODIFIER = 0x3C997E4C,
        SET_TIMER_BEEP_COUNTDOWN_TIME = 0x66B93E8C,
        SET_TIME_CYCLE_FAR_CLIP_DISABLED = 0x13C75E16,
        SET_TIME_OF_DAY = 0x52100540,
        SET_TIME_OF_NEXT_APPOINTMENT = 0xA7D3AF9,
        SET_TIME_ONE_DAY_BACK = 0x18136217,
        SET_TIME_ONE_DAY_FORWARD = 0x79CF27AC,
        SET_TIME_SCALE = 0x24D467CC,
        SET_TOTAL_NUMBER_OF_MISSIONS = 0x9DE74E5,
        SET_TRAIN_AUDIO_ROLLOFF = 0x1C21158,
        SET_TRAIN_CRUISE_SPEED = 0x2E93A3E,
        SET_TRAIN_FORCED_TO_SLOW_DOWN = 0x475267B0,
        SET_TRAIN_IS_STOPPED_AT_STATION = 0x270C7AB3,
        SET_TRAIN_SPEED = 0x3F4950AC,
        SET_TRAIN_STOPS_FOR_STATIONS = 0x5D154995,
        SET_UPSIDEDOWN_CAR_NOT_DAMAGED = 0x353317C7,
        SET_UP_CONVERSATION_END_NODE_WITH_SCRIPTED_SPEECH = 0x9EFEE2EF,
        SET_UP_CONVERSATION_END_NODE_WITH_SPEECH = 0xF32973F4,
        SET_UP_CONVERSATION_NODE_WITH_SCRIPTED_SPEECH = 0x927CCC6E,
        SET_UP_TRIP_SKIP = 0x27B724F1,
        SET_UP_TRIP_SKIP_AFTER_MISSION = 0x6C3D04C3,
        SET_UP_TRIP_SKIP_FOR_SPECIFIC_VEHICLE = 0x65A428F2,
        SET_UP_TRIP_SKIP_FOR_VEHICLE_FINISHED_BY_SCRIPT = 0x4D5068A6,
        SET_UP_TRIP_SKIP_TO_BE_FINISHED_BY_SCRIPT = 0x5CEB0360,
        SET_USES_COLLISION_OF_CLOSEST_OBJECT_OF_TYPE = 0x7BC4223,
        SET_USE_HIGHDOF = 0x4A1D15D5,
        SET_USE_LEG_IK = 0x4F705478,
        SET_USE_POOL_GAME_PHYSICS_SETTINGS = 0x5C162D0D,
        SET_VARIABLE_ON_SOUND = 0x39200B83,
        SET_VEHICLE_ALPHA = 0xC4B7DD3,
        SET_VEHICLE_ALWAYS_RENDER = 0x4A4B0F18,
        SET_VEHICLE_AREA_VISIBLE = 0x69ED5662,
        SET_VEHICLE_CAN_BE_TARGETTED = 0x2B9B35C3,
        SET_VEHICLE_DEFORMATION_MULT = 0x7B65266B,
        SET_VEHICLE_DIRT_LEVEL = 0x2A57428,
        SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE = 0x7B4A7CD6,
        SET_VEHICLE_IS_CONSIDERED_BY_PLAYER = 0x720673D9,
        SET_VEHICLE_QUATERNION = 0x43573596,
        SET_VEHICLE_RENDER_SCORCHED = 0x7205796,
        SET_VEHICLE_STEER_BIAS = 0x91D1480,
        SET_VEH_ALARM = 0xCF76EE0,
        SET_VEH_ALARM_DURATION = 0x5FFE33EC,
        SET_VEH_HAS_STRONG_AXLES = 0x63DE7A05,
        SET_VEH_HAZARDLIGHTS = 0x24B42ED2,
        SET_VEH_INDICATORLIGHTS = 0x71D72486,
        SET_VEH_INTERIORLIGHT = 0x49EA22C8,
        SET_VIEWPORT = 0xEE87310,
        SET_VIEWPORT_DESTINATION = 0x1C810358,
        SET_VIEWPORT_MIRRORED = 0x61784349,
        SET_VIEWPORT_PRIORITY = 0x5DA1752F,
        SET_VIEWPORT_SHAPE = 0x43ED66E3,
        SET_VISIBILITY_OF_CLOSEST_OBJECT_OF_TYPE = 0x20A04BEE,
        SET_VISIBILITY_OF_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE = 0x6DDD201D,
        SET_VOICE_ID_FROM_HEAD_COMPONENT = 0x2794E6B,
        SET_WANTED_MULTIPLIER = 0x51E14C1B,
        SET_WEAPON_PICKUP_NETWORK_REGEN_TIME = 0x40D01439,
        SET_WEB_PAGE_LINK_ACTIVE = 0x5F5E7F39,
        SET_WEB_PAGE_SCROLL = 0x55DE40EE,
        SET_WIDESCREEN_BORDERS = 0x6C71148,
        SET_WIDESCREEN_FORMAT = 0x7BDE2CAF,
        SET_ZONE_NO_COPS = 0x64F37F05,
        SET_ZONE_POPULATION_TYPE = 0x70582D53,
        SET_ZONE_SCUMMINESS = 0x5E5E4252,
        SHAKE_PAD = 0x66CC16BD,
        SHAKE_PAD_IN_CUTSCENE = 0x2D040DA9,
        SHAKE_PLAYERPAD_WHEN_CONTROLLER_DISABLED = 0x691970FD,
        SHIFT_LEFT = 0x102A0A6C,
        SHIFT_RIGHT = 0x64DD173C,
        SHOW_BLIP_ON_ALTIMETER = 0x1DD86C2A,
        SHOW_SIGNIN_UI = 0x72397ECD,
        SHOW_UPDATE_STATS = 0x59486829,
        SHUTDOWN_AND_LAUNCH_NETWORK_GAME = 0x1BC5050E,
        SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME = 0x49FD2621,
        SHUT_CAR_DOOR = 0x5E7A620E,
        SIMULATE_UPDATE_LOAD_SCENE = 0x246D47CE,
        SIN = 0x1EC10CE1,
        SKIP_IN_PLAYBACK_RECORDED_CAR = 0x2C8C61BA,
        SKIP_RADIO_FORWARD = 0x12A86E89,
        SKIP_TIME_IN_PLAYBACK_RECORDED_CAR = 0x255059BB,
        SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_CAR = 0xD192F80,
        SKIP_TO_NEXT_ALLOWED_STATION = 0x653B5374,
        SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE = 0x294C35B0,
        SLIDE_OBJECT = 0x11B76EDF,
        SMASH_CAR_WINDOW = 0x2CDF628C,
        SMASH_GLASS_ON_OBJECT = 0x2F877E8A,
        SNAPSHOT_CAM = 0x34BF456A,
        SOUND_CAR_HORN = 0x24859B5,
        SPECIFY_SCRIPT_POPULATION_ZONE_AREA = 0x5A07394A,
        SPECIFY_SCRIPT_POPULATION_ZONE_GROUPS = 0x70F0538F,
        SPECIFY_SCRIPT_POPULATION_ZONE_NUM_CARS = 0x1B886584,
        SPECIFY_SCRIPT_POPULATION_ZONE_NUM_PARKED_CARS = 0x2EB751CC,
        SPECIFY_SCRIPT_POPULATION_ZONE_NUM_PEDS = 0x159A4ED4,
        SPECIFY_SCRIPT_POPULATION_ZONE_NUM_SCENARIO_PEDS = 0x6A733E6C,
        SPECIFY_SCRIPT_POPULATION_ZONE_PERCENTAGE_COPS = 0x49FF799A,
        SPOT_CHECK5 = 0x6B4D6FC6,
        SPOT_CHECK6 = 0x52277FB2,
        SPOT_CHECK7 = 0x46CC31B4,
        SPOT_CHECK8 = 0x7B1B14BD,
        SQRT = 0x2C297C5D,
        START_CAR_FIRE = 0x94BC3DCE,
        START_CHAR_FACIAL_TALK = 0x306C1251,
        START_CHAR_FIRE = 0x5FB31295,
        START_CREDITS = 0x7F3222FD,
        START_CUSTOM_MOBILE_PHONE_RINGING = 0x59406EB1,
        START_CUTSCENE = 0x5F752F19,
        START_CUTSCENE_NOW = 0x53591DD7,
        START_END_CREDITS_MUSIC = 0x587E55D3,
        START_FIRING_AMNESTY = 0x5DB83661,
        START_GPS_RACE_TRACK = 0x422C1818,
        START_KILL_FRENZY = 0x77B17B5,
        START_KILL_TRACKING = 0xEF143D,
        START_LOAD_SCENE = 0x54320B58,
        START_MOBILE_PHONE_CALL = 0x7939764F,
        START_MOBILE_PHONE_CALLING = 0x67114B98,
        START_MOBILE_PHONE_RINGING = 0x372C0DF1,
        START_NEW_SCRIPT = 0x4E2260B9,
        START_NEW_SCRIPT_WITH_ARGS = 0x706707E6,
        START_NEW_WIDGET_COMBO = 0x3893A3A,
        START_OBJECT_FIRE = 0x2D7D5DD2,
        START_PED_MOBILE_RINGING = 0x79A12A52,
        START_PLAYBACK_RECORDED_CAR = 0x53335A45,
        START_PLAYBACK_RECORDED_CAR_LOOPED = 0x1E33E33,
        START_PLAYBACK_RECORDED_CAR_USING_AI = 0x5D900560,
        START_PLAYBACK_RECORDED_CAR_WITH_OFFSET = 0x2491769,
        START_PROFILE_TIMER = 0x78EE47F9,
        START_PTFX = 0x3A774777,
        START_PTFX_ON_OBJ = 0xD8407E9,
        START_PTFX_ON_OBJ_BONE = 0x60980323,
        START_PTFX_ON_PED = 0x381C1F1C,
        START_PTFX_ON_PED_BONE = 0x2209116C,
        START_PTFX_ON_VEH = 0x5C4B1A8A,
        START_RECORDING_CAR = 0xE458ED7,
        START_SCRIPTED_CONVERSATION = 0x7E4CB1E,
        START_SCRIPT_CONVERSATION = 0x288E50A3,
        START_SCRIPT_FIRE = 0x24742BB9,
        START_SETTING_UP_CONVERSATION = 0xFC2EE353,
        START_STREAMING_REQUEST_LIST = 0x7858750E,
        STOP_CAR_BREAKING = 0x29305D67,
        STOP_CHAR_FACIAL_TALK = 0xF3760C11,
        STOP_CREDITS = 0x4F0F2AA8,
        STOP_CUTSCENE = 0x50FF1428,
        STOP_END_CREDITS_MUSIC = 0x47E93CB8,
        STOP_KILL_TRACKING = 0x28CA0AFE,
        STOP_MOBILE_PHONE_RINGING = 0x27356F3A,
        STOP_MOVIE = 0x2E6F4C82,
        STOP_PED_DOING_FALL_OFF_TESTS_WHEN_SHOT = 0x4E386C7B,
        STOP_PED_MOBILE_RINGING = 0x7827AE1,
        STOP_PED_SPEAKING = 0x710B2BD3,
        STOP_PED_WEAPON_FIRING_WHEN_DROPPED = 0x6E0026EF,
        STOP_PLAYBACK_RECORDED_CAR = 0x71C91921,
        STOP_PREVIEW_RINGTONE = 0x5B1D57EF,
        STOP_PROFILE_TIMER = 0x1C5C19E8,
        STOP_PROPAGATING_CAM_TO_NET_PLAYER = 0xC902ADF1,
        STOP_PTFX = 0xEAA4429,
        STOP_RECORDING_CAR = 0x55A80BD7,
        STOP_RECORDING_CARS = 0xECDF8DBD,
        STOP_SOUND = 0x9DB00B9,
        STOP_STREAM = 0x66915CE9,
        STOP_SYNCING_SCRIPT_ANIMATIONS = 0x47F430BE,
        STOP_VEHICLE_ALWAYS_RENDER = 0x7CDD7B0E,
        STORE_CAR_CHAR_IS_IN = 0x25D4BA34,
        STORE_CAR_CHAR_IS_IN_NO_SAVE = 0x21CC647F,
        STORE_DAMAGE_TRACKER_FOR_NETWORK_PLAYER = 0x68373878,
        STORE_SCORE = 0x1E203014,
        STORE_SCRIPT_VALUES_FOR_NETWORK_GAME = 0x1DFF5B06,
        STORE_WANTED_LEVEL = 0x12AA6D71,
        STREAM_CUTSCENE = 0xF0D2025,
        STRING_DIFFERENCE = 0x25204F8B,
        STRING_STRING = 0x6C0E191F,
        STRING_TO_INT = 0x5C3248B5,
        SUPPRESS_CAR_MODEL = 0x768F640F,
        SUPPRESS_FADE_IN_AFTER_DEATH_ARREST = 0x3FB83379,
        SUPPRESS_PED_MODEL = 0x4C5475E3,
        SWAP_NEAREST_BUILDING_MODEL = 0x5E077484,
        SWITCH_AMBIENT_PLANES = 0x4E637988,
        SWITCH_ARROW_ABOVE_BLIPPED_PICKUPS = 0x3A323C67,
        SWITCH_CAR_GENERATOR = 0x7CE83A30,
        SWITCH_CAR_SIREN = 0x7781290F,
        SWITCH_GARBAGE_TRUCKS = 0x60669FE,
        SWITCH_MAD_DRIVERS = 0x34CB6291,
        SWITCH_OBJECT_BRAINS = 0x35213375,
        SWITCH_OFF_WAYPOINT = 0x1B5B4ED9,
        SWITCH_PED_PATHS_OFF = 0x8A2256,
        SWITCH_PED_PATHS_ON = 0x67D908DF,
        SWITCH_PED_ROADS_BACK_TO_ORIGINAL = 0x6AA20B7E,
        SWITCH_PED_TO_ANIMATED = 0x762301C8,
        SWITCH_PED_TO_RAGDOLL = 0x1A0F56C5,
        SWITCH_PED_TO_RAGDOLL_WITH_FALL = 0x13E4042D,
        SWITCH_POLICE_HELIS = 0xCA46B08,
        SWITCH_RANDOM_BOATS = 0x7FC65855,
        SWITCH_RANDOM_TRAINS = 0xFFD1A92,
        SWITCH_ROADS_BACK_TO_ORIGINAL = 0x6251618F,
        SWITCH_ROADS_OFF = 0x4C3C1F3C,
        SWITCH_ROADS_ON = 0x56553F38,
        SWITCH_STREAMING = 0x6E397D96,
        SYNCH_AMBIENT_PLANES = 0x5AFD2049,
        SYNCH_RECORDING_WITH_WATER = 0x18A0EE0,
        TAKE_CAR_OUT_OF_PARKED_CARS_BUDGET = 0x60EF0519,
        TAKE_REMOTE_CONTROL_OF_CAR = 0x5DEA7140,
        TAKE_SCREEN_SHOT = 0x76BB510A,
        TAN = 0x24CC682B,
        TASK_ACHIEVE_HEADING = 0x6D6A1261,
        TASK_AIM_GUN_AT_CHAR = 0x4437501B,
        TASK_AIM_GUN_AT_COORD = 0xAA202B0,
        TASK_CAR_DRIVE_TO_COORD = 0x69715285,
        TASK_CAR_DRIVE_TO_COORD_NOT_AGAINST_TRAFFIC = 0x483A62AB,
        TASK_CAR_DRIVE_WANDER = 0x1E9635A9,
        TASK_CAR_MISSION = 0x36273536,
        TASK_CAR_MISSION_COORS_TARGET = 0x36D51DDF,
        TASK_CAR_MISSION_COORS_TARGET_NOT_AGAINST_TRAFFIC = 0x3CB4693B,
        TASK_CAR_MISSION_NOT_AGAINST_TRAFFIC = 0x3BE7444A,
        TASK_CAR_MISSION_PED_TARGET = 0x39C2663E,
        TASK_CAR_MISSION_PED_TARGET_NOT_AGAINST_TRAFFIC = 0x178332FF,
        TASK_CAR_TEMP_ACTION = 0x11612815,
        TASK_CHAR_ARREST_CHAR = 0x71A05FF1,
        TASK_CHAR_SLIDE_TO_COORD = 0x4962F82,
        TASK_CHAR_SLIDE_TO_COORD_AND_PLAY_ANIM = 0x79BB1D64,
        TASK_CHAR_SLIDE_TO_COORD_AND_PLAY_ANIM_HDG_RATE = 0x4E069A8,
        TASK_CHAR_SLIDE_TO_COORD_HDG_RATE = 0x33D756A0,
        TASK_CHAT_WITH_CHAR = 0x5C9807CA,
        TASK_CLEAR_LOOK_AT = 0x5745ACA,
        TASK_CLIMB = 0x4678769C,
        TASK_CLIMB_LADDER = 0xABE3FA8,
        TASK_COMBAT = 0x1F157FD3,
        TASK_COMBAT_HATED_TARGETS_AROUND_CHAR = 0x127669D3,
        TASK_COMBAT_HATED_TARGETS_AROUND_CHAR_TIMED = 0x15012850,
        TASK_COMBAT_HATED_TARGETS_IN_AREA = 0x6B840F1,
        TASK_COMBAT_ROLL = 0x131A0C84,
        TASK_COMBAT_TIMED = 0x56F04A05,
        TASK_COMPLEX_PICKUP_OBJECT = 0xA1A22A1E,
        TASK_COWER = 0x29103E08,
        TASK_DEAD = 0x3E1051E0,
        TASK_DESTROY_CAR = 0x787A3D4C,
        TASK_DIE = 0x7EED364B,
        TASK_DIVE_AND_GET_UP = 0xE620622D,
        TASK_DIVE_FROM_ATTACHMENT_AND_GET_UP = 0x3CC1E74A,
        TASK_DRIVE_BY = 0x3FB22EE2,
        TASK_DRIVE_POINT_ROUTE = 0x2C18736E,
        TASK_DRIVE_POINT_ROUTE_ADVANCED = 0x7A0A1063,
        TASK_DUCK = 0x72BF79F1,
        TASK_ENTER_CAR_AS_DRIVER = 0x5BF03315,
        TASK_ENTER_CAR_AS_PASSENGER = 0xA2C70AF,
        TASK_EVERYONE_LEAVE_CAR = 0x41E45BE5,
        TASK_EXTEND_ROUTE = 0x75353EA4,
        TASK_FALL_AND_GET_UP = 0x69433A8,
        TASK_FLEE_CHAR = 0xBB159B12,
        TASK_FLEE_CHAR_ANY_MEANS = 0x32517AE2,
        TASK_FLEE_POINT = 0x49F75BD8,
        TASK_FLUSH_ROUTE = 0x760E0A0F,
        TASK_FOLLOW_FOOTSTEPS = 0x45DF7CCA,
        TASK_FOLLOW_NAV_MESH_AND_SLIDE_TO_COORD = 0x36537CE1,
        TASK_FOLLOW_NAV_MESH_AND_SLIDE_TO_COORD_HDG_RATE = 0x38824BFE,
        TASK_FOLLOW_NAV_MESH_TO_COORD = 0x1B31390E,
        TASK_FOLLOW_NAV_MESH_TO_COORD_NO_STOP = 0x1BF67441,
        TASK_FOLLOW_PATROL_ROUTE = 0x72F02B67,
        TASK_FOLLOW_POINT_ROUTE = 0x1C430F41,
        TASK_GET_OFF_BOAT = 0x6C63251D,
        TASK_GOTO_CAR = 0x3EA116F7,
        TASK_GOTO_CHAR_AIMING = 0x65EB71CC,
        TASK_GOTO_CHAR_OFFSET = 0x658028BA,
        TASK_GO_STRAIGHT_TO_COORD = 0x19591255,
        TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_CAR = 0x498B3BE4,
        TASK_GO_TO_CHAR = 0x664D06FF,
        TASK_GO_TO_COORD_ANY_MEANS = 0x4F72E4C,
        TASK_GO_TO_COORD_WHILE_AIMING = 0x2A2959DA,
        TASK_GO_TO_COORD_WHILE_SHOOTING = 0x10CB1413,
        TASK_GO_TO_OBJECT = 0x5B1B2699,
        TASK_GREET_PARTNER = 0xCDC2F849,
        TASK_GUARD_ANGLED_DEFENSIVE_AREA = 0x30E0224,
        TASK_GUARD_ASSIGNED_DEFENSIVE_AREA = 0x7E21C28,
        TASK_GUARD_CURRENT_POSITION = 0x3E6137CB,
        TASK_GUARD_SPHERE_DEFENSIVE_AREA = 0x1795753,
        TASK_HANDS_UP = 0x68232D31,
        TASK_HAND_GESTURE = 0x326D19BE,
        TASK_HELI_MISSION = 0xF227D5A,
        TASK_HOLD_OBJECT = 0xFE8DFD1A,
        TASK_HOLSTERING_WEAPON = 0x35B7828,
        TASK_JETPACK = 0x690233B1,
        TASK_JUMP = 0x5E97106E,
        TASK_LEAVE_ANY_CAR = 0x1114089D,
        TASK_LEAVE_CAR = 0x6B85214E,
        TASK_LEAVE_CAR_AND_FLEE = 0x6CEA50D8,
        TASK_LEAVE_CAR_DONT_CLOSE_DOOR = 0x1C9A376D,
        TASK_LEAVE_CAR_IMMEDIATELY = 0x7BFB484F,
        TASK_LEAVE_CAR_IN_DIRECTION = 0x18740B3D,
        TASK_LEAVE_GROUP = 0x1905109F,
        TASK_LOOK_ABOUT = 0xD2D39DEE,
        TASK_LOOK_AT_CHAR = 0x2DD35B3F,
        TASK_LOOK_AT_COORD = 0x26E27605,
        TASK_LOOK_AT_OBJECT = 0x27C740D0,
        TASK_LOOK_AT_VEHICLE = 0x4A2C5544,
        TASK_MOBILE_CONVERSATION = 0x64903364,
        TASK_OPEN_DRIVER_DOOR = 0x1FA41244,
        TASK_OPEN_PASSENGER_DOOR = 0x58F814C4,
        TASK_PAUSE = 0x5E702E2C,
        TASK_PERFORM_SEQUENCE = 0x36A33C21,
        TASK_PERFORM_SEQUENCE_FROM_PROGRESS = 0x62701AF8,
        TASK_PERFORM_SEQUENCE_LOCALLY = 0x326B576F,
        TASK_PICKUP_AND_CARRY_OBJECT = 0x76D72D89,
        TASK_PLAY_ANIM = 0x28EE78D8,
        TASK_PLAY_ANIM_FACIAL = 0x71F001D2,
        TASK_PLAY_ANIM_NON_INTERRUPTABLE = 0x52202E76,
        TASK_PLAY_ANIM_ON_CLONE = 0x10FB7B5F,
        TASK_PLAY_ANIM_READY_TO_BE_EXECUTED = 0x40A0537,
        TASK_PLAY_ANIM_SECONDARY = 0x273C2D35,
        TASK_PLAY_ANIM_SECONDARY_IN_CAR = 0x482B2B74,
        TASK_PLAY_ANIM_SECONDARY_NO_INTERRUPT = 0x56524B94,
        TASK_PLAY_ANIM_SECONDARY_UPPER_BODY = 0x34574B2A,
        TASK_PLAY_ANIM_UPPER_BODY = 0x2534709,
        TASK_PLAY_ANIM_WITH_ADVANCED_FLAGS = 0x30BA2716,
        TASK_PLAY_ANIM_WITH_FLAGS = 0x75533E74,
        TASK_PLAY_ANIM_WITH_FLAGS_AND_START_PHASE = 0x1A122D03,
        TASK_PUT_CHAR_DIRECTLY_INTO_COVER = 0x1FDD4860,
        TASK_SAY = 0x4C624B9B,
        TASK_SCRATCH_HEAD = 0xED625C16,
        TASK_SEEK_COVER_FROM_PED = 0x2D9C3D5E,
        TASK_SEEK_COVER_FROM_POS = 0x2BDF7B7E,
        TASK_SEEK_COVER_TO_COORDS = 0x142F31EF,
        TASK_SEEK_COVER_TO_COVER_POINT = 0x143358D3,
        TASK_SEEK_COVER_TO_OBJECT = 0x4DB55DF5,
        TASK_SET_CHAR_DECISION_MAKER = 0x1CB2670D,
        TASK_SET_COMBAT_DECISION_MAKER = 0x499C0C01,
        TASK_SET_IGNORE_WEAPON_RANGE_FLAG = 0x6CE277E7,
        TASK_SHAKE_FIST = 0xF7F3837,
        TASK_SHIMMY = 0x53230256,
        TASK_SHIMMY_CLIMB_UP = 0x36AD6480,
        TASK_SHIMMY_IN_DIRECTION = 0x7B1A5333,
        TASK_SHIMMY_LET_GO = 0x1AA32729,
        TASK_SHOOT_AT_CHAR = 0x8022967,
        TASK_SHOOT_AT_COORD = 0x705231A9,
        TASK_SHUFFLE_TO_NEXT_CAR_SEAT = 0x11D360D,
        TASK_SIT_DOWN = 0x264C5448,
        TASK_SIT_DOWN_INSTANTLY = 0x6CC1560F,
        TASK_SIT_DOWN_ON_NEAREST_OBJECT = 0x725654F4,
        TASK_SIT_DOWN_ON_OBJECT = 0x515C3218,
        TASK_SIT_DOWN_ON_SEAT = 0x2CBE4DAF,
        TASK_SIT_DOWN_PLAY_ANIM = 0x6B5500A5,
        TASK_SMART_FLEE_CHAR = 0x1880639C,
        TASK_SMART_FLEE_CHAR_PREFERRING_PAVEMENTS = 0x57AC66E9,
        TASK_SMART_FLEE_POINT = 0x7381337A,
        TASK_SMART_FLEE_POINT_PREFERRING_PAVEMENTS = 0x3CEB6C7B,
        TASK_SPACE_SHIP_GO_TO_COORD = 0x2960330A,
        TASK_STAND_GUARD = 0x59523479,
        TASK_STAND_STILL = 0x524C4CB5,
        TASK_START_SCENARIO_AT_POSITION = 0xF296C2E,
        TASK_START_SCENARIO_IN_PLACE = 0x261F18A3,
        TASK_SWAP_WEAPON = 0x72AE63C8,
        TASK_SWIM_TO_COORD = 0x98D5DA6,
        TASK_TIRED = 0x702041F2,
        TASK_TOGGLE_DUCK = 0x319E3A87,
        TASK_TOGGLE_PED_THREAT_SCANNER = 0x5D515C4D,
        TASK_TURN_CHAR_TO_FACE_CHAR = 0xA462B7A,
        TASK_TURN_CHAR_TO_FACE_COORD = 0x51517B11,
        TASK_USE_MOBILE_PHONE = 0x417F6EBD,
        TASK_USE_MOBILE_PHONE_TIMED = 0xBAD1A62,
        TASK_USE_NEAREST_SCENARIO_TO_POS = 0x743F30B3,
        TASK_USE_NEAREST_SCENARIO_TO_POS_WARP = 0x47787A40,
        TASK_WALK_ALONGSIDE_CHAR = 0x2A70E5D1,
        TASK_WANDER_STANDARD = 0x43F5151F,
        TASK_WARP_CHAR_INTO_CAR_AS_DRIVER = 0x6F363A21,
        TASK_WARP_CHAR_INTO_CAR_AS_PASSENGER = 0x6B30CBF,
        TASK_WEAPON_ROLL = 0x123B2716,
        TELEPORT_NETWORK_PLAYER = 0x2EE310C5,
        TELEPORT_PLAYER_NEAR_BUS = 0xA48F307E,
        TELL_NET_PLAYER_TO_START_PLAYING = 0x465D424D,
        TERMINATE_ALL_SCRIPTS_FOR_NETWORK_GAME = 0x2CEA47E9,
        TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME = 0x72452672,
        TERMINATE_THIS_SCRIPT = 0x2BCD1ECA,
        THIS_SCRIPT_IS_SAFE_FOR_NETWORK_GAME = 0x63AB65DC,
        THIS_SCRIPT_SHOULD_BE_SAVED = 0x48573CF7,
        TIMERA = 0x75706300,
        TIMERB = 0x62984AB7,
        TIMERC = 0x1BF55D6F,
        TIMESTEP = 0x35694DDC,
        TIMESTEPUNWARPED = 0x49283645,
        TOGGLE_CHAR_DUCKING = 0x265544F9,
        TOGGLE_TOPLEVEL_SPRITE = 0x51643697,
        TO_FLOAT = 0x259E305F,
        TRAIN_LEAVE_STATION = 0x37890B14,
        TRIGGER_LOADING_MUSIC_ON_NEXT_FADE = 0x1C4B1189,
        TRIGGER_MISSION_COMPLETE_AUDIO = 0x4BAF0213,
        TRIGGER_POLICE_REPORT = 0x78D01893,
        TRIGGER_PTFX = 0x21C44026,
        TRIGGER_PTFX_ON_OBJ = 0x50307F63,
        TRIGGER_PTFX_ON_OBJ_BONE = 0x3A2A77F9,
        TRIGGER_PTFX_ON_PED = 0xA76502F,
        TRIGGER_PTFX_ON_PED_BONE = 0x7D3C3C9D,
        TRIGGER_PTFX_ON_VEH = 0x3C7B6092,
        TRIGGER_VEH_ALARM = 0x5E5047AC,
        TRIGGER_VIGILANTE_CRIME = 0x195D582E,
        TURN_CAR_TO_FACE_COORD = 0x16184716,
        TURN_OFF_RADIOHUD_IN_LOBBY = 0x4ED6764C,
        TURN_OFF_VEHICLE_EXTRA = 0x5966824,
        TURN_ON_RADIOHUD_IN_LOBBY = 0x331411D9,
        UNATTACH_CAM = 0x278305AE,
        UNFREEZE_RADIO_STATION = 0x3E5B7E59,
        UNINHERIT_CAM_ROLL = 0x38AD2830,
        UNLOAD_TEXT_FONT = 0x3E0229EB,
        UNLOCK_GENERIC_NEWS_STORY = 0x6BE0DD3,
        UNLOCK_LAZLOW_STATION = 0x7B6F4B91,
        UNLOCK_MISSION_NEWS_STORY = 0x2F0718CA,
        UNLOCK_RAGDOLL = 0x2F2F51E9,
        UNMARK_ALL_ROAD_NODES_AS_DONT_WANDER = 0x2BBA7BF0,
        UNOBFUSCATE_INT = 0x118D1AA3,
        UNOBFUSCATE_INT_ARRAY = 0x6314421A,
        UNOBFUSCATE_STRING = 0x2186777E,
        UNPAUSE_GAME = 0x2A783A43,
        UNPAUSE_PLAYBACK_RECORDED_CAR = 0x361A01AD,
        UNPAUSE_RADIO = 0x78F7286F,
        UNPOINT_CAM = 0x212B4014,
        UNREGISTER_SCRIPT_WITH_AUDIO = 0x698F762E,
        UNSET_CHAR_MELEE_MOVEMENT_CONSTAINT_BOX = 0x3AC90796,
        UPDATE_LOAD_SCENE = 0x513D68DB,
        UPDATE_NETWORK_RELATIVE_SCORE = 0x384E3F3A,
        UPDATE_NETWORK_STATISTICS = 0x70B45E01,
        UPDATE_PED_PHYSICAL_ATTACHMENT_POSITION = 0x10A62603,
        UPDATE_PICKUP_MONEY_PER_DAY = 0xE2A80711,
        UPDATE_PLAYER_LCPD_SCORE = 0x49EC44CA,
        UPDATE_PTFX_OFFSETS = 0x45472E9D,
        UPDATE_PTFX_TINT = 0x42FC2C31,
        USE_DETONATOR = 0x29742C66,
        USE_MASK = 0x6A9B79D8,
        USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR = 0x759B6BBE,
        USE_PREVIOUS_FONT_SETTINGS = 0x36FC5CFB,
        USING_STANDARD_CONTROLS = 0x5F4571E5,
        VDIST = 0x4674049B,
        VDIST2 = 0x69AE0805,
        VEHICLE_CAN_BE_TARGETTED_BY_HS_MISSILE = 0x27607F64,
        VEHICLE_DOES_PROVIDE_COVER = 0xC4F5021,
        VMAG = 0x405B02B7,
        VMAG2 = 0x787206F8,
        WAIT = 0x266716AC,
        WAITUNPAUSED = 0x3F0434E5,
        WAITUNWARPED = 0x771A298A,
        WANTED_STARS_ARE_FLASHING = 0x746EDF,
        WARP_CHAR_FROM_CAR_TO_CAR = 0x3AE77439,
        WARP_CHAR_FROM_CAR_TO_COORD = 0x6A77506A,
        WARP_CHAR_INTO_CAR = 0x73D3504A,
        WARP_CHAR_INTO_CAR_AS_PASSENGER = 0x172376FE,
        WASH_VEHICLE_TEXTURES = 0x69491CFA,
        WAS_CUTSCENE_SKIPPED = 0x18F01E80,
        WAS_PED_KILLED_BY_HEADSHOT = 0x84F7B9F,
        WAS_PED_SKELETON_UPDATED = 0x3E8443E0,
        WHAT_WILL_PLAYER_PICKUP = 0x2F9B0583,
        WINCH_CAN_PICK_OBJECT_UP = 0x73246FC0,
        WRITE_LOBBY_PREFERENCE = 0x10431377,
    };

public:
    static inline auto AbortAllGarageActivity() { return NativeInvoke::Invoke<0, std::to_underlying(NativeHashes::ABORT_ALL_GARAGE_ACTIVITY), void>(); }
    static inline auto AbortScriptedConversation(bool abort) { return NativeInvoke::Invoke<1, std::to_underlying(NativeHashes::ABORT_SCRIPTED_CONVERSATION), int32_t>(abort); }
    static inline auto Absf(float value) { return NativeInvoke::Invoke<2, std::to_underlying(NativeHashes::ABSF), float>(value); }
    static inline auto Absi(float value) { return NativeInvoke::Invoke<3, std::to_underlying(NativeHashes::ABSI), float>(value); }
    static inline auto Acos(float a1) { return NativeInvoke::Invoke<4, std::to_underlying(NativeHashes::ACOS), float>(a1); }
    static inline auto ActivateCheat(uint32_t cheat) { return NativeInvoke::Invoke<5, std::to_underlying(NativeHashes::ACTIVATE_CHEAT), void>(cheat); }
    static inline auto ActivateDamageTrackerOnNetworkId(Any a1, Any a2) { return NativeInvoke::Invoke<6, std::to_underlying(NativeHashes::ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID), void>(a1, a2); }
    static inline auto ActivateFrontend() { return NativeInvoke::Invoke<7, std::to_underlying(NativeHashes::ACTIVATE_FRONTEND), void>(); }
    static inline auto ActivateHeliSpeedCheat(Vehicle heli, int32_t cheat) { return NativeInvoke::Invoke<8, std::to_underlying(NativeHashes::ACTIVATE_HELI_SPEED_CHEAT), void>(heli, cheat); }
    static inline auto ActivateInterior(Interior interior, bool unknownTrue) { return NativeInvoke::Invoke<9, std::to_underlying(NativeHashes::ACTIVATE_INTERIOR), void>(interior, unknownTrue); }
    static inline auto ActivateMenuItem(int32_t menuid, int32_t item, bool activate) { return NativeInvoke::Invoke<10, std::to_underlying(NativeHashes::ACTIVATE_MENU_ITEM), void>(menuid, item, activate); }
    static inline auto ActivateNetworkSettingsMenu() { return NativeInvoke::Invoke<11, std::to_underlying(NativeHashes::ACTIVATE_NETWORK_SETTINGS_MENU), void>(); }
    static inline auto ActivateReplayMenu() { return NativeInvoke::Invoke<12, std::to_underlying(NativeHashes::ACTIVATE_REPLAY_MENU), void>(); }
    static inline auto ActivateSaveMenu() { return NativeInvoke::Invoke<13, std::to_underlying(NativeHashes::ACTIVATE_SAVE_MENU), void>(); }
    static inline auto ActivateScriptPopulationZone() { return NativeInvoke::Invoke<14, std::to_underlying(NativeHashes::ACTIVATE_SCRIPT_POPULATION_ZONE), void>(); }
    static inline auto ActivateScriptedCams(bool a1, bool a2) { return NativeInvoke::Invoke<15, std::to_underlying(NativeHashes::ACTIVATE_SCRIPTED_CAMS), void>(a1, a2); }
    static inline auto ActivateVectorMap() { return NativeInvoke::Invoke<16, std::to_underlying(NativeHashes::ACTIVATE_VECTOR_MAP), Any>(); }
    static inline auto ActivateViewport(int32_t viewportid, bool activate) { return NativeInvoke::Invoke<17, std::to_underlying(NativeHashes::ACTIVATE_VIEWPORT), void>(viewportid, activate); }
    static inline auto AddAdditionalPopulationModel(uint32_t model) { return NativeInvoke::Invoke<18, std::to_underlying(NativeHashes::ADD_ADDITIONAL_POPULATION_MODEL), void>(model); }
    static inline auto AddAmmoToChar(Ped ped, uint32_t weapon, uint32_t amount) { return NativeInvoke::Invoke<19, std::to_underlying(NativeHashes::ADD_AMMO_TO_CHAR), void>(ped, weapon, amount); }
    static inline auto AddAreaToNetworkRestartNodeGroupMapping() { return NativeInvoke::Invoke<20, std::to_underlying(NativeHashes::ADD_AREA_TO_NETWORK_RESTART_NODE_GROUP_MAPPING), Any>(); }
    static inline auto AddArmourToChar(Ped ped, uint32_t amount) { return NativeInvoke::Invoke<21, std::to_underlying(NativeHashes::ADD_ARMOUR_TO_CHAR), void>(ped, amount); }
    static inline auto AddBlipForCar(Vehicle vehicle, Blip* pBlip) { return NativeInvoke::Invoke<22, std::to_underlying(NativeHashes::ADD_BLIP_FOR_CAR), void>(vehicle, pBlip); }
    static inline auto AddBlipForChar(Ped ped, Blip* pBlip) { return NativeInvoke::Invoke<23, std::to_underlying(NativeHashes::ADD_BLIP_FOR_CHAR), void>(ped, pBlip); }
    static inline auto AddBlipForContact(float x, float y, float z, Blip* pBlip) { return NativeInvoke::Invoke<24, std::to_underlying(NativeHashes::ADD_BLIP_FOR_CONTACT), void>(x, y, z, pBlip); }
    static inline auto AddBlipForCoord(float x, float y, float z, Blip* pBlip) { return NativeInvoke::Invoke<25, std::to_underlying(NativeHashes::ADD_BLIP_FOR_COORD), void>(x, y, z, pBlip); }
    static inline auto AddBlipForGangTerritory(float x0, float y0, float x1, float y1, int32_t colour, int32_t* blip) { return NativeInvoke::Invoke<26, std::to_underlying(NativeHashes::ADD_BLIP_FOR_GANG_TERRITORY), void>(x0, y0, x1, y1, colour, blip); }
    static inline auto AddBlipForObject(Object obj, Blip* pBlip) { return NativeInvoke::Invoke<27, std::to_underlying(NativeHashes::ADD_BLIP_FOR_OBJECT), void>(obj, pBlip); }
    static inline auto AddBlipForPickup(Pickup pickup, Blip* pBlip) { return NativeInvoke::Invoke<28, std::to_underlying(NativeHashes::ADD_BLIP_FOR_PICKUP), void>(pickup, pBlip); }
    static inline auto AddBlipForRadius(float x, float y, float z, int32_t type, int32_t* blip) { return NativeInvoke::Invoke<29, std::to_underlying(NativeHashes::ADD_BLIP_FOR_RADIUS), void>(x, y, z, type, blip); }
    static inline auto AddBlipForWeapon(float x, float y, float z, int32_t* blip) { return NativeInvoke::Invoke<30, std::to_underlying(NativeHashes::ADD_BLIP_FOR_WEAPON), void>(x, y, z, blip); }
    static inline auto AddCamSplineNode(int32_t cam, int32_t camnode) { return NativeInvoke::Invoke<31, std::to_underlying(NativeHashes::ADD_CAM_SPLINE_NODE), void>(cam, camnode); }
    static inline auto AddCarToMissionDeletionList(Car car) { return NativeInvoke::Invoke<32, std::to_underlying(NativeHashes::ADD_CAR_TO_MISSION_DELETION_LIST), void>(car); }
    static inline auto AddCharDecisionMakerEventResponse(DecisionMaker dm, uint32_t eventid, uint32_t responseid, float param1, float param2, float param3, float param4, uint32_t unknown0_1, uint32_t unknown1_1) { return NativeInvoke::Invoke<33, std::to_underlying(NativeHashes::ADD_CHAR_DECISION_MAKER_EVENT_RESPONSE), void>(dm, eventid, responseid, param1, param2, param3, param4, unknown0_1, unknown1_1); }
    static inline auto AddCombatDecisionMakerEventResponse(DecisionMaker dm, uint32_t eventid, uint32_t responseid, float param1, float param2, float param3, float param4, uint32_t unknown0_1, uint32_t unknown1_1) { return NativeInvoke::Invoke<34, std::to_underlying(NativeHashes::ADD_COMBAT_DECISION_MAKER_EVENT_RESPONSE), void>(dm, eventid, responseid, param1, param2, param3, param4, unknown0_1, unknown1_1); }
    static inline auto AddCoverBlockingArea(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<35, std::to_underlying(NativeHashes::ADD_COVER_BLOCKING_AREA), void>(a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto AddCoverPoint(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<36, std::to_underlying(NativeHashes::ADD_COVER_POINT), void>(a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto AddExplosion(float x, float y, float z, ExplosionType exptype, float radius, bool playsound, bool novisual, float camshake) { return NativeInvoke::Invoke<37, std::to_underlying(NativeHashes::ADD_EXPLOSION), void>(x, y, z, exptype, radius, playsound, novisual, camshake); }
    static inline auto AddExplosionWithDirection() { return NativeInvoke::Invoke<38, std::to_underlying(NativeHashes::ADD_EXPLOSION_WITH_DIRECTION), Any>(); }
    static inline auto AddFirstNCharactersOfStringToHtmlScriptObject(int32_t htmlobj, char* str, int32_t n) { return NativeInvoke::Invoke<39, std::to_underlying(NativeHashes::ADD_FIRST_N_CHARACTERS_OF_STRING_TO_HTML_SCRIPT_OBJECT), void>(htmlobj, str, n); }
    static inline auto AddFollowNavmeshToPhoneTask(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<40, std::to_underlying(NativeHashes::ADD_FOLLOW_NAVMESH_TO_PHONE_TASK), void>(ped, a2, a3, a4); }
    static inline auto AddGroupToNetworkRestartNodeGroupList(Any a1) { return NativeInvoke::Invoke<41, std::to_underlying(NativeHashes::ADD_GROUP_TO_NETWORK_RESTART_NODE_GROUP_LIST), void>(a1); }
    static inline auto AddHospitalRestart(float x, float y, float z, float radius, int32_t islandnum) { return NativeInvoke::Invoke<42, std::to_underlying(NativeHashes::ADD_HOSPITAL_RESTART), void>(x, y, z, radius, islandnum); }
    static inline auto AddLineToConversation(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<43, std::to_underlying(NativeHashes::ADD_LINE_TO_CONVERSATION), void>(a1, a2, a3, a4, a5); }
    static inline auto AddLineToMobilePhoneCall(int32_t id, char* name, char* text) { return NativeInvoke::Invoke<44, std::to_underlying(NativeHashes::ADD_LINE_TO_MOBILE_PHONE_CALL), void>(id, name, text); }
    static inline auto AddLineToScriptedConversation(uint32_t conversation, int a2, int a3) { return NativeInvoke::Invoke<45, std::to_underlying(NativeHashes::ADD_LINE_TO_SCRIPTED_CONVERSATION), void>(conversation, a2, a3); }
    static inline auto AddNavmeshRequiredRegion(float x, float y, float z) { return NativeInvoke::Invoke<46, std::to_underlying(NativeHashes::ADD_NAVMESH_REQUIRED_REGION), int32_t>(x, y, z); }
    static inline auto AddNeededAtPosn(float x, float y, float z) { return NativeInvoke::Invoke<47, std::to_underlying(NativeHashes::ADD_NEEDED_AT_POSN), void>(x, y, z); }
    static inline auto AddNetworkRestart() { return NativeInvoke::Invoke<48, std::to_underlying(NativeHashes::ADD_NETWORK_RESTART), Any>(); }
    static inline auto AddNewConversationSpeaker(int32_t id, int a2, int32_t* a3) { return NativeInvoke::Invoke<49, std::to_underlying(NativeHashes::ADD_NEW_CONVERSATION_SPEAKER), void>(id, a2, a3); }
    static inline auto AddNewFrontendConversationSpeaker(int a1, int a2) { return NativeInvoke::Invoke<50, std::to_underlying(NativeHashes::ADD_NEW_FRONTEND_CONVERSATION_SPEAKER), void>(a1, a2); }
    static inline auto AddNextMessageToPreviousBriefs(bool add) { return NativeInvoke::Invoke<51, std::to_underlying(NativeHashes::ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS), void>(add); }
    static inline auto AddObjectToInteriorRoomByKey(Object obj, uint32_t roomKey) { return NativeInvoke::Invoke<52, std::to_underlying(NativeHashes::ADD_OBJECT_TO_INTERIOR_ROOM_BY_KEY), void>(obj, roomKey); }
    static inline auto AddObjectToInteriorRoomByName(Object obj, char* room_name) { return NativeInvoke::Invoke<53, std::to_underlying(NativeHashes::ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME), void>(obj, room_name); }
    static inline auto AddPedQueue() { return NativeInvoke::Invoke<54, std::to_underlying(NativeHashes::ADD_PED_QUEUE), Any>(); }
    static inline auto AddPedToCinematographyAi(int a1, Ped ped) { return NativeInvoke::Invoke<55, std::to_underlying(NativeHashes::ADD_PED_TO_CINEMATOGRAPHY_AI), void>(a1, ped); }
    static inline auto AddPedToMissionDeletionList(Ped ped, bool a2) { return NativeInvoke::Invoke<56, std::to_underlying(NativeHashes::ADD_PED_TO_MISSION_DELETION_LIST), void>(ped, a2); }
    static inline auto AddPickupToInteriorRoomByKey(Object pickup, uint32_t room_hash) { return NativeInvoke::Invoke<57, std::to_underlying(NativeHashes::ADD_PICKUP_TO_INTERIOR_ROOM_BY_KEY), void>(pickup, room_hash); }
    static inline auto AddPickupToInteriorRoomByName(Pickup pickup, char* roomName) { return NativeInvoke::Invoke<58, std::to_underlying(NativeHashes::ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME), void>(pickup, roomName); }
    static inline auto AddPointToGpsRaceTrack(Vector3* point) { return NativeInvoke::Invoke<59, std::to_underlying(NativeHashes::ADD_POINT_TO_GPS_RACE_TRACK), void>(point); }
    static inline auto AddPoliceRestart(float x, float y, float z, float radius, int32_t islandnum) { return NativeInvoke::Invoke<60, std::to_underlying(NativeHashes::ADD_POLICE_RESTART), void>(x, y, z, radius, islandnum); }
    static inline auto AddScenarioBlockingArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<61, std::to_underlying(NativeHashes::ADD_SCENARIO_BLOCKING_AREA), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto AddScore(Player playerIndex, int32_t score) { return NativeInvoke::Invoke<62, std::to_underlying(NativeHashes::ADD_SCORE), void>(playerIndex, score); }
    static inline auto AddSimpleBlipForPickup(Pickup pickup) { return NativeInvoke::Invoke<63, std::to_underlying(NativeHashes::ADD_SIMPLE_BLIP_FOR_PICKUP), void>(pickup); }
    static inline auto AddSpawnBlockingArea(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<64, std::to_underlying(NativeHashes::ADD_SPAWN_BLOCKING_AREA), void>(a1, a2, a3, a4); }
    static inline auto AddSpawnBlockingDisc(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<65, std::to_underlying(NativeHashes::ADD_SPAWN_BLOCKING_DISC), void>(a1, a2, a3, a4, a5); }
    static inline auto AddSphere(float x, float y, float z, float radius, uint32_t a5) { return NativeInvoke::Invoke<66, std::to_underlying(NativeHashes::ADD_SPHERE), int32_t>(x, y, z, radius, a5); }
    static inline auto AddStringToHtmlScriptObject(int32_t htmlobj, char* str) { return NativeInvoke::Invoke<67, std::to_underlying(NativeHashes::ADD_STRING_TO_HTML_SCRIPT_OBJECT), void>(htmlobj, str); }
    static inline auto AddStringToNewsScrollbar(char* str) { return NativeInvoke::Invoke<68, std::to_underlying(NativeHashes::ADD_STRING_TO_NEWS_SCROLLBAR), void>(str); }
    static inline auto AddStringWithThisTextLabelToPreviousBrief(char* gxtname) { return NativeInvoke::Invoke<69, std::to_underlying(NativeHashes::ADD_STRING_WITH_THIS_TEXT_LABEL_TO_PREVIOUS_BRIEF), void>(gxtname); }
    static inline auto AddStuckCarCheck(Car car, float stuckdif, int32_t timeout) { return NativeInvoke::Invoke<70, std::to_underlying(NativeHashes::ADD_STUCK_CAR_CHECK), void>(car, stuckdif, timeout); }
    static inline auto AddStuckCarCheckWithWarp(Car car, float stuckdif, int32_t time, bool flag0, bool flag1, bool flag2, bool flag3) { return NativeInvoke::Invoke<71, std::to_underlying(NativeHashes::ADD_STUCK_CAR_CHECK_WITH_WARP), void>(car, stuckdif, time, flag0, flag1, flag2, flag3); }
    static inline auto AddStuntJump(float x, float y, float z, float x0, float y0, float z0, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int32_t reward) { return NativeInvoke::Invoke<72, std::to_underlying(NativeHashes::ADD_STUNT_JUMP), void>(x, y, z, x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3, reward); }
    static inline auto AddTextWidget(Any a1) { return NativeInvoke::Invoke<73, std::to_underlying(NativeHashes::ADD_TEXT_WIDGET), Any>(a1); }
    static inline auto AddTickerToPreviousBriefWithUnderscore(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<74, std::to_underlying(NativeHashes::ADD_TICKER_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE), void>(a1, a2, a3, a4, a5, a6, a7); }
    static inline auto AddToHtmlScriptObject(int32_t htmlobj, char* htmlcode) { return NativeInvoke::Invoke<75, std::to_underlying(NativeHashes::ADD_TO_HTML_SCRIPT_OBJECT), void>(htmlobj, htmlcode); }
    static inline auto AddToPreviousBrief(char* gxtentry) { return NativeInvoke::Invoke<76, std::to_underlying(NativeHashes::ADD_TO_PREVIOUS_BRIEF), void>(gxtentry); }
    static inline auto AddToPreviousBriefWithUnderscore(char* gxtentry) { return NativeInvoke::Invoke<77, std::to_underlying(NativeHashes::ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE), void>(gxtentry); }
    static inline auto AddToWidgetCombo(Any a1) { return NativeInvoke::Invoke<78, std::to_underlying(NativeHashes::ADD_TO_WIDGET_COMBO), void>(a1); }
    static inline auto AddUpsidedownCarCheck(Vehicle vehicle) { return NativeInvoke::Invoke<79, std::to_underlying(NativeHashes::ADD_UPSIDEDOWN_CAR_CHECK), void>(vehicle); }
    static inline auto AddWidgetFloatReadOnly(Any a1, Any a2) { return NativeInvoke::Invoke<80, std::to_underlying(NativeHashes::ADD_WIDGET_FLOAT_READ_ONLY), Any>(a1, a2); }
    static inline auto AddWidgetFloatSlider(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<81, std::to_underlying(NativeHashes::ADD_WIDGET_FLOAT_SLIDER), Any>(a1, a2, a3, a4, a5); }
    static inline auto AddWidgetReadOnly(Any a1, Any a2) { return NativeInvoke::Invoke<82, std::to_underlying(NativeHashes::ADD_WIDGET_READ_ONLY), Any>(a1, a2); }
    static inline auto AddWidgetSlider(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<83, std::to_underlying(NativeHashes::ADD_WIDGET_SLIDER), Any>(a1, a2, a3, a4, a5); }
    static inline auto AddWidgetString(Any a1) { return NativeInvoke::Invoke<84, std::to_underlying(NativeHashes::ADD_WIDGET_STRING), Any>(a1); }
    static inline auto AddWidgetToggle(Any a1, Any a2) { return NativeInvoke::Invoke<85, std::to_underlying(NativeHashes::ADD_WIDGET_TOGGLE), Any>(a1, a2); }
    static inline auto AllocateScriptToObject(char* ScriptName, uint32_t model, int32_t unk, float radius, int32_t UnkTime) { return NativeInvoke::Invoke<86, std::to_underlying(NativeHashes::ALLOCATE_SCRIPT_TO_OBJECT), void>(ScriptName, model, unk, radius, UnkTime); }
    static inline auto AllocateScriptToRandomPed(char* ScriptName, uint32_t model, int32_t unk, bool flag) { return NativeInvoke::Invoke<87, std::to_underlying(NativeHashes::ALLOCATE_SCRIPT_TO_RANDOM_PED), void>(ScriptName, model, unk, flag); }
    static inline auto AllowAutoConversationLookats(Ped ped, bool allow) { return NativeInvoke::Invoke<88, std::to_underlying(NativeHashes::ALLOW_AUTO_CONVERSATION_LOOKATS), void>(ped, allow); }
    static inline auto AllowEmergencyServices(bool allow) { return NativeInvoke::Invoke<89, std::to_underlying(NativeHashes::ALLOW_EMERGENCY_SERVICES), void>(allow); }
    static inline auto AllowGameToPauseForStreaming(bool allow) { return NativeInvoke::Invoke<90, std::to_underlying(NativeHashes::ALLOW_GAME_TO_PAUSE_FOR_STREAMING), void>(allow); }
    static inline auto AllowGangRelationshipsToBeChangedByNextCommand(bool value) { return NativeInvoke::Invoke<91, std::to_underlying(NativeHashes::ALLOW_GANG_RELATIONSHIPS_TO_BE_CHANGED_BY_NEXT_COMMAND), void>(value); }
    static inline auto AllowLockonToFriendlyPlayers(Any a1, Any a2) { return NativeInvoke::Invoke<92, std::to_underlying(NativeHashes::ALLOW_LOCKON_TO_FRIENDLY_PLAYERS), void>(a1, a2); }
    static inline auto AllowLockonToRandomPeds(int32_t player, bool allow) { return NativeInvoke::Invoke<93, std::to_underlying(NativeHashes::ALLOW_LOCKON_TO_RANDOM_PEDS), void>(player, allow); }
    static inline auto AllowMultipleDrivebyPickups(bool allow) { return NativeInvoke::Invoke<94, std::to_underlying(NativeHashes::ALLOW_MULTIPLE_DRIVEBY_PICKUPS), void>(allow); }
    static inline auto AllowNetworkPopulationGroupCycling() { return NativeInvoke::Invoke<95, std::to_underlying(NativeHashes::ALLOW_NETWORK_POPULATION_GROUP_CYCLING), Any>(); }
    static inline auto AllowOneTimeOnlyCommandsToRun() { return NativeInvoke::Invoke<96, std::to_underlying(NativeHashes::ALLOW_ONE_TIME_ONLY_COMMANDS_TO_RUN), bool>(); }
    static inline auto AllowPlayerToCarryNonMissionObjects(Player playerIndex, bool allow) { return NativeInvoke::Invoke<97, std::to_underlying(NativeHashes::ALLOW_PLAYER_TO_CARRY_NON_MISSION_OBJECTS), void>(playerIndex, allow); }
    static inline auto AllowReactionAnims(Ped ped, bool allow) { return NativeInvoke::Invoke<98, std::to_underlying(NativeHashes::ALLOW_REACTION_ANIMS), void>(ped, allow); }
    static inline auto AllowScenarioPedsToBeReturnedByNextCommand(bool value) { return NativeInvoke::Invoke<99, std::to_underlying(NativeHashes::ALLOW_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND), void>(value); }
    static inline auto AllowStuntJumpsToTrigger(bool allow) { return NativeInvoke::Invoke<100, std::to_underlying(NativeHashes::ALLOW_STUNT_JUMPS_TO_TRIGGER), void>(allow); }
    static inline auto AllowTargetWhenInjured(Ped ped, bool allow) { return NativeInvoke::Invoke<101, std::to_underlying(NativeHashes::ALLOW_TARGET_WHEN_INJURED), void>(ped, allow); }
    static inline auto AllowThisScriptToBePaused(bool allows) { return NativeInvoke::Invoke<102, std::to_underlying(NativeHashes::ALLOW_THIS_SCRIPT_TO_BE_PAUSED), void>(allows); }
    static inline auto AlterWantedLevel(Player playerIndex, uint32_t level) { return NativeInvoke::Invoke<103, std::to_underlying(NativeHashes::ALTER_WANTED_LEVEL), void>(playerIndex, level); }
    static inline auto AlterWantedLevelNoDrop(Player playerIndex, uint32_t level) { return NativeInvoke::Invoke<104, std::to_underlying(NativeHashes::ALTER_WANTED_LEVEL_NO_DROP), void>(playerIndex, level); }
    static inline auto AlwaysUseHeadOnHornAnimWhenDeadInCar(Ped ped, bool use) { return NativeInvoke::Invoke<105, std::to_underlying(NativeHashes::ALWAYS_USE_HEAD_ON_HORN_ANIM_WHEN_DEAD_IN_CAR), void>(ped, use); }
    static inline auto AmbientAudioBankNoLongerNeeded() { return NativeInvoke::Invoke<106, std::to_underlying(NativeHashes::AMBIENT_AUDIO_BANK_NO_LONGER_NEEDED), void>(); }
    static inline auto AnchorBoat(Vehicle boat, bool anchor) { return NativeInvoke::Invoke<107, std::to_underlying(NativeHashes::ANCHOR_BOAT), void>(boat, anchor); }
    static inline auto AnchorObject(Object obj, bool anchor, uint32_t flags) { return NativeInvoke::Invoke<108, std::to_underlying(NativeHashes::ANCHOR_OBJECT), void>(obj, anchor, flags); }
    static inline auto ApplyForceToCar(Vehicle vehicle, uint32_t unknown0_3, float x, float y, float z, float spinX, float spinY, float spinZ, uint32_t unknown4_0, uint32_t unknown5_1, uint32_t unknown6_1, uint32_t unknown7_1) { return NativeInvoke::Invoke<109, std::to_underlying(NativeHashes::APPLY_FORCE_TO_CAR), void>(vehicle, unknown0_3, x, y, z, spinX, spinY, spinZ, unknown4_0, unknown5_1, unknown6_1, unknown7_1); }
    static inline auto ApplyForceToObject(Object obj, uint32_t uk0_3, float pX, float pY, float pZ, float spinX, float spinY, float spinZ, uint32_t uk4_0, uint32_t uk5_1, uint32_t uk6_1, uint32_t uk7_1) { return NativeInvoke::Invoke<110, std::to_underlying(NativeHashes::APPLY_FORCE_TO_OBJECT), void>(obj, uk0_3, pX, pY, pZ, spinX, spinY, spinZ, uk4_0, uk5_1, uk6_1, uk7_1); }
    static inline auto ApplyForceToPed(Ped ped, uint32_t unknown0_3, float x, float y, float z, float spinX, float spinY, float spinZ, uint32_t unknown4_0, uint32_t unknown5_1, uint32_t unknown6_1, uint32_t unknown7_1) { return NativeInvoke::Invoke<111, std::to_underlying(NativeHashes::APPLY_FORCE_TO_PED), void>(ped, unknown0_3, x, y, z, spinX, spinY, spinZ, unknown4_0, unknown5_1, unknown6_1, unknown7_1); }
    static inline auto ApplyWantedLevelChangeNow(Player playerIndex) { return NativeInvoke::Invoke<112, std::to_underlying(NativeHashes::APPLY_WANTED_LEVEL_CHANGE_NOW), void>(playerIndex); }
    static inline auto AreAllNavmeshRegionsLoaded() { return NativeInvoke::Invoke<113, std::to_underlying(NativeHashes::ARE_ALL_NAVMESH_REGIONS_LOADED), bool>(); }
    static inline auto AreAnyCharsNearChar(Ped ped, float radius) { return NativeInvoke::Invoke<114, std::to_underlying(NativeHashes::ARE_ANY_CHARS_NEAR_CHAR), bool>(ped, radius); }
    static inline auto AreCreditsFinished() { return NativeInvoke::Invoke<115, std::to_underlying(NativeHashes::ARE_CREDITS_FINISHED), bool>(); }
    static inline auto AreEnemyPedsInArea(Ped ped, float x, float y, float z, float radius) { return NativeInvoke::Invoke<116, std::to_underlying(NativeHashes::ARE_ENEMY_PEDS_IN_AREA), bool>(ped, x, y, z, radius); }
    static inline auto AreTaxiLightsOn(Vehicle vehicle) { return NativeInvoke::Invoke<117, std::to_underlying(NativeHashes::ARE_TAXI_LIGHTS_ON), bool>(vehicle); }
    static inline auto AreWidescreenBordersActive() { return NativeInvoke::Invoke<118, std::to_underlying(NativeHashes::ARE_WIDESCREEN_BORDERS_ACTIVE), bool>(); }
    static inline auto AsciiIntToString(int32_t ascii) { return NativeInvoke::Invoke<119, std::to_underlying(NativeHashes::ASCII_INT_TO_STRING), char*>(ascii); }
    static inline auto Asin(float value) { return NativeInvoke::Invoke<120, std::to_underlying(NativeHashes::ASIN), float>(value); }
    static inline auto Atan(float value) { return NativeInvoke::Invoke<121, std::to_underlying(NativeHashes::ATAN), float>(value); }
    static inline auto Atan2(float a1, float a2) { return NativeInvoke::Invoke<122, std::to_underlying(NativeHashes::ATAN2), float>(a1, a2); }
    static inline auto AttachAnimsToModel(uint32_t model, char* anims) { return NativeInvoke::Invoke<123, std::to_underlying(NativeHashes::ATTACH_ANIMS_TO_MODEL), void>(model, anims); }
    static inline auto AttachCamToObject(int32_t cam, Object obj) { return NativeInvoke::Invoke<124, std::to_underlying(NativeHashes::ATTACH_CAM_TO_OBJECT), void>(cam, obj); }
    static inline auto AttachCamToPed(int32_t cam, Ped ped) { return NativeInvoke::Invoke<125, std::to_underlying(NativeHashes::ATTACH_CAM_TO_PED), void>(cam, ped); }
    static inline auto AttachCamToVehicle(int32_t cam, Vehicle veh) { return NativeInvoke::Invoke<126, std::to_underlying(NativeHashes::ATTACH_CAM_TO_VEHICLE), void>(cam, veh); }
    static inline auto AttachCamToViewport(int32_t cam, int32_t viewportid) { return NativeInvoke::Invoke<127, std::to_underlying(NativeHashes::ATTACH_CAM_TO_VIEWPORT), void>(cam, viewportid); }
    static inline auto AttachCarToCar(Car car0, Car car1, int a3, float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<128, std::to_underlying(NativeHashes::ATTACH_CAR_TO_CAR), void>(car0, car1, a3, x0, y0, z0, x1, y1, z1); }
    static inline auto AttachCarToCarPhysically() { return NativeInvoke::Invoke<129, std::to_underlying(NativeHashes::ATTACH_CAR_TO_CAR_PHYSICALLY), Any>(); }
    static inline auto AttachCarToObject(Car car, Object obj, float a3, float a4, float a5, float a6, float a7, float a8, float a9) { return NativeInvoke::Invoke<130, std::to_underlying(NativeHashes::ATTACH_CAR_TO_OBJECT), void>(car, obj, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto AttachCarToObjectPhysically() { return NativeInvoke::Invoke<131, std::to_underlying(NativeHashes::ATTACH_CAR_TO_OBJECT_PHYSICALLY), Any>(); }
    static inline auto AttachObjectToCar(Object obj, Vehicle v, uint32_t unknown0_0, float pX, float pY, float pZ, float rX, float rY, float rZ) { return NativeInvoke::Invoke<132, std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_CAR), void>(obj, v, unknown0_0, pX, pY, pZ, rX, rY, rZ); }
    static inline auto AttachObjectToCarPhysically(Object obj, Car car, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12, Any a13, Any a14, bool flag) { return NativeInvoke::Invoke<133, std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_CAR_PHYSICALLY), void>(obj, car, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, flag); }
    static inline auto AttachObjectToObject(Object obj0, Object obj1_attach_to, int a3, float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<134, std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_OBJECT), void>(obj0, obj1_attach_to, a3, x0, y0, z0, x1, y1, z1); }
    static inline auto AttachObjectToObjectPhysically() { return NativeInvoke::Invoke<135, std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_OBJECT_PHYSICALLY), Any>(); }
    static inline auto AttachObjectToPed(Object obj, Ped c, uint32_t bone, float pX, float pY, float pZ, float rX, float rY, float rZ, uint32_t unknown1_0) { return NativeInvoke::Invoke<136, std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_PED), void>(obj, c, bone, pX, pY, pZ, rX, rY, rZ, unknown1_0); }
    static inline auto AttachObjectToPedPhysically() { return NativeInvoke::Invoke<137, std::to_underlying(NativeHashes::ATTACH_OBJECT_TO_PED_PHYSICALLY), Any>(); }
    static inline auto AttachParachuteModelToPlayer(Ped ped, Object obj) { return NativeInvoke::Invoke<138, std::to_underlying(NativeHashes::ATTACH_PARACHUTE_MODEL_TO_PLAYER), void>(ped, obj); }
    static inline auto AttachPedToCar(Ped ped, Vehicle vehicle, uint32_t unknown0_0, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, bool a9, bool a10) { return NativeInvoke::Invoke<139, std::to_underlying(NativeHashes::ATTACH_PED_TO_CAR), void>(ped, vehicle, unknown0_0, offsetX, offsetY, offsetZ, rotX, rotY, a9, a10); }
    static inline auto AttachPedToCar2() { return NativeInvoke::Invoke<140, std::to_underlying(NativeHashes::ATTACH_PED_TO_CAR2), Any>(); }
    static inline auto AttachPedToCarPhysically(Ped ped, Car car, int32_t pedbone, float x, float y, float z, float angle, float a8, bool a9, bool a10) { return NativeInvoke::Invoke<141, std::to_underlying(NativeHashes::ATTACH_PED_TO_CAR_PHYSICALLY), void>(ped, car, pedbone, x, y, z, angle, a8, a9, a10); }
    static inline auto AttachPedToObject(Ped ped, Object obj, int32_t pedbone, float x, float y, float z, float angle, float a8, bool a9, bool a10) { return NativeInvoke::Invoke<142, std::to_underlying(NativeHashes::ATTACH_PED_TO_OBJECT), void>(ped, obj, pedbone, x, y, z, angle, a8, a9, a10); }
    static inline auto AttachPedToObjectPhysically(Ped ped, Object obj, int32_t pedbone, float x, float y, float z, float angle, float a8, bool a9, bool a10) { return NativeInvoke::Invoke<143, std::to_underlying(NativeHashes::ATTACH_PED_TO_OBJECT_PHYSICALLY), void>(ped, obj, pedbone, x, y, z, angle, a8, a9, a10); }
    static inline auto AttachPedToShimmyEdge(Ped ped, float x, float y, float z, float a5) { return NativeInvoke::Invoke<144, std::to_underlying(NativeHashes::ATTACH_PED_TO_SHIMMY_EDGE), void>(ped, x, y, z, a5); }
    static inline auto AttachPedToWorldPhysically() { return NativeInvoke::Invoke<145, std::to_underlying(NativeHashes::ATTACH_PED_TO_WORLD_PHYSICALLY), Any>(); }
    static inline auto AwardAchievement(uint32_t achievement) { return NativeInvoke::Invoke<146, std::to_underlying(NativeHashes::AWARD_ACHIEVEMENT), Any>(achievement); }
    static inline auto AwardPlayerMissionRespect(float respect) { return NativeInvoke::Invoke<147, std::to_underlying(NativeHashes::AWARD_PLAYER_MISSION_RESPECT), void>(respect); }
    static inline auto BeginCamCommands(int32_t* a1) { return NativeInvoke::Invoke<148, std::to_underlying(NativeHashes::BEGIN_CAM_COMMANDS), void>(a1); }
    static inline auto BeginCharSearchCriteria() { return NativeInvoke::Invoke<149, std::to_underlying(NativeHashes::BEGIN_CHAR_SEARCH_CRITERIA), void>(); }
    static inline auto BeginPedQueueMembershipList() { return NativeInvoke::Invoke<150, std::to_underlying(NativeHashes::BEGIN_PED_QUEUE_MEMBERSHIP_LIST), Any>(); }
    static inline auto BlendFromNmWithAnim(Ped ped, char* AnimName0, char* AnimName1, int a4, float x, float y, float z) { return NativeInvoke::Invoke<151, std::to_underlying(NativeHashes::BLEND_FROM_NM_WITH_ANIM), void>(ped, AnimName0, AnimName1, a4, x, y, z); }
    static inline auto BlendOutCharMoveAnims(Ped ped) { return NativeInvoke::Invoke<152, std::to_underlying(NativeHashes::BLEND_OUT_CHAR_MOVE_ANIMS), void>(ped); }
    static inline auto BlockCharAmbientAnims(Ped ped, bool block) { return NativeInvoke::Invoke<153, std::to_underlying(NativeHashes::BLOCK_CHAR_AMBIENT_ANIMS), void>(ped, block); }
    static inline auto BlockCharGestureAnims(Ped ped, bool value) { return NativeInvoke::Invoke<154, std::to_underlying(NativeHashes::BLOCK_CHAR_GESTURE_ANIMS), void>(ped, value); }
    static inline auto BlockCharHeadIk(Ped ped, bool block) { return NativeInvoke::Invoke<155, std::to_underlying(NativeHashes::BLOCK_CHAR_HEAD_IK), void>(ped, block); }
    static inline auto BlockCharVisemeAnims(Ped ped, bool block) { return NativeInvoke::Invoke<156, std::to_underlying(NativeHashes::BLOCK_CHAR_VISEME_ANIMS), void>(ped, block); }
    static inline auto BlockCoweringInCover(Ped ped, bool set) { return NativeInvoke::Invoke<157, std::to_underlying(NativeHashes::BLOCK_COWERING_IN_COVER), void>(ped, set); }
    static inline auto BlockPedWeaponSwitching(Ped ped, bool value) { return NativeInvoke::Invoke<158, std::to_underlying(NativeHashes::BLOCK_PED_WEAPON_SWITCHING), void>(ped, value); }
    static inline auto BlockPeekingInCover(Ped ped, bool set) { return NativeInvoke::Invoke<159, std::to_underlying(NativeHashes::BLOCK_PEEKING_IN_COVER), void>(ped, set); }
    static inline auto BlockStatsMenuActions(int32_t player) { return NativeInvoke::Invoke<160, std::to_underlying(NativeHashes::BLOCK_STATS_MENU_ACTIONS), void>(player); }
    static inline auto BreakCarDoor(Vehicle vehicle, uint32_t door, bool unknownFalse) { return NativeInvoke::Invoke<161, std::to_underlying(NativeHashes::BREAK_CAR_DOOR), void>(vehicle, door, unknownFalse); }
    static inline auto Breakpoint() { return NativeInvoke::Invoke<162, std::to_underlying(NativeHashes::BREAKPOINT), Any>(); }
    static inline auto BurstCarTyre(Vehicle vehicle, uint32_t tyre) { return NativeInvoke::Invoke<163, std::to_underlying(NativeHashes::BURST_CAR_TYRE), void>(vehicle, tyre); }
    static inline auto CamSetInterpStateSrc(int32_t cam, int a2) { return NativeInvoke::Invoke<164, std::to_underlying(NativeHashes::CAM_SET_INTERP_STATE_SRC), void>(cam, a2); }
    static inline auto ClearCharDecisionMakerEventResponse(DecisionMaker dm, uint32_t eventid) { return NativeInvoke::Invoke<165, std::to_underlying(NativeHashes::CLEAR_CHAR_DECISION_MAKER_EVENT_RESPONSE), void>(dm, eventid); }
    static inline auto ClearCombatDecisionMakerEventResponse(DecisionMaker dm, uint32_t eventid) { return NativeInvoke::Invoke<166, std::to_underlying(NativeHashes::CLEAR_COMBAT_DECISION_MAKER_EVENT_RESPONSE), void>(dm, eventid); }
    static inline auto ClearGrouPDecisionMakerEventResponse(DecisionMaker dm, uint32_t eventid) { return NativeInvoke::Invoke<167, std::to_underlying(NativeHashes::CLEAR_GROUP_DECISION_MAKER_EVENT_RESPONSE), void>(dm, eventid); }
    static inline auto CalculateChecksum(Any a1, Any a2) { return NativeInvoke::Invoke<168, std::to_underlying(NativeHashes::CALCULATE_CHECKSUM), Any>(a1, a2); }
    static inline auto CalculateFurthestNetworkRestartNodes() { return NativeInvoke::Invoke<169, std::to_underlying(NativeHashes::CALCULATE_FURTHEST_NETWORK_RESTART_NODES), Any>(); }
    static inline auto CalculateTravelDistanceBetweenNodes(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<170, std::to_underlying(NativeHashes::CALCULATE_TRAVEL_DISTANCE_BETWEEN_NODES), float>(x0, y0, z0, x1, y1, z1); }
    static inline auto CamIsSphereVisible(Camera camera, float pX, float pY, float pZ, float radius) { return NativeInvoke::Invoke<171, std::to_underlying(NativeHashes::CAM_IS_SPHERE_VISIBLE), bool>(camera, pX, pY, pZ, radius); }
    static inline auto CamProcess(int32_t cam) { return NativeInvoke::Invoke<172, std::to_underlying(NativeHashes::CAM_PROCESS), void>(cam); }
    static inline auto CamRestore() { return NativeInvoke::Invoke<173, std::to_underlying(NativeHashes::CAM_RESTORE), void>(); }
    static inline auto CamRestoreJumpcut() { return NativeInvoke::Invoke<174, std::to_underlying(NativeHashes::CAM_RESTORE_JUMPCUT), void>(); }
    static inline auto CamSequenceClose() { return NativeInvoke::Invoke<175, std::to_underlying(NativeHashes::CAM_SEQUENCE_CLOSE), void>(); }
    static inline auto CamSequenceGetProgress(int a1, int32_t* progress) { return NativeInvoke::Invoke<176, std::to_underlying(NativeHashes::CAM_SEQUENCE_GET_PROGRESS), void>(a1, progress); }
    static inline auto CamSequenceOpen(int a1) { return NativeInvoke::Invoke<177, std::to_underlying(NativeHashes::CAM_SEQUENCE_OPEN), void>(a1); }
    static inline auto CamSequenceRemove(int a1) { return NativeInvoke::Invoke<178, std::to_underlying(NativeHashes::CAM_SEQUENCE_REMOVE), void>(a1); }
    static inline auto CamSequenceStart(int a1) { return NativeInvoke::Invoke<179, std::to_underlying(NativeHashes::CAM_SEQUENCE_START), void>(a1); }
    static inline auto CamSequenceStop(int a1) { return NativeInvoke::Invoke<180, std::to_underlying(NativeHashes::CAM_SEQUENCE_STOP), void>(a1); }
    static inline auto CamSequenceWait(int32_t cam, int32_t time) { return NativeInvoke::Invoke<181, std::to_underlying(NativeHashes::CAM_SEQUENCE_WAIT), void>(cam, time); }
    static inline auto CamSetCinematic(Vehicle veh, bool set) { return NativeInvoke::Invoke<182, std::to_underlying(NativeHashes::CAM_SET_CINEMATIC), void>(veh, set); }
    static inline auto CamSetDollyZoomLock(int32_t cam, bool set) { return NativeInvoke::Invoke<183, std::to_underlying(NativeHashes::CAM_SET_DOLLY_ZOOM_LOCK), void>(cam, set); }
    static inline auto CamSetInterpGraphPos(int32_t cam, int a2) { return NativeInvoke::Invoke<184, std::to_underlying(NativeHashes::CAM_SET_INTERP_GRAPH_POS), void>(cam, a2); }
    static inline auto CamSetInterpGraphRot(int32_t cam, int32_t val) { return NativeInvoke::Invoke<185, std::to_underlying(NativeHashes::CAM_SET_INTERP_GRAPH_ROT), void>(cam, val); }
    static inline auto CamSetInterpolationDetails(int a1) { return NativeInvoke::Invoke<186, std::to_underlying(NativeHashes::CAM_SET_INTERPOLATION_DETAILS), void>(a1); }
    static inline auto CanBeDescribedAsACar(Vehicle veh) { return NativeInvoke::Invoke<187, std::to_underlying(NativeHashes::CAN_BE_DESCRIBED_AS_A_CAR), bool>(veh); }
    static inline auto CanCharSeeDeadChar(Ped ped, Ped pednext) { return NativeInvoke::Invoke<188, std::to_underlying(NativeHashes::CAN_CHAR_SEE_DEAD_CHAR), bool>(ped, pednext); }
    static inline auto CanCreateRandomChar(bool flag0, bool flag1) { return NativeInvoke::Invoke<189, std::to_underlying(NativeHashes::CAN_CREATE_RANDOM_CHAR), bool>(flag0, flag1); }
    static inline auto CanFontBeLoaded(int32_t fontid) { return NativeInvoke::Invoke<190, std::to_underlying(NativeHashes::CAN_FONT_BE_LOADED), bool>(fontid); }
    static inline auto CanPedShimmyInDirection(Ped ped, int32_t direction) { return NativeInvoke::Invoke<191, std::to_underlying(NativeHashes::CAN_PED_SHIMMY_IN_DIRECTION), bool>(ped, direction); }
    static inline auto CanPhoneBeSeenOnScreen() { return NativeInvoke::Invoke<192, std::to_underlying(NativeHashes::CAN_PHONE_BE_SEEN_ON_SCREEN), bool>(); }
    static inline auto CanPlayerStartMission(int32_t player) { return NativeInvoke::Invoke<193, std::to_underlying(NativeHashes::CAN_PLAYER_START_MISSION), bool>(player); }
    static inline auto CanRegisterMissionEntities() { return NativeInvoke::Invoke<194, std::to_underlying(NativeHashes::CAN_REGISTER_MISSION_ENTITIES), Any>(); }
    static inline auto CanRegisterMissionObject() { return NativeInvoke::Invoke<195, std::to_underlying(NativeHashes::CAN_REGISTER_MISSION_OBJECT), Any>(); }
    static inline auto CanRegisterMissionPed() { return NativeInvoke::Invoke<196, std::to_underlying(NativeHashes::CAN_REGISTER_MISSION_PED), Any>(); }
    static inline auto CanRegisterMissionVehicle() { return NativeInvoke::Invoke<197, std::to_underlying(NativeHashes::CAN_REGISTER_MISSION_VEHICLE), Any>(); }
    static inline auto CanRenderRadiohudSpriteInMobilePhone() { return NativeInvoke::Invoke<198, std::to_underlying(NativeHashes::CAN_RENDER_RADIOHUD_SPRITE_IN_MOBILE_PHONE), Any>(); }
    static inline auto CanStartMissionPassedTune() { return NativeInvoke::Invoke<199, std::to_underlying(NativeHashes::CAN_START_MISSION_PASSED_TUNE), bool>(); }
    static inline auto CanTheStatHaveString(int32_t stat) { return NativeInvoke::Invoke<200, std::to_underlying(NativeHashes::CAN_THE_STAT_HAVE_STRING), bool>(stat); }
    static inline auto CancelCurrentlyPlayingAmbientSpeech(Ped ped) { return NativeInvoke::Invoke<201, std::to_underlying(NativeHashes::CANCEL_CURRENTLY_PLAYING_AMBIENT_SPEECH), void>(ped); }
    static inline auto CancelOverrideRestart() { return NativeInvoke::Invoke<202, std::to_underlying(NativeHashes::CANCEL_OVERRIDE_RESTART), void>(); }
    static inline auto Ceil(float value) { return NativeInvoke::Invoke<203, std::to_underlying(NativeHashes::CEIL), int32_t>(value); }
    static inline auto CellCamActivate(bool a1, bool a2) { return NativeInvoke::Invoke<204, std::to_underlying(NativeHashes::CELL_CAM_ACTIVATE), void>(a1, a2); }
    static inline auto CellCamIsCharVisible(Ped ped) { return NativeInvoke::Invoke<205, std::to_underlying(NativeHashes::CELL_CAM_IS_CHAR_VISIBLE), bool>(ped); }
    static inline auto CellCamIsCharVisibleNoFaceCheck(Ped ped) { return NativeInvoke::Invoke<206, std::to_underlying(NativeHashes::CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK), bool>(ped); }
    static inline auto CellCamSetCentrePos(float x, float y) { return NativeInvoke::Invoke<207, std::to_underlying(NativeHashes::CELL_CAM_SET_CENTRE_POS), void>(x, y); }
    static inline auto CellCamSetColourBrightness(float a1, float a2, float a3, float a4) { return NativeInvoke::Invoke<208, std::to_underlying(NativeHashes::CELL_CAM_SET_COLOUR_BRIGHTNESS), void>(a1, a2, a3, a4); }
    static inline auto CellCamSetZoom(float zoom) { return NativeInvoke::Invoke<209, std::to_underlying(NativeHashes::CELL_CAM_SET_ZOOM), void>(zoom); }
    static inline auto ChangeBlipAlpha(Blip blip, int32_t alpha) { return NativeInvoke::Invoke<210, std::to_underlying(NativeHashes::CHANGE_BLIP_ALPHA), void>(blip, alpha); }
    static inline auto ChangeBlipColour(Blip blip, ColourIndex colour) { return NativeInvoke::Invoke<211, std::to_underlying(NativeHashes::CHANGE_BLIP_COLOUR), void>(blip, colour); }
    static inline auto ChangeBlipDisplay(Blip blip, uint32_t display) { return NativeInvoke::Invoke<212, std::to_underlying(NativeHashes::CHANGE_BLIP_DISPLAY), void>(blip, display); }
    static inline auto ChangeBlipNameFromAscii(Blip blip, char* blipName) { return NativeInvoke::Invoke<213, std::to_underlying(NativeHashes::CHANGE_BLIP_NAME_FROM_ASCII), void>(blip, blipName); }
    static inline auto ChangeBlipNameFromTextFile(Blip blip, char* gxtName) { return NativeInvoke::Invoke<214, std::to_underlying(NativeHashes::CHANGE_BLIP_NAME_FROM_TEXT_FILE), void>(blip, gxtName); }
    static inline auto ChangeBlipNameToPlayerName(int32_t blip, int32_t playerid) { return NativeInvoke::Invoke<215, std::to_underlying(NativeHashes::CHANGE_BLIP_NAME_TO_PLAYER_NAME), void>(blip, playerid); }
    static inline auto ChangeBlipPriority(Blip blip, uint32_t priority) { return NativeInvoke::Invoke<216, std::to_underlying(NativeHashes::CHANGE_BLIP_PRIORITY), void>(blip, priority); }
    static inline auto ChangeBlipRotation(int32_t blip, int32_t rotation) { return NativeInvoke::Invoke<217, std::to_underlying(NativeHashes::CHANGE_BLIP_ROTATION), void>(blip, rotation); }
    static inline auto ChangeBlipScale(Blip blip, float scale) { return NativeInvoke::Invoke<218, std::to_underlying(NativeHashes::CHANGE_BLIP_SCALE), void>(blip, scale); }
    static inline auto ChangeBlipSprite(Blip blip, uint32_t sprite) { return NativeInvoke::Invoke<219, std::to_underlying(NativeHashes::CHANGE_BLIP_SPRITE), void>(blip, sprite); }
    static inline auto ChangeBlipTeamRelevance(int32_t blip, int32_t relevance) { return NativeInvoke::Invoke<220, std::to_underlying(NativeHashes::CHANGE_BLIP_TEAM_RELEVANCE), void>(blip, relevance); }
    static inline auto ChangeCarColour(Vehicle vehicle, ColourIndex colour1, ColourIndex colour2) { return NativeInvoke::Invoke<221, std::to_underlying(NativeHashes::CHANGE_CAR_COLOUR), void>(vehicle, colour1, colour2); }
    static inline auto ChangeCharSitIdleAnim(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<222, std::to_underlying(NativeHashes::CHANGE_CHAR_SIT_IDLE_ANIM), void>(ped, a2, a3, a4); }
    static inline auto ChangeGarageType(int32_t garage, int32_t type) { return NativeInvoke::Invoke<223, std::to_underlying(NativeHashes::CHANGE_GARAGE_TYPE), void>(garage, type); }
    static inline auto ChangePickupBlipColour(int32_t colour) { return NativeInvoke::Invoke<224, std::to_underlying(NativeHashes::CHANGE_PICKUP_BLIP_COLOUR), void>(colour); }
    static inline auto ChangePickupBlipDisplay(int32_t display) { return NativeInvoke::Invoke<225, std::to_underlying(NativeHashes::CHANGE_PICKUP_BLIP_DISPLAY), void>(display); }
    static inline auto ChangePickupBlipPriority(int32_t priority) { return NativeInvoke::Invoke<226, std::to_underlying(NativeHashes::CHANGE_PICKUP_BLIP_PRIORITY), void>(priority); }
    static inline auto ChangePickupBlipScale(float scale) { return NativeInvoke::Invoke<227, std::to_underlying(NativeHashes::CHANGE_PICKUP_BLIP_SCALE), void>(scale); }
    static inline auto ChangePickupBlipSprite(int32_t sprite) { return NativeInvoke::Invoke<228, std::to_underlying(NativeHashes::CHANGE_PICKUP_BLIP_SPRITE), void>(sprite); }
    static inline auto ChangePlaybackToUseAi(Car car) { return NativeInvoke::Invoke<229, std::to_underlying(NativeHashes::CHANGE_PLAYBACK_TO_USE_AI), void>(car); }
    static inline auto ChangePlayerModel(Player playerIndex, uint32_t model) { return NativeInvoke::Invoke<230, std::to_underlying(NativeHashes::CHANGE_PLAYER_MODEL), void>(playerIndex, model); }
    static inline auto ChangePlayerPhoneModel(int32_t player, uint32_t model) { return NativeInvoke::Invoke<231, std::to_underlying(NativeHashes::CHANGE_PLAYER_PHONE_MODEL), void>(player, model); }
    static inline auto ChangePlayerPhoneModelOffsets(int32_t player, float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<232, std::to_underlying(NativeHashes::CHANGE_PLAYER_PHONE_MODEL_OFFSETS), void>(player, x0, y0, z0, x1, y1, z1); }
    static inline auto ChangeTerritoryBlipScale(int32_t blip, float a2, float a3) { return NativeInvoke::Invoke<233, std::to_underlying(NativeHashes::CHANGE_TERRITORY_BLIP_SCALE), void>(blip, a2, a3); }
    static inline auto CheatHappenedRecently(int32_t cheat, int32_t time) { return NativeInvoke::Invoke<234, std::to_underlying(NativeHashes::CHEAT_HAPPENED_RECENTLY), bool>(cheat, time); }
    static inline auto CheckNmFeedback(Ped ped, int32_t id, bool a3) { return NativeInvoke::Invoke<235, std::to_underlying(NativeHashes::CHECK_NM_FEEDBACK), bool>(ped, id, a3); }
    static inline auto CheckStuckTimer(Car car, int32_t timernum, int32_t timeout) { return NativeInvoke::Invoke<236, std::to_underlying(NativeHashes::CHECK_STUCK_TIMER), bool>(car, timernum, timeout); }
    static inline auto ClanIsPending() { return NativeInvoke::Invoke<237, std::to_underlying(NativeHashes::CLAN_IS_PENDING), Any>(); }
    static inline auto ClearAdditionalText(int32_t textid, bool a2) { return NativeInvoke::Invoke<238, std::to_underlying(NativeHashes::CLEAR_ADDITIONAL_TEXT), void>(textid, a2); }
    static inline auto ClearAllCharProps(Ped ped) { return NativeInvoke::Invoke<239, std::to_underlying(NativeHashes::CLEAR_ALL_CHAR_PROPS), void>(ped); }
    static inline auto ClearAllCharRelationships(Ped ped, int32_t relgroup) { return NativeInvoke::Invoke<240, std::to_underlying(NativeHashes::CLEAR_ALL_CHAR_RELATIONSHIPS), void>(ped, relgroup); }
    static inline auto ClearAngledAreaOfCars(float x0, float y0, float z0, float x1, float y1, float z1, float radius) { return NativeInvoke::Invoke<241, std::to_underlying(NativeHashes::CLEAR_ANGLED_AREA_OF_CARS), void>(x0, y0, z0, x1, y1, z1, radius); }
    static inline auto ClearArea(float x, float y, float z, float radius, bool unknown) { return NativeInvoke::Invoke<242, std::to_underlying(NativeHashes::CLEAR_AREA), void>(x, y, z, radius, unknown); }
    static inline auto ClearAreaOfCars(float x, float y, float z, float radius) { return NativeInvoke::Invoke<243, std::to_underlying(NativeHashes::CLEAR_AREA_OF_CARS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfChars(float x, float y, float z, float radius) { return NativeInvoke::Invoke<244, std::to_underlying(NativeHashes::CLEAR_AREA_OF_CHARS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfCops(float x, float y, float z, float radius) { return NativeInvoke::Invoke<245, std::to_underlying(NativeHashes::CLEAR_AREA_OF_COPS), void>(x, y, z, radius); }
    static inline auto ClearAreaOfObjects(float x, float y, float z, float radius) { return NativeInvoke::Invoke<246, std::to_underlying(NativeHashes::CLEAR_AREA_OF_OBJECTS), void>(x, y, z, radius); }
    static inline auto ClearBit(int32_t* val, int32_t bit) { return NativeInvoke::Invoke<247, std::to_underlying(NativeHashes::CLEAR_BIT), void>(val, bit); }
    static inline auto ClearBrief() { return NativeInvoke::Invoke<248, std::to_underlying(NativeHashes::CLEAR_BRIEF), void>(); }
    static inline auto ClearCarLastDamageEntity(Vehicle vehicle) { return NativeInvoke::Invoke<249, std::to_underlying(NativeHashes::CLEAR_CAR_LAST_DAMAGE_ENTITY), void>(vehicle); }
    static inline auto ClearCarLastWeaponDamage(Vehicle vehicle) { return NativeInvoke::Invoke<250, std::to_underlying(NativeHashes::CLEAR_CAR_LAST_WEAPON_DAMAGE), void>(vehicle); }
    static inline auto ClearCharLastDamageBone(Ped ped) { return NativeInvoke::Invoke<251, std::to_underlying(NativeHashes::CLEAR_CHAR_LAST_DAMAGE_BONE), void>(ped); }
    static inline auto ClearCharLastDamageEntity(Ped ped) { return NativeInvoke::Invoke<252, std::to_underlying(NativeHashes::CLEAR_CHAR_LAST_DAMAGE_ENTITY), void>(ped); }
    static inline auto ClearCharLastWeaponDamage(Ped ped) { return NativeInvoke::Invoke<253, std::to_underlying(NativeHashes::CLEAR_CHAR_LAST_WEAPON_DAMAGE), void>(ped); }
    static inline auto ClearCharProp(Ped ped, bool unknown) { return NativeInvoke::Invoke<254, std::to_underlying(NativeHashes::CLEAR_CHAR_PROP), void>(ped, unknown); }
    static inline auto ClearCharRelationship(Ped ped, int32_t reltype, int32_t relgroup) { return NativeInvoke::Invoke<255, std::to_underlying(NativeHashes::CLEAR_CHAR_RELATIONSHIP), void>(ped, reltype, relgroup); }
    static inline auto ClearCharSecondaryTask(Ped ped) { return NativeInvoke::Invoke<256, std::to_underlying(NativeHashes::CLEAR_CHAR_SECONDARY_TASK), void>(ped); }
    static inline auto ClearCharTasks(Ped ped) { return NativeInvoke::Invoke<257, std::to_underlying(NativeHashes::CLEAR_CHAR_TASKS), void>(ped); }
    static inline auto ClearCharTasksImmediately(Ped ped) { return NativeInvoke::Invoke<258, std::to_underlying(NativeHashes::CLEAR_CHAR_TASKS_IMMEDIATELY), void>(ped); }
    static inline auto ClearCutscene() { return NativeInvoke::Invoke<259, std::to_underlying(NativeHashes::CLEAR_CUTSCENE), void>(); }
    static inline auto ClearEventPrecedence() { return NativeInvoke::Invoke<260, std::to_underlying(NativeHashes::CLEAR_EVENT_PRECEDENCE), Any>(); }
    static inline auto ClearHelp() { return NativeInvoke::Invoke<261, std::to_underlying(NativeHashes::CLEAR_HELP), void>(); }
    static inline auto ClearNamedCutscene(char* name) { return NativeInvoke::Invoke<262, std::to_underlying(NativeHashes::CLEAR_NAMED_CUTSCENE), void>(name); }
    static inline auto ClearNetworkRestartNodeGroupList() { return NativeInvoke::Invoke<263, std::to_underlying(NativeHashes::CLEAR_NETWORK_RESTART_NODE_GROUP_LIST), void>(); }
    static inline auto ClearNewsScrollbar() { return NativeInvoke::Invoke<264, std::to_underlying(NativeHashes::CLEAR_NEWS_SCROLLBAR), void>(); }
    static inline auto ClearObjectLastDamageEntity(Object obj) { return NativeInvoke::Invoke<265, std::to_underlying(NativeHashes::CLEAR_OBJECT_LAST_DAMAGE_ENTITY), void>(obj); }
    static inline auto ClearObjectLastWeaponDamage(Object obj) { return NativeInvoke::Invoke<266, std::to_underlying(NativeHashes::CLEAR_OBJECT_LAST_WEAPON_DAMAGE), void>(obj); }
    static inline auto ClearOnscreenCounter(int32_t counterid) { return NativeInvoke::Invoke<267, std::to_underlying(NativeHashes::CLEAR_ONSCREEN_COUNTER), void>(counterid); }
    static inline auto ClearOnscreenTimer(int32_t timerid) { return NativeInvoke::Invoke<268, std::to_underlying(NativeHashes::CLEAR_ONSCREEN_TIMER), void>(timerid); }
    static inline auto ClearPedNonCreationArea() { return NativeInvoke::Invoke<269, std::to_underlying(NativeHashes::CLEAR_PED_NON_CREATION_AREA), void>(); }
    static inline auto ClearPedNonRemovalArea() { return NativeInvoke::Invoke<270, std::to_underlying(NativeHashes::CLEAR_PED_NON_REMOVAL_AREA), void>(); }
    static inline auto ClearPlayerHasDamagedAtLeastOnePed(Player playerIndex) { return NativeInvoke::Invoke<271, std::to_underlying(NativeHashes::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED), void>(playerIndex); }
    static inline auto ClearPlayerHasDamagedAtLeastOneVehicle(int32_t player) { return NativeInvoke::Invoke<272, std::to_underlying(NativeHashes::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_VEHICLE), void>(player); }
    static inline auto ClearPrints() { return NativeInvoke::Invoke<273, std::to_underlying(NativeHashes::CLEAR_PRINTS), void>(); }
    static inline auto ClearRelationship(int a1, int a2, int a3) { return NativeInvoke::Invoke<274, std::to_underlying(NativeHashes::CLEAR_RELATIONSHIP), void>(a1, a2, a3); }
    static inline auto ClearRoomForCar(Vehicle vehicle) { return NativeInvoke::Invoke<275, std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_CAR), void>(vehicle); }
    static inline auto ClearRoomForChar(Ped ped) { return NativeInvoke::Invoke<276, std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_CHAR), void>(ped); }
    static inline auto ClearRoomForDummyChar(Ped ped) { return NativeInvoke::Invoke<277, std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_DUMMY_CHAR), void>(ped); }
    static inline auto ClearRoomForObject(Object obj) { return NativeInvoke::Invoke<278, std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_OBJECT), void>(obj); }
    static inline auto ClearRoomForViewport(int32_t viewportid) { return NativeInvoke::Invoke<279, std::to_underlying(NativeHashes::CLEAR_ROOM_FOR_VIEWPORT), void>(viewportid); }
    static inline auto ClearScriptArrayFromScratchpad(Any a1) { return NativeInvoke::Invoke<280, std::to_underlying(NativeHashes::CLEAR_SCRIPT_ARRAY_FROM_SCRATCHPAD), void>(a1); }
    static inline auto ClearScriptedConversionCentre() { return NativeInvoke::Invoke<281, std::to_underlying(NativeHashes::CLEAR_SCRIPTED_CONVERSION_CENTRE), void>(); }
    static inline auto ClearSequenceTask(TaskSequence taskSequence) { return NativeInvoke::Invoke<282, std::to_underlying(NativeHashes::CLEAR_SEQUENCE_TASK), void>(taskSequence); }
    static inline auto ClearShakePlayerpadWhenControllerDisabled() { return NativeInvoke::Invoke<283, std::to_underlying(NativeHashes::CLEAR_SHAKE_PLAYERPAD_WHEN_CONTROLLER_DISABLED), void>(); }
    static inline auto ClearSmallPrints() { return NativeInvoke::Invoke<284, std::to_underlying(NativeHashes::CLEAR_SMALL_PRINTS), void>(); }
    static inline auto ClearTextLabel(char* label) { return NativeInvoke::Invoke<285, std::to_underlying(NativeHashes::CLEAR_TEXT_LABEL), void>(label); }
    static inline auto ClearThisBigPrint(char* gxtentry) { return NativeInvoke::Invoke<286, std::to_underlying(NativeHashes::CLEAR_THIS_BIG_PRINT), void>(gxtentry); }
    static inline auto ClearThisPrint(char* gxtentry) { return NativeInvoke::Invoke<287, std::to_underlying(NativeHashes::CLEAR_THIS_PRINT), void>(gxtentry); }
    static inline auto ClearThisPrintBigNow(bool a1) { return NativeInvoke::Invoke<288, std::to_underlying(NativeHashes::CLEAR_THIS_PRINT_BIG_NOW), void>(a1); }
    static inline auto ClearTimecycleModifier() { return NativeInvoke::Invoke<289, std::to_underlying(NativeHashes::CLEAR_TIMECYCLE_MODIFIER), void>(); }
    static inline auto ClearUpTripSkip() { return NativeInvoke::Invoke<290, std::to_underlying(NativeHashes::CLEAR_UP_TRIP_SKIP), Any>(); }
    static inline auto ClearWantedLevel(Player playerIndex) { return NativeInvoke::Invoke<291, std::to_underlying(NativeHashes::CLEAR_WANTED_LEVEL), void>(playerIndex); }
    static inline auto CloneCam(int32_t cam, int32_t* camcopy) { return NativeInvoke::Invoke<292, std::to_underlying(NativeHashes::CLONE_CAM), void>(cam, camcopy); }
    static inline auto CloseAllCarDoors(Vehicle vehicle) { return NativeInvoke::Invoke<293, std::to_underlying(NativeHashes::CLOSE_ALL_CAR_DOORS), void>(vehicle); }
    static inline auto CloseDebugFile() { return NativeInvoke::Invoke<294, std::to_underlying(NativeHashes::CLOSE_DEBUG_FILE), void>(); }
    static inline auto CloseGarage(char* garageName) { return NativeInvoke::Invoke<295, std::to_underlying(NativeHashes::CLOSE_GARAGE), void>(garageName); }
    static inline auto CloseMicPed(int32_t id, Ped ped) { return NativeInvoke::Invoke<296, std::to_underlying(NativeHashes::CLOSE_MIC_PED), void>(id, ped); }
    static inline auto CloseSequenceTask(TaskSequence taskSequence) { return NativeInvoke::Invoke<297, std::to_underlying(NativeHashes::CLOSE_SEQUENCE_TASK), void>(taskSequence); }
    static inline auto CodeWantsMobilePhoneRemoved() { return NativeInvoke::Invoke<298, std::to_underlying(NativeHashes::CODE_WANTS_MOBILE_PHONE_REMOVED), bool>(); }
    static inline auto CodeWantsMobilePhoneRemovedForWeaponSwitching() { return NativeInvoke::Invoke<299, std::to_underlying(NativeHashes::CODE_WANTS_MOBILE_PHONE_REMOVED_FOR_WEAPON_SWITCHING), bool>(); }
    static inline auto CompareString(char* a1, char* a2) { return NativeInvoke::Invoke<300, std::to_underlying(NativeHashes::COMPARE_STRING), int32_t>(a1, a2); }
    static inline auto CompareTwoDates(int32_t date0_0, int32_t date0_1, int32_t date1_0, int32_t date1_1) { return NativeInvoke::Invoke<301, std::to_underlying(NativeHashes::COMPARE_TWO_DATES), int32_t>(date0_0, date0_1, date1_0, date1_1); }
    static inline auto ConnectLods(Object obj0, Object obj1) { return NativeInvoke::Invoke<302, std::to_underlying(NativeHashes::CONNECT_LODS), void>(obj0, obj1); }
    static inline auto ControlCarDoor(Vehicle vehicle, uint32_t door, uint32_t unknown_maybe_open, float angle) { return NativeInvoke::Invoke<303, std::to_underlying(NativeHashes::CONTROL_CAR_DOOR), void>(vehicle, door, unknown_maybe_open, angle); }
    static inline auto ConvertIntToPlayerindex(uint32_t playerId) { return NativeInvoke::Invoke<304, std::to_underlying(NativeHashes::CONVERT_INT_TO_PLAYERINDEX), Player>(playerId); }
    static inline auto ConvertMetresToFeet(float metres) { return NativeInvoke::Invoke<305, std::to_underlying(NativeHashes::CONVERT_METRES_TO_FEET), float>(metres); }
    static inline auto ConvertMetresToFeetInt(int32_t metres) { return NativeInvoke::Invoke<306, std::to_underlying(NativeHashes::CONVERT_METRES_TO_FEET_INT), int32_t>(metres); }
    static inline auto ConvertThenAddStringToHtmlScriptObject(int32_t htmlobj, char* strgxtkey) { return NativeInvoke::Invoke<307, std::to_underlying(NativeHashes::CONVERT_THEN_ADD_STRING_TO_HTML_SCRIPT_OBJECT), void>(htmlobj, strgxtkey); }
    static inline auto CopyAnimations(Ped ped, Ped pednext, float speed) { return NativeInvoke::Invoke<308, std::to_underlying(NativeHashes::COPY_ANIMATIONS), void>(ped, pednext, speed); }
    static inline auto CopyCharDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<309, std::to_underlying(NativeHashes::COPY_CHAR_DECISION_MAKER), void>(type, pDM); }
    static inline auto CopyCombatDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<310, std::to_underlying(NativeHashes::COPY_COMBAT_DECISION_MAKER), void>(type, pDM); }
    static inline auto CopyGroupCharDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<311, std::to_underlying(NativeHashes::COPY_GROUP_CHAR_DECISION_MAKER), void>(type, pDM); }
    static inline auto CopyGroupCombatDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<312, std::to_underlying(NativeHashes::COPY_GROUP_COMBAT_DECISION_MAKER), void>(type, pDM); }
    static inline auto CopySharedCharDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<313, std::to_underlying(NativeHashes::COPY_SHARED_CHAR_DECISION_MAKER), void>(type, pDM); }
    static inline auto CopySharedCombatDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<314, std::to_underlying(NativeHashes::COPY_SHARED_COMBAT_DECISION_MAKER), void>(type, pDM); }
    static inline auto Cos(float value) { return NativeInvoke::Invoke<315, std::to_underlying(NativeHashes::COS), float>(value); }
    static inline auto CountPickupsOfType(int32_t type) { return NativeInvoke::Invoke<316, std::to_underlying(NativeHashes::COUNT_PICKUPS_OF_TYPE), int32_t>(type); }
    static inline auto CountScriptCams() { return NativeInvoke::Invoke<317, std::to_underlying(NativeHashes::COUNT_SCRIPT_CAMS), int32_t>(); }
    static inline auto CountScriptCamsByTypeAndOrState(int32_t type, int a2, int a3) { return NativeInvoke::Invoke<318, std::to_underlying(NativeHashes::COUNT_SCRIPT_CAMS_BY_TYPE_AND_OR_STATE), int32_t>(type, a2, a3); }
    static inline auto CreateCam(uint32_t camtype_usually14, Camera* camera) { return NativeInvoke::Invoke<319, std::to_underlying(NativeHashes::CREATE_CAM), void>(camtype_usually14, camera); }
    static inline auto CreateCar(uint32_t nameHash, float x, float y, float z, Vehicle* pVehicle, bool unknownTrue) { return NativeInvoke::Invoke<320, std::to_underlying(NativeHashes::CREATE_CAR), void>(nameHash, x, y, z, pVehicle, unknownTrue); }
    static inline auto CreateCarGenerator(float x, float y, float z, float angle, float a5, float a6, uint32_t model, int a8, int a9, int a10, int a11, int a12, bool alarm, bool doorlock, int32_t* handle) { return NativeInvoke::Invoke<321, std::to_underlying(NativeHashes::CREATE_CAR_GENERATOR), void>(x, y, z, angle, a5, a6, model, a8, a9, a10, a11, a12, alarm, doorlock, handle); }
    static inline auto CreateCarGeneratorWithPlate() { return NativeInvoke::Invoke<322, std::to_underlying(NativeHashes::CREATE_CAR_GENERATOR_WITH_PLATE), Any>(); }
    static inline auto CreateCarsOnGeneratorsInArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<323, std::to_underlying(NativeHashes::CREATE_CARS_ON_GENERATORS_IN_AREA), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto CreateChar(RelationshipGroup type, uint32_t model, float x, float y, float z, Ped* pPed, bool unknownTrue) { return NativeInvoke::Invoke<324, std::to_underlying(NativeHashes::CREATE_CHAR), void>(type, model, x, y, z, pPed, unknownTrue); }
    static inline auto CreateCharAsPassenger(Vehicle vehicle, uint32_t charType, uint32_t model, uint32_t passengerIndex, Ped* pPed) { return NativeInvoke::Invoke<325, std::to_underlying(NativeHashes::CREATE_CHAR_AS_PASSENGER), void>(vehicle, charType, model, passengerIndex, pPed); }
    static inline auto CreateCharInsideCar(Vehicle vehicle, uint32_t charType, uint32_t model, Ped* pPed) { return NativeInvoke::Invoke<326, std::to_underlying(NativeHashes::CREATE_CHAR_INSIDE_CAR), void>(vehicle, charType, model, pPed); }
    static inline auto CreateCheckpoint(int32_t type, float x, float y, float z, float a5, float a6) { return NativeInvoke::Invoke<327, std::to_underlying(NativeHashes::CREATE_CHECKPOINT), uint32_t>(type, x, y, z, a5, a6); }
    static inline auto CreateDummyChar() { return NativeInvoke::Invoke<328, std::to_underlying(NativeHashes::CREATE_DUMMY_CHAR), Any>(); }
    static inline auto CreateEmergencyServicesCar(uint32_t model, float x, float y, float z) { return NativeInvoke::Invoke<329, std::to_underlying(NativeHashes::CREATE_EMERGENCY_SERVICES_CAR), bool>(model, x, y, z); }
    static inline auto CreateEmergencyServicesCarReturnDriver(uint32_t model, float x, float y, float z, Car* car, Ped* cardriver, Ped* carpass) { return NativeInvoke::Invoke<330, std::to_underlying(NativeHashes::CREATE_EMERGENCY_SERVICES_CAR_RETURN_DRIVER), bool>(model, x, y, z, car, cardriver, carpass); }
    static inline auto CreateEmergencyServicesCarThenWalk(uint32_t model, float x, float y, float z) { return NativeInvoke::Invoke<331, std::to_underlying(NativeHashes::CREATE_EMERGENCY_SERVICES_CAR_THEN_WALK), bool>(model, x, y, z); }
    static inline auto CreateGroup(bool unknownFalse, Group* pGroup, bool unknownTrue) { return NativeInvoke::Invoke<332, std::to_underlying(NativeHashes::CREATE_GROUP), void>(unknownFalse, pGroup, unknownTrue); }
    static inline auto CreateHtmlScriptObject(char* objname) { return NativeInvoke::Invoke<333, std::to_underlying(NativeHashes::CREATE_HTML_SCRIPT_OBJECT), int32_t>(objname); }
    static inline auto CreateHtmlViewport(int32_t* htmlviewport) { return NativeInvoke::Invoke<334, std::to_underlying(NativeHashes::CREATE_HTML_VIEWPORT), void>(htmlviewport); }
    static inline auto CreateMenu(char* gxtentry, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, int32_t* menuid) { return NativeInvoke::Invoke<335, std::to_underlying(NativeHashes::CREATE_MENU), void>(gxtentry, a2, a3, a4, a5, a6, a7, a8, menuid); }
    static inline auto CreateMissionTrain(uint32_t unknown1, float x, float y, float z, bool unknown2, Train* pTrain) { return NativeInvoke::Invoke<336, std::to_underlying(NativeHashes::CREATE_MISSION_TRAIN), void>(unknown1, x, y, z, unknown2, pTrain); }
    static inline auto CreateMobilePhone(int a1) { return NativeInvoke::Invoke<337, std::to_underlying(NativeHashes::CREATE_MOBILE_PHONE), void>(a1); }
    static inline auto CreateMoneyPickup(float x, float y, float z, uint32_t amount, bool unknownTrue, Pickup* pPickup) { return NativeInvoke::Invoke<338, std::to_underlying(NativeHashes::CREATE_MONEY_PICKUP), void>(x, y, z, amount, unknownTrue, pPickup); }
    static inline auto CreateNmMessage(bool a1, int32_t id) { return NativeInvoke::Invoke<339, std::to_underlying(NativeHashes::CREATE_NM_MESSAGE), void>(a1, id); }
    static inline auto CreateObject(uint32_t model, float x, float y, float z, Object* pObj, bool unknownTrue) { return NativeInvoke::Invoke<340, std::to_underlying(NativeHashes::CREATE_OBJECT), void>(model, x, y, z, pObj, unknownTrue); }
    static inline auto CreateObjectNoOffset(uint32_t model, float x, float y, float z, Object* pObj, bool unknownTrue) { return NativeInvoke::Invoke<341, std::to_underlying(NativeHashes::CREATE_OBJECT_NO_OFFSET), void>(model, x, y, z, pObj, unknownTrue); }
    static inline auto CreatePickup(uint32_t model, uint32_t pickupType, float x, float y, float z, Pickup* pPickup, bool unknownFalse) { return NativeInvoke::Invoke<342, std::to_underlying(NativeHashes::CREATE_PICKUP), void>(model, pickupType, x, y, z, pPickup, unknownFalse); }
    static inline auto CreatePickupRotate(uint32_t model, uint32_t pickupType, uint32_t unknown, float x, float y, float z, float rX, float rY, float rZ, Pickup* pPickup) { return NativeInvoke::Invoke<343, std::to_underlying(NativeHashes::CREATE_PICKUP_ROTATE), void>(model, pickupType, unknown, x, y, z, rX, rY, rZ, pPickup); }
    static inline auto CreatePickupWithAmmo(uint32_t model, uint32_t pickupType, uint32_t unknown, float x, float y, float z, Pickup* pPickup) { return NativeInvoke::Invoke<344, std::to_underlying(NativeHashes::CREATE_PICKUP_WITH_AMMO), void>(model, pickupType, unknown, x, y, z, pPickup); }
    static inline auto CreatePlayer(uint32_t playerId, float x, float y, float z, Player* pPlayerIndex) { return NativeInvoke::Invoke<345, std::to_underlying(NativeHashes::CREATE_PLAYER), void>(playerId, x, y, z, pPlayerIndex); }
    static inline auto CreateRandomCarForCarPark(float x, float y, float z, float radius) { return NativeInvoke::Invoke<346, std::to_underlying(NativeHashes::CREATE_RANDOM_CAR_FOR_CAR_PARK), void>(x, y, z, radius); }
    static inline auto CreateRandomChar(float x, float y, float z, Ped* pPed) { return NativeInvoke::Invoke<347, std::to_underlying(NativeHashes::CREATE_RANDOM_CHAR), void>(x, y, z, pPed); }
    static inline auto CreateRandomCharAsDriver(Vehicle vehicle, Ped* pPed) { return NativeInvoke::Invoke<348, std::to_underlying(NativeHashes::CREATE_RANDOM_CHAR_AS_DRIVER), void>(vehicle, pPed); }
    static inline auto CreateRandomCharAsPassenger(Vehicle vehicle, uint32_t seat, Ped* pPed) { return NativeInvoke::Invoke<349, std::to_underlying(NativeHashes::CREATE_RANDOM_CHAR_AS_PASSENGER), void>(vehicle, seat, pPed); }
    static inline auto CreateRandomFemaleChar(float x, float y, float z, Ped* pPed) { return NativeInvoke::Invoke<350, std::to_underlying(NativeHashes::CREATE_RANDOM_FEMALE_CHAR), void>(x, y, z, pPed); }
    static inline auto CreateRandomMaleChar(float x, float y, float z, Ped* pPed) { return NativeInvoke::Invoke<351, std::to_underlying(NativeHashes::CREATE_RANDOM_MALE_CHAR), void>(x, y, z, pPed); }
    static inline auto CreateTemporaryRadarBlipsForPickupsInArea(float x, float y, float z, float radius, int32_t bliptype) { return NativeInvoke::Invoke<352, std::to_underlying(NativeHashes::CREATE_TEMPORARY_RADAR_BLIPS_FOR_PICKUPS_IN_AREA), void>(x, y, z, radius, bliptype); }
    static inline auto CreateUser3dMarker(float x, float y, float z) { return NativeInvoke::Invoke<353, std::to_underlying(NativeHashes::CREATE_USER_3D_MARKER), uint32_t>(x, y, z); }
    static inline auto CreateViewport(int32_t* viewport) { return NativeInvoke::Invoke<354, std::to_underlying(NativeHashes::CREATE_VIEWPORT), void>(viewport); }
    static inline auto CreateWidgetGroup(Any a1) { return NativeInvoke::Invoke<355, std::to_underlying(NativeHashes::CREATE_WIDGET_GROUP), Any>(a1); }
    static inline auto DETACH_PED(Ped ped, bool unknown) { return NativeInvoke::Invoke<356, std::to_underlying(NativeHashes::DETACH_PED), void>(ped, unknown); }
    static inline auto DETACH_PED_FROM_WITHIN_CAR(Ped ped, bool unknown) { return NativeInvoke::Invoke<357, std::to_underlying(NativeHashes::DETACH_PED_FROM_WITHIN_CAR), void>(ped, unknown); }
    static inline auto DamageCar(Car car, float x, float y, float z, float unkforce0, float unkforce1, bool flag) { return NativeInvoke::Invoke<358, std::to_underlying(NativeHashes::DAMAGE_CAR), void>(car, x, y, z, unkforce0, unkforce1, flag); }
    static inline auto DamageChar(Ped ped, uint32_t hitPoints, bool unknown) { return NativeInvoke::Invoke<359, std::to_underlying(NativeHashes::DAMAGE_CHAR), void>(ped, hitPoints, unknown); }
    static inline auto DamagePedBodyPart(Ped ped, uint32_t part, uint32_t hitPoints) { return NativeInvoke::Invoke<360, std::to_underlying(NativeHashes::DAMAGE_PED_BODY_PART), void>(ped, part, hitPoints); }
    static inline auto DeactivateFrontend() { return NativeInvoke::Invoke<361, std::to_underlying(NativeHashes::DEACTIVATE_FRONTEND), void>(); }
    static inline auto DeactivateNetworkSettingsMenu() { return NativeInvoke::Invoke<362, std::to_underlying(NativeHashes::DEACTIVATE_NETWORK_SETTINGS_MENU), void>(); }
    static inline auto DeactivateScriptPopulationZone() { return NativeInvoke::Invoke<363, std::to_underlying(NativeHashes::DEACTIVATE_SCRIPT_POPULATION_ZONE), void>(); }
    static inline auto DebugOff() { return NativeInvoke::Invoke<364, std::to_underlying(NativeHashes::DEBUG_OFF), void>(); }
    static inline auto DebugOn() { return NativeInvoke::Invoke<365, std::to_underlying(NativeHashes::DEBUG_ON), Any>(); }
    static inline auto DecrementFloatStat(int32_t stat, float val) { return NativeInvoke::Invoke<366, std::to_underlying(NativeHashes::DECREMENT_FLOAT_STAT), void>(stat, val); }
    static inline auto DecrementIntStat(uint32_t stat, uint32_t amount) { return NativeInvoke::Invoke<367, std::to_underlying(NativeHashes::DECREMENT_INT_STAT), void>(stat, amount); }
    static inline auto DefinePedGenerationConstraintArea(float x, float y, float z, float radius) { return NativeInvoke::Invoke<368, std::to_underlying(NativeHashes::DEFINE_PED_GENERATION_CONSTRAINT_AREA), void>(x, y, z, radius); }
    static inline auto DeleteAllHtmlScriptObjects() { return NativeInvoke::Invoke<369, std::to_underlying(NativeHashes::DELETE_ALL_HTML_SCRIPT_OBJECTS), void>(); }
    static inline auto DeleteAllTrains() { return NativeInvoke::Invoke<370, std::to_underlying(NativeHashes::DELETE_ALL_TRAINS), void>(); }
    static inline auto DeleteCar(Vehicle* pVehicle) { return NativeInvoke::Invoke<371, std::to_underlying(NativeHashes::DELETE_CAR), void>(pVehicle); }
    static inline auto DeleteCarGenerator(int32_t handle) { return NativeInvoke::Invoke<372, std::to_underlying(NativeHashes::DELETE_CAR_GENERATOR), void>(handle); }
    static inline auto DeleteChar(Ped* pPed) { return NativeInvoke::Invoke<373, std::to_underlying(NativeHashes::DELETE_CHAR), void>(pPed); }
    static inline auto DeleteCheckpoint(uint32_t checkpoint) { return NativeInvoke::Invoke<374, std::to_underlying(NativeHashes::DELETE_CHECKPOINT), void>(checkpoint); }
    static inline auto DeleteDummyChar() { return NativeInvoke::Invoke<375, std::to_underlying(NativeHashes::DELETE_DUMMY_CHAR), Any>(); }
    static inline auto DeleteHtmlScriptObject(int32_t htmlobj) { return NativeInvoke::Invoke<376, std::to_underlying(NativeHashes::DELETE_HTML_SCRIPT_OBJECT), void>(htmlobj); }
    static inline auto DeleteMenu(int32_t menuid) { return NativeInvoke::Invoke<377, std::to_underlying(NativeHashes::DELETE_MENU), void>(menuid); }
    static inline auto DeleteMissionTrain(Train* pTrain) { return NativeInvoke::Invoke<378, std::to_underlying(NativeHashes::DELETE_MISSION_TRAIN), void>(pTrain); }
    static inline auto DeleteMissionTrains() { return NativeInvoke::Invoke<379, std::to_underlying(NativeHashes::DELETE_MISSION_TRAINS), void>(); }
    static inline auto DeleteObject(Object* pObj) { return NativeInvoke::Invoke<380, std::to_underlying(NativeHashes::DELETE_OBJECT), void>(pObj); }
    static inline auto DeletePlayer() { return NativeInvoke::Invoke<381, std::to_underlying(NativeHashes::DELETE_PLAYER), void>(); }
    static inline auto DeleteWidget(Any a1) { return NativeInvoke::Invoke<382, std::to_underlying(NativeHashes::DELETE_WIDGET), void>(a1); }
    static inline auto DeleteWidgetGroup(Any a1) { return NativeInvoke::Invoke<383, std::to_underlying(NativeHashes::DELETE_WIDGET_GROUP), void>(a1); }
    static inline auto DestroyAllCams() { return NativeInvoke::Invoke<384, std::to_underlying(NativeHashes::DESTROY_ALL_CAMS), void>(); }
    static inline auto DestroyAllScriptViewports() { return NativeInvoke::Invoke<385, std::to_underlying(NativeHashes::DESTROY_ALL_SCRIPT_VIEWPORTS), void>(); }
    static inline auto DestroyCam(Camera camera) { return NativeInvoke::Invoke<386, std::to_underlying(NativeHashes::DESTROY_CAM), void>(camera); }
    static inline auto DestroyMobilePhone() { return NativeInvoke::Invoke<387, std::to_underlying(NativeHashes::DESTROY_MOBILE_PHONE), void>(); }
    static inline auto DestroyPedGenerationConstraintArea() { return NativeInvoke::Invoke<388, std::to_underlying(NativeHashes::DESTROY_PED_GENERATION_CONSTRAINT_AREA), void>(); }
    static inline auto DestroyThread(int32_t ScriptHandle) { return NativeInvoke::Invoke<389, std::to_underlying(NativeHashes::DESTROY_THREAD), void>(ScriptHandle); }
    static inline auto DestroyViewport(int32_t viewportid) { return NativeInvoke::Invoke<390, std::to_underlying(NativeHashes::DESTROY_VIEWPORT), void>(viewportid); }
    static inline auto DetachCamFromViewport(int a1) { return NativeInvoke::Invoke<391, std::to_underlying(NativeHashes::DETACH_CAM_FROM_VIEWPORT), void>(a1); }
    static inline auto DetachCar(Vehicle vehicle) { return NativeInvoke::Invoke<392, std::to_underlying(NativeHashes::DETACH_CAR), void>(vehicle); }
    static inline auto DetachObject(Object obj, bool unknown) { return NativeInvoke::Invoke<393, std::to_underlying(NativeHashes::DETACH_OBJECT), void>(obj, unknown); }
    static inline auto DetachObjectNoCollide(Object obj, bool flag) { return NativeInvoke::Invoke<394, std::to_underlying(NativeHashes::DETACH_OBJECT_NO_COLLIDE), void>(obj, flag); }
    static inline auto DidSaveCompleteSuccessfully() { return NativeInvoke::Invoke<395, std::to_underlying(NativeHashes::DID_SAVE_COMPLETE_SUCCESSFULLY), bool>(); }
    static inline auto DimBlip(Blip blip, bool unknownTrue) { return NativeInvoke::Invoke<396, std::to_underlying(NativeHashes::DIM_BLIP), void>(blip, unknownTrue); }
    static inline auto DisableCarGenerators(bool flag0, bool flag1) { return NativeInvoke::Invoke<397, std::to_underlying(NativeHashes::DISABLE_CAR_GENERATORS), void>(flag0, flag1); }
    static inline auto DisableCarGeneratorsWithHeli(bool disable) { return NativeInvoke::Invoke<398, std::to_underlying(NativeHashes::DISABLE_CAR_GENERATORS_WITH_HELI), void>(disable); }
    static inline auto DisableDebugCamAndPlayerWarping() { return NativeInvoke::Invoke<399, std::to_underlying(NativeHashes::DISABLE_DEBUG_CAM_AND_PLAYER_WARPING), Any>(); }
    static inline auto DisableEndCreditsFade() { return NativeInvoke::Invoke<400, std::to_underlying(NativeHashes::DISABLE_END_CREDITS_FADE), void>(); }
    static inline auto DisableFrontendRadio() { return NativeInvoke::Invoke<401, std::to_underlying(NativeHashes::DISABLE_FRONTEND_RADIO), void>(); }
    static inline auto DisableGps(bool disable) { return NativeInvoke::Invoke<402, std::to_underlying(NativeHashes::DISABLE_GPS), void>(disable); }
    static inline auto DisableHeliChaseCamBonnetNitroFix() { return NativeInvoke::Invoke<403, std::to_underlying(NativeHashes::DISABLE_HELI_CHASE_CAM_BONNET_NITRO_FIX), void>(); }
    static inline auto DisableHeliChaseCamThisUpdate() { return NativeInvoke::Invoke<404, std::to_underlying(NativeHashes::DISABLE_HELI_CHASE_CAM_THIS_UPDATE), void>(); }
    static inline auto DisableIntermezzoCams() { return NativeInvoke::Invoke<405, std::to_underlying(NativeHashes::DISABLE_INTERMEZZO_CAMS), void>(); }
    static inline auto DisableLocalPlayerPickups(bool disable) { return NativeInvoke::Invoke<406, std::to_underlying(NativeHashes::DISABLE_LOCAL_PLAYER_PICKUPS), void>(disable); }
    static inline auto DisablePauseMenu(bool disabled) { return NativeInvoke::Invoke<407, std::to_underlying(NativeHashes::DISABLE_PAUSE_MENU), void>(disabled); }
    static inline auto DisablePlayerAutoVehicleExit(Ped ped, bool disable) { return NativeInvoke::Invoke<408, std::to_underlying(NativeHashes::DISABLE_PLAYER_AUTO_VEHICLE_EXIT), void>(ped, disable); }
    static inline auto DisablePlayerLockon(Player playerIndex, bool disabled) { return NativeInvoke::Invoke<409, std::to_underlying(NativeHashes::DISABLE_PLAYER_LOCKON), void>(playerIndex, disabled); }
    static inline auto DisablePlayerSprint(Player playerIndex, bool disabled) { return NativeInvoke::Invoke<410, std::to_underlying(NativeHashes::DISABLE_PLAYER_SPRINT), void>(playerIndex, disabled); }
    static inline auto DisablePlayerVehicleEntry(int32_t player, bool disable) { return NativeInvoke::Invoke<411, std::to_underlying(NativeHashes::DISABLE_PLAYER_VEHICLE_ENTRY), void>(player, disable); }
    static inline auto DisablePoliceScanner() { return NativeInvoke::Invoke<412, std::to_underlying(NativeHashes::DISABLE_POLICE_SCANNER), void>(); }
    static inline auto DisableStickyBombActiveSound(Ped ped, bool disable) { return NativeInvoke::Invoke<413, std::to_underlying(NativeHashes::DISABLE_STICKY_BOMB_ACTIVE_SOUND), void>(ped, disable); }
    static inline auto DisplayAltimeterThisFrame() { return NativeInvoke::Invoke<414, std::to_underlying(NativeHashes::DISPLAY_ALTIMETER_THIS_FRAME), void>(); }
    static inline auto DisplayAmmo(bool display) { return NativeInvoke::Invoke<415, std::to_underlying(NativeHashes::DISPLAY_AMMO), void>(display); }
    static inline auto DisplayAreaName(bool display) { return NativeInvoke::Invoke<416, std::to_underlying(NativeHashes::DISPLAY_AREA_NAME), void>(display); }
    static inline auto DisplayCash(bool display) { return NativeInvoke::Invoke<417, std::to_underlying(NativeHashes::DISPLAY_CASH), void>(display); }
    static inline auto DisplayFrontendMapBlips(bool display) { return NativeInvoke::Invoke<418, std::to_underlying(NativeHashes::DISPLAY_FRONTEND_MAP_BLIPS), void>(display); }
    static inline auto DisplayGrimeThisFrame() { return NativeInvoke::Invoke<419, std::to_underlying(NativeHashes::DISPLAY_GRIME_THIS_FRAME), void>(); }
    static inline auto DisplayHelpTextThisFrame(char* gxtkey, bool a2) { return NativeInvoke::Invoke<420, std::to_underlying(NativeHashes::DISPLAY_HELP_TEXT_THIS_FRAME), void>(gxtkey, a2); }
    static inline auto DisplayHud(bool display) { return NativeInvoke::Invoke<421, std::to_underlying(NativeHashes::DISPLAY_HUD), void>(display); }
    static inline auto DisplayLoadingThisFrameWithScriptSprites() { return NativeInvoke::Invoke<422, std::to_underlying(NativeHashes::DISPLAY_LOADING_THIS_FRAME_WITH_SCRIPT_SPRITES), void>(); }
    static inline auto DisplayNonMinigameHelpMessages(bool a1) { return NativeInvoke::Invoke<423, std::to_underlying(NativeHashes::DISPLAY_NON_MINIGAME_HELP_MESSAGES), void>(a1); }
    static inline auto DisplayNthOnscreenCounterWithString(int a1, int a2, int a3, char* str) { return NativeInvoke::Invoke<424, std::to_underlying(NativeHashes::DISPLAY_NTH_ONSCREEN_COUNTER_WITH_STRING), void>(a1, a2, a3, str); }
    static inline auto DisplayOnscreenTimerWithString(int32_t timerid, bool a2, char* str) { return NativeInvoke::Invoke<425, std::to_underlying(NativeHashes::DISPLAY_ONSCREEN_TIMER_WITH_STRING), void>(timerid, a2, str); }
    static inline auto DisplayPlayerIcons() { return NativeInvoke::Invoke<426, std::to_underlying(NativeHashes::DISPLAY_PLAYER_ICONS), Any>(); }
    static inline auto DisplayPlayerNames(Any a1) { return NativeInvoke::Invoke<427, std::to_underlying(NativeHashes::DISPLAY_PLAYER_NAMES), void>(a1); }
    static inline auto DisplayRadar(bool display) { return NativeInvoke::Invoke<428, std::to_underlying(NativeHashes::DISPLAY_RADAR), void>(display); }
    static inline auto DisplaySniperScopeThisFrame() { return NativeInvoke::Invoke<429, std::to_underlying(NativeHashes::DISPLAY_SNIPER_SCOPE_THIS_FRAME), void>(); }
    static inline auto DisplayText(float x, float y, char* gxtName) { return NativeInvoke::Invoke<430, std::to_underlying(NativeHashes::DISPLAY_TEXT), void>(x, y, gxtName); }
    static inline auto DisplayTextSubstring(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<431, std::to_underlying(NativeHashes::DISPLAY_TEXT_SUBSTRING), void>(a1, a2, a3, a4, a5, a6, a7); }
    static inline auto DisplayTextWith2Numbers(float x, float y, char* gxtName, int32_t number1, int32_t number2) { return NativeInvoke::Invoke<432, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_2_NUMBERS), void>(x, y, gxtName, number1, number2); }
    static inline auto DisplayTextWith3Numbers(float x, float y, char* gxtentry, int a4, int a5, int a6) { return NativeInvoke::Invoke<433, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_3_NUMBERS), void>(x, y, gxtentry, a4, a5, a6); }
    static inline auto DisplayTextWithBlipName(float x, float y, char* str, int32_t blip) { return NativeInvoke::Invoke<434, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_BLIP_NAME), void>(x, y, str, blip); }
    static inline auto DisplayTextWithFloat(float x, float y, char* gxtName, float value, uint32_t unknown) { return NativeInvoke::Invoke<435, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_FLOAT), void>(x, y, gxtName, value, unknown); }
    static inline auto DisplayTextWithLiteralString(float x, float y, char* gxtName, char* literalStr) { return NativeInvoke::Invoke<436, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_LITERAL_STRING), void>(x, y, gxtName, literalStr); }
    static inline auto DisplayTextWithLiteralSubstring(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<437, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_LITERAL_SUBSTRING), void>(a1, a2, a3, a4, a5, a6); }
    static inline auto DisplayTextWithNumber(float x, float y, char* gxtName, int32_t value) { return NativeInvoke::Invoke<438, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_NUMBER), void>(x, y, gxtName, value); }
    static inline auto DisplayTextWithString(float x, float y, char* gxtName, char* gxtStringName) { return NativeInvoke::Invoke<439, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_STRING), void>(x, y, gxtName, gxtStringName); }
    static inline auto DisplayTextWithStringAndInt(float x, float y, char* gxtname, char* gxtnamenext, int32_t val) { return NativeInvoke::Invoke<440, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_STRING_AND_INT), void>(x, y, gxtname, gxtnamenext, val); }
    static inline auto DisplayTextWithSubstringGivenHashKey(float x, float y, char* gxtkey, uint32_t gxtkey0) { return NativeInvoke::Invoke<441, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_SUBSTRING_GIVEN_HASH_KEY), void>(x, y, gxtkey, gxtkey0); }
    static inline auto DisplayTextWithTwoLiteralStrings(float x, float y, char* gxtName, char* literalStr1, char* literalStr2) { return NativeInvoke::Invoke<442, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS), void>(x, y, gxtName, literalStr1, literalStr2); }
    static inline auto DisplayTextWithTwoStrings(float x, float y, char* gxtName, char* gxtStringName1, char* gxtStringName2) { return NativeInvoke::Invoke<443, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_TWO_STRINGS), void>(x, y, gxtName, gxtStringName1, gxtStringName2); }
    static inline auto DisplayTextWithTwoSubstringsGivenHashKeys(float x, float y, char* gxtkey, uint32_t gxtkey0, uint32_t gxtkey1) { return NativeInvoke::Invoke<444, std::to_underlying(NativeHashes::DISPLAY_TEXT_WITH_TWO_SUBSTRINGS_GIVEN_HASH_KEYS), void>(x, y, gxtkey, gxtkey0, gxtkey1); }
    static inline auto DoAutoSave() { return NativeInvoke::Invoke<445, std::to_underlying(NativeHashes::DO_AUTO_SAVE), void>(); }
    static inline auto DoScreenFadeIn(uint32_t timeMS) { return NativeInvoke::Invoke<446, std::to_underlying(NativeHashes::DO_SCREEN_FADE_IN), void>(timeMS); }
    static inline auto DoScreenFadeInUnhacked(uint32_t timeMS) { return NativeInvoke::Invoke<447, std::to_underlying(NativeHashes::DO_SCREEN_FADE_IN_UNHACKED), void>(timeMS); }
    static inline auto DoScreenFadeOut(uint32_t timeMS) { return NativeInvoke::Invoke<448, std::to_underlying(NativeHashes::DO_SCREEN_FADE_OUT), void>(timeMS); }
    static inline auto DoScreenFadeOutUnhacked(uint32_t timeMS) { return NativeInvoke::Invoke<449, std::to_underlying(NativeHashes::DO_SCREEN_FADE_OUT_UNHACKED), void>(timeMS); }
    static inline auto DoWeaponStuffAtStartOf2pGame() { return NativeInvoke::Invoke<450, std::to_underlying(NativeHashes::DO_WEAPON_STUFF_AT_START_OF_2P_GAME), Any>(); }
    static inline auto DoesBlipExist(Blip blip) { return NativeInvoke::Invoke<451, std::to_underlying(NativeHashes::DOES_BLIP_EXIST), bool>(blip); }
    static inline auto DoesCamExist(Camera camera) { return NativeInvoke::Invoke<452, std::to_underlying(NativeHashes::DOES_CAM_EXIST), bool>(camera); }
    static inline auto DoesCarHaveHydraulics(Car car) { return NativeInvoke::Invoke<453, std::to_underlying(NativeHashes::DOES_CAR_HAVE_HYDRAULICS), bool>(car); }
    static inline auto DoesCarHaveRoof(Vehicle vehicle) { return NativeInvoke::Invoke<454, std::to_underlying(NativeHashes::DOES_CAR_HAVE_ROOF), bool>(vehicle); }
    static inline auto DoesCarHaveStuckCarCheck(Vehicle vehicle) { return NativeInvoke::Invoke<455, std::to_underlying(NativeHashes::DOES_CAR_HAVE_STUCK_CAR_CHECK), bool>(vehicle); }
    static inline auto DoesCharExist(Ped ped) { return NativeInvoke::Invoke<456, std::to_underlying(NativeHashes::DOES_CHAR_EXIST), bool>(ped); }
    static inline auto DoesDecisionMakerExist(DecisionMaker dm) { return NativeInvoke::Invoke<457, std::to_underlying(NativeHashes::DOES_DECISION_MAKER_EXIST), bool>(dm); }
    static inline auto DoesGameCodeWantToLeaveNetworkSession() { return NativeInvoke::Invoke<458, std::to_underlying(NativeHashes::DOES_GAME_CODE_WANT_TO_LEAVE_NETWORK_SESSION), Any>(); }
    static inline auto DoesGroupExist(Group group) { return NativeInvoke::Invoke<459, std::to_underlying(NativeHashes::DOES_GROUP_EXIST), bool>(group); }
    static inline auto DoesObjectExist(Object obj) { return NativeInvoke::Invoke<460, std::to_underlying(NativeHashes::DOES_OBJECT_EXIST), bool>(obj); }
    static inline auto DoesObjectExistWithNetworkId(Any a1) { return NativeInvoke::Invoke<461, std::to_underlying(NativeHashes::DOES_OBJECT_EXIST_WITH_NETWORK_ID), Any>(a1); }
    static inline auto DoesObjectHavePhysics(Object obj) { return NativeInvoke::Invoke<462, std::to_underlying(NativeHashes::DOES_OBJECT_HAVE_PHYSICS), bool>(obj); }
    static inline auto DoesObjectHaveThisModel(Object obj, uint32_t model) { return NativeInvoke::Invoke<463, std::to_underlying(NativeHashes::DOES_OBJECT_HAVE_THIS_MODEL), bool>(obj, model); }
    static inline auto DoesObjectOfTypeExistAtCoords(float x, float y, float z, float radius, uint32_t model) { return NativeInvoke::Invoke<464, std::to_underlying(NativeHashes::DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS), bool>(x, y, z, radius, model); }
    static inline auto DoesPedExistWithNetworkId(Any a1) { return NativeInvoke::Invoke<465, std::to_underlying(NativeHashes::DOES_PED_EXIST_WITH_NETWORK_ID), Any>(a1); }
    static inline auto DoesPickupExist(Pickup pickup) { return NativeInvoke::Invoke<466, std::to_underlying(NativeHashes::DOES_PICKUP_EXIST), bool>(pickup); }
    static inline auto DoesPlayerHaveControlOfNetworkId(Any a1, Any a2) { return NativeInvoke::Invoke<467, std::to_underlying(NativeHashes::DOES_PLAYER_HAVE_CONTROL_OF_NETWORK_ID), Any>(a1, a2); }
    static inline auto DoesScenarioExistInArea(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<468, std::to_underlying(NativeHashes::DOES_SCENARIO_EXIST_IN_AREA), bool>(a1, a2, a3, a4, a5); }
    static inline auto DoesScriptExist(char* name) { return NativeInvoke::Invoke<469, std::to_underlying(NativeHashes::DOES_SCRIPT_EXIST), bool>(name); }
    static inline auto DoesScriptFireExist(int32_t fire) { return NativeInvoke::Invoke<470, std::to_underlying(NativeHashes::DOES_SCRIPT_FIRE_EXIST), bool>(fire); }
    static inline auto DoesTextLabelExist(char* gxtentry) { return NativeInvoke::Invoke<471, std::to_underlying(NativeHashes::DOES_TEXT_LABEL_EXIST), bool>(gxtentry); }
    static inline auto DoesThisMinigameScriptAllowNonMinigameHelpMessages() { return NativeInvoke::Invoke<472, std::to_underlying(NativeHashes::DOES_THIS_MINIGAME_SCRIPT_ALLOW_NON_MINIGAME_HELP_MESSAGES), bool>(); }
    static inline auto DoesVehicleExist(Vehicle vehicle) { return NativeInvoke::Invoke<473, std::to_underlying(NativeHashes::DOES_VEHICLE_EXIST), bool>(vehicle); }
    static inline auto DoesVehicleExistWithNetworkId(Any a1) { return NativeInvoke::Invoke<474, std::to_underlying(NativeHashes::DOES_VEHICLE_EXIST_WITH_NETWORK_ID), Any>(a1); }
    static inline auto DoesViewportExist(int32_t viewportid) { return NativeInvoke::Invoke<475, std::to_underlying(NativeHashes::DOES_VIEWPORT_EXIST), bool>(viewportid); }
    static inline auto DoesWebPageExist(char* webaddress) { return NativeInvoke::Invoke<476, std::to_underlying(NativeHashes::DOES_WEB_PAGE_EXIST), bool>(webaddress); }
    static inline auto DoesWidgetGroupExist(Any a1) { return NativeInvoke::Invoke<477, std::to_underlying(NativeHashes::DOES_WIDGET_GROUP_EXIST), void>(a1); }
    static inline auto DontAbortCarConversations(bool flag0, bool flag1) { return NativeInvoke::Invoke<478, std::to_underlying(NativeHashes::DONT_ABORT_CAR_CONVERSATIONS), void>(flag0, flag1); }
    static inline auto DontDispatchCopsForPlayer(int32_t player, bool dont) { return NativeInvoke::Invoke<479, std::to_underlying(NativeHashes::DONT_DISPATCH_COPS_FOR_PLAYER), void>(player, dont); }
    static inline auto DontDisplayLoadingOnFadeThisFrame() { return NativeInvoke::Invoke<480, std::to_underlying(NativeHashes::DONT_DISPLAY_LOADING_ON_FADE_THIS_FRAME), void>(); }
    static inline auto DontRemoveChar(Ped ped) { return NativeInvoke::Invoke<481, std::to_underlying(NativeHashes::DONT_REMOVE_CHAR), void>(ped); }
    static inline auto DontRemoveObject(Object obj) { return NativeInvoke::Invoke<482, std::to_underlying(NativeHashes::DONT_REMOVE_OBJECT), void>(obj); }
    static inline auto DontSuppressAnyCarModels() { return NativeInvoke::Invoke<483, std::to_underlying(NativeHashes::DONT_SUPPRESS_ANY_CAR_MODELS), void>(); }
    static inline auto DontSuppressAnyPedModels() { return NativeInvoke::Invoke<484, std::to_underlying(NativeHashes::DONT_SUPPRESS_ANY_PED_MODELS), void>(); }
    static inline auto DontSuppressCarModel(uint32_t model) { return NativeInvoke::Invoke<485, std::to_underlying(NativeHashes::DONT_SUPPRESS_CAR_MODEL), void>(model); }
    static inline auto DontSuppressPedModel(uint32_t model) { return NativeInvoke::Invoke<486, std::to_underlying(NativeHashes::DONT_SUPPRESS_PED_MODEL), void>(model); }
    static inline auto DrawCheckpoint(float x, float y, float z, float radius, int32_t r, int32_t g, int32_t b) { return NativeInvoke::Invoke<487, std::to_underlying(NativeHashes::DRAW_CHECKPOINT), void>(x, y, z, radius, r, g, b); }
    static inline auto DrawCheckpointWithAlpha(float x, float y, float z, float radius, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<488, std::to_underlying(NativeHashes::DRAW_CHECKPOINT_WITH_ALPHA), void>(x, y, z, radius, r, g, b, a); }
    static inline auto DrawColouredCylinder(float x, float y, float z, float a4, float a5, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<489, std::to_underlying(NativeHashes::DRAW_COLOURED_CYLINDER), void>(x, y, z, a4, a5, r, g, b, a); }
    static inline auto DrawCorona(float x, float y, float z, float radius, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<490, std::to_underlying(NativeHashes::DRAW_CORONA), void>(x, y, z, radius, a5, a6, a7, a8, a9); }
    static inline auto DrawCurvedWindow(float a1, float a2, float a3, float a4, uint32_t alpha) { return NativeInvoke::Invoke<491, std::to_underlying(NativeHashes::DRAW_CURVED_WINDOW), void>(a1, a2, a3, a4, alpha); }
    static inline auto DrawCurvedWindowNotext(float a1, float a2, float a3, float a4, int a5) { return NativeInvoke::Invoke<492, std::to_underlying(NativeHashes::DRAW_CURVED_WINDOW_NOTEXT), void>(a1, a2, a3, a4, a5); }
    static inline auto DrawCurvedWindowText(float a1, float a2, float a3, int a4, int a5, char* a6, char* a7, int a8) { return NativeInvoke::Invoke<493, std::to_underlying(NativeHashes::DRAW_CURVED_WINDOW_TEXT), void>(a1, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto DrawDebugSphere(float x, float y, float z, float radius) { return NativeInvoke::Invoke<494, std::to_underlying(NativeHashes::DRAW_DEBUG_SPHERE), void>(x, y, z, radius); }
    static inline auto DrawFrontendHelperText(char* a1, char* a2, bool a3) { return NativeInvoke::Invoke<495, std::to_underlying(NativeHashes::DRAW_FRONTEND_HELPER_TEXT), void>(a1, a2, a3); }
    static inline auto DrawLightWithRange(float x, float y, float z, int32_t r, int32_t g, int32_t b, float a7, float a8) { return NativeInvoke::Invoke<496, std::to_underlying(NativeHashes::DRAW_LIGHT_WITH_RANGE), void>(x, y, z, r, g, b, a7, a8); }
    static inline auto DrawMovie(float a1, float a2, float a3, float a4, float a5, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<497, std::to_underlying(NativeHashes::DRAW_MOVIE), void>(a1, a2, a3, a4, a5, r, g, b, a); }
    static inline auto DrawRect(float x1, float y1, float x2, float y2, uint32_t r, uint32_t g, uint32_t b, uint32_t a) { return NativeInvoke::Invoke<498, std::to_underlying(NativeHashes::DRAW_RECT), void>(x1, y1, x2, y2, r, g, b, a); }
    static inline auto DrawSphere(float x, float y, float z, float radius) { return NativeInvoke::Invoke<499, std::to_underlying(NativeHashes::DRAW_SPHERE), void>(x, y, z, radius); }
    static inline auto DrawSprite(uint32_t texture, float a2, float a3, float a4, float a5, float angle, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<500, std::to_underlying(NativeHashes::DRAW_SPRITE), void>(texture, a2, a3, a4, a5, angle, r, g, b, a); }
    static inline auto DrawSpriteFrontBuff(float x0, float y0, float x1, float y1, float rotation, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<501, std::to_underlying(NativeHashes::DRAW_SPRITE_FRONT_BUFF), void>(x0, y0, x1, y1, rotation, r, g, b, a); }
    static inline auto DrawSpritePhoto(float x0, float y0, float x1, float y1, float rotation, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<502, std::to_underlying(NativeHashes::DRAW_SPRITE_PHOTO), void>(x0, y0, x1, y1, rotation, r, g, b, a); }
    static inline auto DrawSpriteWithFixedRotation(uint32_t texture, float a2, float a3, float a4, float a5, float angle, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<503, std::to_underlying(NativeHashes::DRAW_SPRITE_WITH_FIXED_ROTATION), void>(texture, a2, a3, a4, a5, angle, r, g, b, a); }
    static inline auto DrawSpriteWithUv(uint32_t texture, float a2, float a3, float a4, float a5, float angle, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<504, std::to_underlying(NativeHashes::DRAW_SPRITE_WITH_UV), void>(texture, a2, a3, a4, a5, angle, r, g, b, a); }
    static inline auto DrawSpriteWithUvCoords(uint32_t texture, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float angle, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<505, std::to_underlying(NativeHashes::DRAW_SPRITE_WITH_UV_COORDS), void>(texture, a2, a3, a4, a5, a6, a7, a8, a9, angle, r, g, b, a); }
    static inline auto DrawToplevelSprite(uint32_t texture, float a2, float a3, float a4, float a5, float angle, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<506, std::to_underlying(NativeHashes::DRAW_TOPLEVEL_SPRITE), void>(texture, a2, a3, a4, a5, angle, r, g, b, a); }
    static inline auto DrawWindow(float a1, float a2, float a3, float a4, char* str, uint32_t alpha) { return NativeInvoke::Invoke<507, std::to_underlying(NativeHashes::DRAW_WINDOW), void>(a1, a2, a3, a4, str, alpha); }
    static inline auto DrawWindowText(float a1, float a2, float a3, int a4, char* a5, int a6) { return NativeInvoke::Invoke<508, std::to_underlying(NativeHashes::DRAW_WINDOW_TEXT), void>(a1, a2, a3, a4, a5, a6); }
    static inline auto DropObject(Ped ped, bool unknownTrue) { return NativeInvoke::Invoke<509, std::to_underlying(NativeHashes::DROP_OBJECT), void>(ped, unknownTrue); }
    static inline auto EnableAllPedHelmets(bool enable) { return NativeInvoke::Invoke<510, std::to_underlying(NativeHashes::ENABLE_ALL_PED_HELMETS), void>(enable); }
    static inline auto EnableCamCollision(int32_t cam, bool enable) { return NativeInvoke::Invoke<511, std::to_underlying(NativeHashes::ENABLE_CAM_COLLISION), void>(cam, enable); }
    static inline auto EnableChaseAudio(bool enable) { return NativeInvoke::Invoke<512, std::to_underlying(NativeHashes::ENABLE_CHASE_AUDIO), void>(enable); }
    static inline auto EnableDebugCam(bool enable) { return NativeInvoke::Invoke<513, std::to_underlying(NativeHashes::ENABLE_DEBUG_CAM), void>(enable); }
    static inline auto EnableDeferredLighting(bool enable) { return NativeInvoke::Invoke<514, std::to_underlying(NativeHashes::ENABLE_DEFERRED_LIGHTING), void>(enable); }
    static inline auto EnableDisabledAttractorsOnObject(Object obj, bool enable) { return NativeInvoke::Invoke<515, std::to_underlying(NativeHashes::ENABLE_DISABLED_ATTRACTORS_ON_OBJECT), void>(obj, enable); }
    static inline auto EnableEndCreditsFade() { return NativeInvoke::Invoke<516, std::to_underlying(NativeHashes::ENABLE_END_CREDITS_FADE), void>(); }
    static inline auto EnableFancyWater(bool enable) { return NativeInvoke::Invoke<517, std::to_underlying(NativeHashes::ENABLE_FANCY_WATER), void>(enable); }
    static inline auto EnableFovLodMultiplier(bool enable) { return NativeInvoke::Invoke<518, std::to_underlying(NativeHashes::ENABLE_FOV_LOD_MULTIPLIER), void>(enable); }
    static inline auto EnableFrontendRadio() { return NativeInvoke::Invoke<519, std::to_underlying(NativeHashes::ENABLE_FRONTEND_RADIO), void>(); }
    static inline auto EnableGpsInVehicle(Vehicle veh, bool enable) { return NativeInvoke::Invoke<520, std::to_underlying(NativeHashes::ENABLE_GPS_IN_VEHICLE), void>(veh, enable); }
    static inline auto EnableMaxAmmoCap(bool enable) { return NativeInvoke::Invoke<521, std::to_underlying(NativeHashes::ENABLE_MAX_AMMO_CAP), void>(enable); }
    static inline auto EnablePedHelmet(Ped ped, bool enable) { return NativeInvoke::Invoke<522, std::to_underlying(NativeHashes::ENABLE_PED_HELMET), void>(ped, enable); }
    static inline auto EnablePoliceScanner() { return NativeInvoke::Invoke<523, std::to_underlying(NativeHashes::ENABLE_POLICE_SCANNER), void>(); }
    static inline auto EnableSaveHouse(uint32_t savehouse, bool enable) { return NativeInvoke::Invoke<524, std::to_underlying(NativeHashes::ENABLE_SAVE_HOUSE), void>(savehouse, enable); }
    static inline auto EnableSceneStreaming(bool enable) { return NativeInvoke::Invoke<525, std::to_underlying(NativeHashes::ENABLE_SCENE_STREAMING), void>(enable); }
    static inline auto EnableScriptControlledMicrophone() { return NativeInvoke::Invoke<526, std::to_underlying(NativeHashes::ENABLE_SCRIPT_CONTROLLED_MICROPHONE), bool>(); }
    static inline auto EnableShadows(bool enable) { return NativeInvoke::Invoke<527, std::to_underlying(NativeHashes::ENABLE_SHADOWS), void>(enable); }
    static inline auto EndCamCommands(int32_t* a1) { return NativeInvoke::Invoke<528, std::to_underlying(NativeHashes::END_CAM_COMMANDS), void>(a1); }
    static inline auto EndCharSearchCriteria() { return NativeInvoke::Invoke<529, std::to_underlying(NativeHashes::END_CHAR_SEARCH_CRITERIA), void>(); }
    static inline auto EndPedQueueMembershipList() { return NativeInvoke::Invoke<530, std::to_underlying(NativeHashes::END_PED_QUEUE_MEMBERSHIP_LIST), Any>(); }
    static inline auto EndWidgetGroup() { return NativeInvoke::Invoke<531, std::to_underlying(NativeHashes::END_WIDGET_GROUP), void>(); }
    static inline auto EvolvePtfx(uint32_t ptfx, char* evolvetype, float val) { return NativeInvoke::Invoke<532, std::to_underlying(NativeHashes::EVOLVE_PTFX), void>(ptfx, evolvetype, val); }
    static inline auto Exp(float a1) { return NativeInvoke::Invoke<533, std::to_underlying(NativeHashes::EXP), float>(a1); }
    static inline auto ExplodeCar(Vehicle vehicle, bool unknownTrue, bool unknownFalse) { return NativeInvoke::Invoke<534, std::to_underlying(NativeHashes::EXPLODE_CAR), void>(vehicle, unknownTrue, unknownFalse); }
    static inline auto ExplodeCarInCutscene(Car car, bool explode) { return NativeInvoke::Invoke<535, std::to_underlying(NativeHashes::EXPLODE_CAR_IN_CUTSCENE), void>(car, explode); }
    static inline auto ExplodeCarInCutsceneShakeAndBit(Car car, bool flag0, bool flag1, bool flag2) { return NativeInvoke::Invoke<536, std::to_underlying(NativeHashes::EXPLODE_CAR_IN_CUTSCENE_SHAKE_AND_BIT), void>(car, flag0, flag1, flag2); }
    static inline auto ExplodeCharHead(Ped ped) { return NativeInvoke::Invoke<537, std::to_underlying(NativeHashes::EXPLODE_CHAR_HEAD), void>(ped); }
    static inline auto ExtendPatrolRoute(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<538, std::to_underlying(NativeHashes::EXTEND_PATROL_ROUTE), void>(a1, a2, a3, a4, a5); }
    static inline auto ExtinguishCarFire(Vehicle vehicle) { return NativeInvoke::Invoke<539, std::to_underlying(NativeHashes::EXTINGUISH_CAR_FIRE), void>(vehicle); }
    static inline auto ExtinguishCharFire(Ped ped) { return NativeInvoke::Invoke<540, std::to_underlying(NativeHashes::EXTINGUISH_CHAR_FIRE), void>(ped); }
    static inline auto ExtinguishFireAtPoint(float x, float y, float z, float radius) { return NativeInvoke::Invoke<541, std::to_underlying(NativeHashes::EXTINGUISH_FIRE_AT_POINT), void>(x, y, z, radius); }
    static inline auto ExtinguishObjectFire(Object obj) { return NativeInvoke::Invoke<542, std::to_underlying(NativeHashes::EXTINGUISH_OBJECT_FIRE), void>(obj); }
    static inline auto FailKillFrenzy() { return NativeInvoke::Invoke<543, std::to_underlying(NativeHashes::FAIL_KILL_FRENZY), void>(); }
    static inline auto FakeDeatharrest() { return NativeInvoke::Invoke<544, std::to_underlying(NativeHashes::FAKE_DEATHARREST), void>(); }
    static inline auto FindMaxNumberOfGroupMembers() { return NativeInvoke::Invoke<545, std::to_underlying(NativeHashes::FIND_MAX_NUMBER_OF_GROUP_MEMBERS), int32_t>(); }
    static inline auto FindNearestCollectableBinBags(float x, float y, float z) { return NativeInvoke::Invoke<546, std::to_underlying(NativeHashes::FIND_NEAREST_COLLECTABLE_BIN_BAGS), void>(x, y, z); }
    static inline auto FindNearestEntitiesWithSpecialAttribute(float x, float y, float z) { return NativeInvoke::Invoke<547, std::to_underlying(NativeHashes::FIND_NEAREST_ENTITIES_WITH_SPECIAL_ATTRIBUTE), void>(x, y, z); }
    static inline auto FindNetworkKillerOfPlayer(Any a1) { return NativeInvoke::Invoke<548, std::to_underlying(NativeHashes::FIND_NETWORK_KILLER_OF_PLAYER), Any>(a1); }
    static inline auto FindNetworkRestartPoint(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<549, std::to_underlying(NativeHashes::FIND_NETWORK_RESTART_POINT), void>(a1, a2, a3); }
    static inline auto FindPositionInRecording(Car car) { return NativeInvoke::Invoke<550, std::to_underlying(NativeHashes::FIND_POSITION_IN_RECORDING), float>(car); }
    static inline auto FindPrimaryPopulationZoneGroup(int32_t* groupparam0, int32_t* groupparam1) { return NativeInvoke::Invoke<551, std::to_underlying(NativeHashes::FIND_PRIMARY_POPULATION_ZONE_GROUP), void>(groupparam0, groupparam1); }
    static inline auto FindStaticEmitterIndex(char* StaticEmitterName) { return NativeInvoke::Invoke<552, std::to_underlying(NativeHashes::FIND_STATIC_EMITTER_INDEX), int32_t>(StaticEmitterName); }
    static inline auto FindStreetNameAtPosition(float pX, float pY, float pZ, uint32_t* strHash0, uint32_t* strHash1) { return NativeInvoke::Invoke<553, std::to_underlying(NativeHashes::FIND_STREET_NAME_AT_POSITION), void>(pX, pY, pZ, strHash0, strHash1); }
    static inline auto FindTimePositionInRecording(Car car) { return NativeInvoke::Invoke<554, std::to_underlying(NativeHashes::FIND_TIME_POSITION_IN_RECORDING), float>(car); }
    static inline auto FindTrainDirection(Vehicle train) { return NativeInvoke::Invoke<555, std::to_underlying(NativeHashes::FIND_TRAIN_DIRECTION), int32_t>(train); }
    static inline auto FinishStreamingRequestList() { return NativeInvoke::Invoke<556, std::to_underlying(NativeHashes::FINISH_STREAMING_REQUEST_LIST), void>(); }
    static inline auto FinishWidgetCombo(Any a1, Any a2) { return NativeInvoke::Invoke<557, std::to_underlying(NativeHashes::FINISH_WIDGET_COMBO), Any>(a1, a2); }
    static inline auto FirePedWeapon(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<558, std::to_underlying(NativeHashes::FIRE_PED_WEAPON), void>(ped, x, y, z); }
    static inline auto FireSingleBullet(float x, float y, float z, float targetX, float targetY, float targetZ, uint32_t unknown) { return NativeInvoke::Invoke<559, std::to_underlying(NativeHashes::FIRE_SINGLE_BULLET), void>(x, y, z, targetX, targetY, targetZ, unknown); }
    static inline auto FixAmbienceOrientation(bool fix) { return NativeInvoke::Invoke<560, std::to_underlying(NativeHashes::FIX_AMBIENCE_ORIENTATION), void>(fix); }
    static inline auto FixCar(Vehicle vehicle) { return NativeInvoke::Invoke<561, std::to_underlying(NativeHashes::FIX_CAR), void>(vehicle); }
    static inline auto FixCarTyre(Vehicle vehicle, uint32_t tyre) { return NativeInvoke::Invoke<562, std::to_underlying(NativeHashes::FIX_CAR_TYRE), void>(vehicle, tyre); }
    static inline auto FixScriptMicToCurrentPosisition() { return NativeInvoke::Invoke<563, std::to_underlying(NativeHashes::FIX_SCRIPT_MIC_TO_CURRENT_POSISITION), void>(); }
    static inline auto FlashBlip(Blip blip, bool on) { return NativeInvoke::Invoke<564, std::to_underlying(NativeHashes::FLASH_BLIP), void>(blip, on); }
    static inline auto FlashBlipAlt(Blip blip, bool on) { return NativeInvoke::Invoke<565, std::to_underlying(NativeHashes::FLASH_BLIP_ALT), void>(blip, on); }
    static inline auto FlashRadar(bool flash) { return NativeInvoke::Invoke<566, std::to_underlying(NativeHashes::FLASH_RADAR), void>(flash); }
    static inline auto FlashRoute(bool flash) { return NativeInvoke::Invoke<567, std::to_underlying(NativeHashes::FLASH_ROUTE), void>(flash); }
    static inline auto FlashWeaponIcon(bool on) { return NativeInvoke::Invoke<568, std::to_underlying(NativeHashes::FLASH_WEAPON_ICON), void>(on); }
    static inline auto Floor(float value) { return NativeInvoke::Invoke<569, std::to_underlying(NativeHashes::FLOOR), int32_t>(value); }
    static inline auto FlushAllOutOfDateRadarBlipsFromMissionCleanupList() { return NativeInvoke::Invoke<570, std::to_underlying(NativeHashes::FLUSH_ALL_OUT_OF_DATE_RADAR_BLIPS_FROM_MISSION_CLEANUP_LIST), void>(); }
    static inline auto FlushAllPlayerRespawnCoords() { return NativeInvoke::Invoke<571, std::to_underlying(NativeHashes::FLUSH_ALL_PLAYER_RESPAWN_COORDS), void>(); }
    static inline auto FlushAllSpawnBlockingAreas() { return NativeInvoke::Invoke<572, std::to_underlying(NativeHashes::FLUSH_ALL_SPAWN_BLOCKING_AREAS), void>(); }
    static inline auto FlushCoverBlockingAreas() { return NativeInvoke::Invoke<573, std::to_underlying(NativeHashes::FLUSH_COVER_BLOCKING_AREAS), void>(); }
    static inline auto FlushPatrolRoute() { return NativeInvoke::Invoke<574, std::to_underlying(NativeHashes::FLUSH_PATROL_ROUTE), void>(); }
    static inline auto FlushScenarioBlockingAreas() { return NativeInvoke::Invoke<575, std::to_underlying(NativeHashes::FLUSH_SCENARIO_BLOCKING_AREAS), void>(); }
    static inline auto ForceAirDragMultForPlayersCar(int32_t player, float multiplier) { return NativeInvoke::Invoke<576, std::to_underlying(NativeHashes::FORCE_AIR_DRAG_MULT_FOR_PLAYERS_CAR), void>(player, multiplier); }
    static inline auto ForceAllVehicleLightsOff(bool off) { return NativeInvoke::Invoke<577, std::to_underlying(NativeHashes::FORCE_ALL_VEHICLE_LIGHTS_OFF), void>(off); }
    static inline auto ForceCarLights(Car car, int32_t lights) { return NativeInvoke::Invoke<578, std::to_underlying(NativeHashes::FORCE_CAR_LIGHTS), void>(car, lights); }
    static inline auto ForceCharToDropWeapon(Ped ped) { return NativeInvoke::Invoke<579, std::to_underlying(NativeHashes::FORCE_CHAR_TO_DROP_WEAPON), void>(ped); }
    static inline auto ForceFullVoice(Ped ped) { return NativeInvoke::Invoke<580, std::to_underlying(NativeHashes::FORCE_FULL_VOICE), void>(ped); }
    static inline auto ForceGameTelescopeCam(bool force) { return NativeInvoke::Invoke<581, std::to_underlying(NativeHashes::FORCE_GAME_TELESCOPE_CAM), void>(force); }
    static inline auto ForceGenerateParkedCarsTooCloseToOthers(bool set) { return NativeInvoke::Invoke<582, std::to_underlying(NativeHashes::FORCE_GENERATE_PARKED_CARS_TOO_CLOSE_TO_OTHERS), void>(set); }
    static inline auto ForceHighLod(bool force) { return NativeInvoke::Invoke<583, std::to_underlying(NativeHashes::FORCE_HIGH_LOD), void>(force); }
    static inline auto ForceInitialPlayerStation(char* stationName) { return NativeInvoke::Invoke<584, std::to_underlying(NativeHashes::FORCE_INITIAL_PLAYER_STATION), void>(stationName); }
    static inline auto ForceInteriorLightingForPlayer(int32_t player, bool force) { return NativeInvoke::Invoke<585, std::to_underlying(NativeHashes::FORCE_INTERIOR_LIGHTING_FOR_PLAYER), void>(player, force); }
    static inline auto ForceLoadingScreen(bool force) { return NativeInvoke::Invoke<586, std::to_underlying(NativeHashes::FORCE_LOADING_SCREEN), void>(force); }
    static inline auto ForceNetPlayerInvisible() { return NativeInvoke::Invoke<587, std::to_underlying(NativeHashes::FORCE_NET_PLAYER_INVISIBLE), Any>(); }
    static inline auto ForceNoCamPause(bool foce) { return NativeInvoke::Invoke<588, std::to_underlying(NativeHashes::FORCE_NO_CAM_PAUSE), void>(foce); }
    static inline auto ForceNoiseOff(bool off) { return NativeInvoke::Invoke<589, std::to_underlying(NativeHashes::FORCE_NOISE_OFF), void>(off); }
    static inline auto ForcePedPinnedDown(Ped ped, bool force, uint32_t timerMaybe) { return NativeInvoke::Invoke<590, std::to_underlying(NativeHashes::FORCE_PED_PINNED_DOWN), void>(ped, force, timerMaybe); }
    static inline auto ForcePedToFleeWhilstDrivingVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<591, std::to_underlying(NativeHashes::FORCE_PED_TO_FLEE_WHILST_DRIVING_VEHICLE), void>(ped, vehicle); }
    static inline auto ForcePedToLoadCover(Ped ped, bool force) { return NativeInvoke::Invoke<592, std::to_underlying(NativeHashes::FORCE_PED_TO_LOAD_COVER), void>(ped, force); }
    static inline auto ForcePopulationInit() { return NativeInvoke::Invoke<593, std::to_underlying(NativeHashes::FORCE_POPULATION_INIT), void>(); }
    static inline auto ForceRadioTrack(char* radiostation, char* trackname, int a3, int a4) { return NativeInvoke::Invoke<594, std::to_underlying(NativeHashes::FORCE_RADIO_TRACK), void>(radiostation, trackname, a3, a4); }
    static inline auto ForceRandomCarModel(uint32_t hash) { return NativeInvoke::Invoke<595, std::to_underlying(NativeHashes::FORCE_RANDOM_CAR_MODEL), void>(hash); }
    static inline auto ForceRandomPedType(uint32_t type) { return NativeInvoke::Invoke<596, std::to_underlying(NativeHashes::FORCE_RANDOM_PED_TYPE), void>(type); }
    static inline auto ForceSpawnScenarioPedsInArea(float x, float y, float z, float radius, int a5) { return NativeInvoke::Invoke<597, std::to_underlying(NativeHashes::FORCE_SPAWN_SCENARIO_PEDS_IN_AREA), void>(x, y, z, radius, a5); }
    static inline auto ForceTimeOfDay(uint32_t hour, uint32_t minute) { return NativeInvoke::Invoke<598, std::to_underlying(NativeHashes::FORCE_TIME_OF_DAY), void>(hour, minute); }
    static inline auto ForceWeather(uint32_t weather) { return NativeInvoke::Invoke<599, std::to_underlying(NativeHashes::FORCE_WEATHER), void>(weather); }
    static inline auto ForceWeatherNow(uint32_t weather) { return NativeInvoke::Invoke<600, std::to_underlying(NativeHashes::FORCE_WEATHER_NOW), void>(weather); }
    static inline auto ForceWind(float wind) { return NativeInvoke::Invoke<601, std::to_underlying(NativeHashes::FORCE_WIND), void>(wind); }
    static inline auto ForwardToTimeOfDay(uint32_t hour, uint32_t minute) { return NativeInvoke::Invoke<602, std::to_underlying(NativeHashes::FORWARD_TO_TIME_OF_DAY), void>(hour, minute); }
    static inline auto FreezeCarPosition(Vehicle vehicle, bool frozen) { return NativeInvoke::Invoke<603, std::to_underlying(NativeHashes::FREEZE_CAR_POSITION), void>(vehicle, frozen); }
    static inline auto FreezeCarPositionAndDontLoadCollision(Vehicle vehicle, bool frozen) { return NativeInvoke::Invoke<604, std::to_underlying(NativeHashes::FREEZE_CAR_POSITION_AND_DONT_LOAD_COLLISION), void>(vehicle, frozen); }
    static inline auto FreezeCharPosition(Ped ped, bool frozen) { return NativeInvoke::Invoke<605, std::to_underlying(NativeHashes::FREEZE_CHAR_POSITION), void>(ped, frozen); }
    static inline auto FreezeCharPositionAndDontLoadCollision(Ped ped, bool frozen) { return NativeInvoke::Invoke<606, std::to_underlying(NativeHashes::FREEZE_CHAR_POSITION_AND_DONT_LOAD_COLLISION), void>(ped, frozen); }
    static inline auto FreezeObjectPosition(Object obj, bool set) { return NativeInvoke::Invoke<607, std::to_underlying(NativeHashes::FREEZE_OBJECT_POSITION), void>(obj, set); }
    static inline auto FreezeObjectPositionAndDontLoadCollision(Object obj, bool freeze) { return NativeInvoke::Invoke<608, std::to_underlying(NativeHashes::FREEZE_OBJECT_POSITION_AND_DONT_LOAD_COLLISION), void>(obj, freeze); }
    static inline auto FreezeOnscreenTimer(bool freeze) { return NativeInvoke::Invoke<609, std::to_underlying(NativeHashes::FREEZE_ONSCREEN_TIMER), void>(freeze); }
    static inline auto FreezePositionOfClosestObjectOfType(float x, float y, float z, float radius, uint32_t model, bool frozen) { return NativeInvoke::Invoke<610, std::to_underlying(NativeHashes::FREEZE_POSITION_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, model, frozen); }
    static inline auto FreezeRadioStation(char* stationName) { return NativeInvoke::Invoke<611, std::to_underlying(NativeHashes::FREEZE_RADIO_STATION), void>(stationName); }
    static inline auto GetBlipName(Blip blip) { return NativeInvoke::Invoke<612, std::to_underlying(NativeHashes::GET_BLIP_NAME), char*>(blip); }
    static inline auto GetCharCoordinates(Ped ped, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<613, std::to_underlying(NativeHashes::GET_CHAR_COORDINATES), void>(ped, pX, pY, pZ); }
    static inline auto GetDeadCharCoordinates(Ped ped, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<614, std::to_underlying(NativeHashes::GET_DEAD_CHAR_COORDINATES), void>(ped, pX, pY, pZ); }
    static inline auto GenerateDirections(float x, float y, float z, int32_t* direction, Vector3* a5) { return NativeInvoke::Invoke<615, std::to_underlying(NativeHashes::GENERATE_DIRECTIONS), void>(x, y, z, direction, a5); }
    static inline auto GenerateRandomFloat(float* a1) { return NativeInvoke::Invoke<616, std::to_underlying(NativeHashes::GENERATE_RANDOM_FLOAT), void>(a1); }
    static inline auto GenerateRandomFloatInRange(float min, float max, float* pValue) { return NativeInvoke::Invoke<617, std::to_underlying(NativeHashes::GENERATE_RANDOM_FLOAT_IN_RANGE), void>(min, max, pValue); }
    static inline auto GenerateRandomInt(int32_t* a1) { return NativeInvoke::Invoke<618, std::to_underlying(NativeHashes::GENERATE_RANDOM_INT), void>(a1); }
    static inline auto GenerateRandomIntInRange(uint32_t min, uint32_t max, uint32_t* pValue) { return NativeInvoke::Invoke<619, std::to_underlying(NativeHashes::GENERATE_RANDOM_INT_IN_RANGE), void>(min, max, pValue); }
    static inline auto GetAcceptButton() { return NativeInvoke::Invoke<620, std::to_underlying(NativeHashes::GET_ACCEPT_BUTTON), int32_t>(); }
    static inline auto GetAmmoInCharWeapon(Ped ped, uint32_t weapon, uint32_t* pAmmo) { return NativeInvoke::Invoke<621, std::to_underlying(NativeHashes::GET_AMMO_IN_CHAR_WEAPON), void>(ped, weapon, pAmmo); }
    static inline auto GetAmmoInClip(Ped ped, uint32_t weapon, uint32_t* pAmmo) { return NativeInvoke::Invoke<622, std::to_underlying(NativeHashes::GET_AMMO_IN_CLIP), bool>(ped, weapon, pAmmo); }
    static inline auto GetAngleBetween2dVectors(float x1, float y1, float x2, float y2, float* pResult) { return NativeInvoke::Invoke<623, std::to_underlying(NativeHashes::GET_ANGLE_BETWEEN_2D_VECTORS), void>(x1, y1, x2, y2, pResult); }
    static inline auto GetAnimGroupFromChar(Ped ped) { return NativeInvoke::Invoke<624, std::to_underlying(NativeHashes::GET_ANIM_GROUP_FROM_CHAR), char*>(ped); }
    static inline auto GetAsciiJustPressed(int32_t key, int a2) { return NativeInvoke::Invoke<625, std::to_underlying(NativeHashes::GET_ASCII_JUST_PRESSED), int32_t>(key, a2); }
    static inline auto GetAsciiPressed(int32_t key, int32_t* a2) { return NativeInvoke::Invoke<626, std::to_underlying(NativeHashes::GET_ASCII_PRESSED), bool>(key, a2); }
    static inline auto GetAspectRatio() { return NativeInvoke::Invoke<627, std::to_underlying(NativeHashes::GET_ASPECT_RATIO), float>(); }
    static inline auto GetAudibleMusicTrackTextId() { return NativeInvoke::Invoke<628, std::to_underlying(NativeHashes::GET_AUDIBLE_MUSIC_TRACK_TEXT_ID), int32_t>(); }
    static inline auto GetAudioRoomId() { return NativeInvoke::Invoke<629, std::to_underlying(NativeHashes::GET_AUDIO_ROOM_ID), int32_t>(); }
    static inline auto GetBitsInRange(int32_t val, int32_t rangebegin, int32_t rangeend) { return NativeInvoke::Invoke<630, std::to_underlying(NativeHashes::GET_BITS_IN_RANGE), int32_t>(val, rangebegin, rangeend); }
    static inline auto GetBlipAlpha(int32_t blip, int32_t* alpha) { return NativeInvoke::Invoke<631, std::to_underlying(NativeHashes::GET_BLIP_ALPHA), void>(blip, alpha); }
    static inline auto GetBlipColour(Blip blip, ColourIndex* pColour) { return NativeInvoke::Invoke<632, std::to_underlying(NativeHashes::GET_BLIP_COLOUR), void>(blip, pColour); }
    static inline auto GetBlipCoords(Blip blip, Vector3* pVector) { return NativeInvoke::Invoke<633, std::to_underlying(NativeHashes::GET_BLIP_COORDS), void>(blip, pVector); }
    static inline auto GetBlipInfoIdCarIndex(Blip blip) { return NativeInvoke::Invoke<634, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_CAR_INDEX), Vehicle>(blip); }
    static inline auto GetBlipInfoIdDisplay(Blip blip) { return NativeInvoke::Invoke<635, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_DISPLAY), uint32_t>(blip); }
    static inline auto GetBlipInfoIdObjectIndex(Blip blip) { return NativeInvoke::Invoke<636, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_OBJECT_INDEX), Object>(blip); }
    static inline auto GetBlipInfoIdPedIndex(Blip blip) { return NativeInvoke::Invoke<637, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_PED_INDEX), Ped>(blip); }
    static inline auto GetBlipInfoIdPickupIndex(Blip blip) { return NativeInvoke::Invoke<638, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_PICKUP_INDEX), Pickup>(blip); }
    static inline auto GetBlipInfoIdPosition() { return NativeInvoke::Invoke<639, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_POSITION), Any>(); }
    static inline auto GetBlipInfoIdRotation(int32_t blip) { return NativeInvoke::Invoke<640, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_ROTATION), int32_t>(blip); }
    static inline auto GetBlipInfoIdType(Blip blip) { return NativeInvoke::Invoke<641, std::to_underlying(NativeHashes::GET_BLIP_INFO_ID_TYPE), uint32_t>(blip); }
    static inline auto GetBlipSprite(Blip blip) { return NativeInvoke::Invoke<642, std::to_underlying(NativeHashes::GET_BLIP_SPRITE), uint32_t>(blip); }
    static inline auto GetBufferedAscii(int32_t key, int32_t* a2) { return NativeInvoke::Invoke<643, std::to_underlying(NativeHashes::GET_BUFFERED_ASCII), bool>(key, a2); }
    static inline auto GetCamFarClip(int32_t cam, float* clip) { return NativeInvoke::Invoke<644, std::to_underlying(NativeHashes::GET_CAM_FAR_CLIP), void>(cam, clip); }
    static inline auto GetCamFarDof(int32_t cam, float* fardof) { return NativeInvoke::Invoke<645, std::to_underlying(NativeHashes::GET_CAM_FAR_DOF), void>(cam, fardof); }
    static inline auto GetCamFov(Camera camera, float* fov) { return NativeInvoke::Invoke<646, std::to_underlying(NativeHashes::GET_CAM_FOV), void>(camera, fov); }
    static inline auto GetCamMotionBlur(int32_t cam, int32_t* blur) { return NativeInvoke::Invoke<647, std::to_underlying(NativeHashes::GET_CAM_MOTION_BLUR), void>(cam, blur); }
    static inline auto GetCamNearClip(int32_t cam, float* clip) { return NativeInvoke::Invoke<648, std::to_underlying(NativeHashes::GET_CAM_NEAR_CLIP), void>(cam, clip); }
    static inline auto GetCamNearDof(int32_t cam, float* dof) { return NativeInvoke::Invoke<649, std::to_underlying(NativeHashes::GET_CAM_NEAR_DOF), void>(cam, dof); }
    static inline auto GetCamPos(Camera camera, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<650, std::to_underlying(NativeHashes::GET_CAM_POS), void>(camera, pX, pY, pZ); }
    static inline auto GetCamRot(Camera camera, float* angleX, float* angleY, float* angleZ) { return NativeInvoke::Invoke<651, std::to_underlying(NativeHashes::GET_CAM_ROT), void>(camera, angleX, angleY, angleZ); }
    static inline auto GetCamState(int32_t cam) { return NativeInvoke::Invoke<652, std::to_underlying(NativeHashes::GET_CAM_STATE), int32_t>(cam); }
    static inline auto GetCameraFromNetworkId() { return NativeInvoke::Invoke<653, std::to_underlying(NativeHashes::GET_CAMERA_FROM_NETWORK_ID), Any>(); }
    static inline auto GetCarAnimCurrentTime(Car car, char* animname0, char* animname1, float* time) { return NativeInvoke::Invoke<654, std::to_underlying(NativeHashes::GET_CAR_ANIM_CURRENT_TIME), void>(car, animname0, animname1, time); }
    static inline auto GetCarAnimTotalTime(Car car, char* animname0, char* animname1, float* time) { return NativeInvoke::Invoke<655, std::to_underlying(NativeHashes::GET_CAR_ANIM_TOTAL_TIME), void>(car, animname0, animname1, time); }
    static inline auto GetCarBlockingCar(Car car0, Car* car1) { return NativeInvoke::Invoke<656, std::to_underlying(NativeHashes::GET_CAR_BLOCKING_CAR), void>(car0, car1); }
    static inline auto GetCarCharIsUsing(Ped ped, Vehicle* pVehicle) { return NativeInvoke::Invoke<657, std::to_underlying(NativeHashes::GET_CAR_CHAR_IS_USING), void>(ped, pVehicle); }
    static inline auto GetCarColours(Vehicle vehicle, ColourIndex* pColour1, ColourIndex* pColour2) { return NativeInvoke::Invoke<658, std::to_underlying(NativeHashes::GET_CAR_COLOURS), void>(vehicle, pColour1, pColour2); }
    static inline auto GetCarCoordinates(Vehicle vehicle, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<659, std::to_underlying(NativeHashes::GET_CAR_COORDINATES), void>(vehicle, pX, pY, pZ); }
    static inline auto GetCarDeformationAtPos(Vehicle vehicle, float x, float y, float z, Vector3* pDeformation) { return NativeInvoke::Invoke<660, std::to_underlying(NativeHashes::GET_CAR_DEFORMATION_AT_POS), void>(vehicle, x, y, z, pDeformation); }
    static inline auto GetCarDoorLockStatus(Vehicle vehicle, uint32_t* pValue) { return NativeInvoke::Invoke<661, std::to_underlying(NativeHashes::GET_CAR_DOOR_LOCK_STATUS), void>(vehicle, pValue); }
    static inline auto GetCarForwardVector(Car car, Vector3* vec) { return NativeInvoke::Invoke<662, std::to_underlying(NativeHashes::GET_CAR_FORWARD_VECTOR), void>(car, vec); }
    static inline auto GetCarForwardX(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<663, std::to_underlying(NativeHashes::GET_CAR_FORWARD_X), void>(vehicle, pValue); }
    static inline auto GetCarForwardY(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<664, std::to_underlying(NativeHashes::GET_CAR_FORWARD_Y), void>(vehicle, pValue); }
    static inline auto GetCarHeading(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<665, std::to_underlying(NativeHashes::GET_CAR_HEADING), void>(vehicle, pValue); }
    static inline auto GetCarHealth(Vehicle vehicle, uint32_t* pValue) { return NativeInvoke::Invoke<666, std::to_underlying(NativeHashes::GET_CAR_HEALTH), void>(vehicle, pValue); }
    static inline auto GetCarLivery(Car car, int32_t* livery) { return NativeInvoke::Invoke<667, std::to_underlying(NativeHashes::GET_CAR_LIVERY), void>(car, livery); }
    static inline auto GetCarMass(Car car, float* mass) { return NativeInvoke::Invoke<668, std::to_underlying(NativeHashes::GET_CAR_MASS), void>(car, mass); }
    static inline auto GetCarModel(Vehicle vehicle, uint32_t* pValue) { return NativeInvoke::Invoke<669, std::to_underlying(NativeHashes::GET_CAR_MODEL), void>(vehicle, pValue); }
    static inline auto GetCarModelValue(Car car, int32_t* value) { return NativeInvoke::Invoke<670, std::to_underlying(NativeHashes::GET_CAR_MODEL_VALUE), void>(car, value); }
    static inline auto GetCarObjectIsAttachedTo(Object obj) { return NativeInvoke::Invoke<671, std::to_underlying(NativeHashes::GET_CAR_OBJECT_IS_ATTACHED_TO), Vehicle>(obj); }
    static inline auto GetCarPitch(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<672, std::to_underlying(NativeHashes::GET_CAR_PITCH), void>(vehicle, pValue); }
    static inline auto GetCarRoll(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<673, std::to_underlying(NativeHashes::GET_CAR_ROLL), void>(vehicle, pValue); }
    static inline auto GetCarSirenHealth(Car car) { return NativeInvoke::Invoke<674, std::to_underlying(NativeHashes::GET_CAR_SIREN_HEALTH), int32_t>(car); }
    static inline auto GetCarSpeed(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<675, std::to_underlying(NativeHashes::GET_CAR_SPEED), void>(vehicle, pValue); }
    static inline auto GetCarSpeedVector(Vehicle vehicle, Vector3* pVector, bool unknownFalse) { return NativeInvoke::Invoke<676, std::to_underlying(NativeHashes::GET_CAR_SPEED_VECTOR), void>(vehicle, pVector, unknownFalse); }
    static inline auto GetCarUprightValue(Vehicle vehicle, float* pValue) { return NativeInvoke::Invoke<677, std::to_underlying(NativeHashes::GET_CAR_UPRIGHT_VALUE), void>(vehicle, pValue); }
    static inline auto GetCellphoneRanked() { return NativeInvoke::Invoke<678, std::to_underlying(NativeHashes::GET_CELLPHONE_RANKED), Any>(); }
    static inline auto GetCharAllowedToRunOnBoats(Ped ped) { return NativeInvoke::Invoke<679, std::to_underlying(NativeHashes::GET_CHAR_ALLOWED_TO_RUN_ON_BOATS), bool>(ped); }
    static inline auto GetCharAnimBlendAmount(Ped ped, char* AnimName0, char* AnimName1, float* amount) { return NativeInvoke::Invoke<680, std::to_underlying(NativeHashes::GET_CHAR_ANIM_BLEND_AMOUNT), void>(ped, AnimName0, AnimName1, amount); }
    static inline auto GetCharAnimCurrentTime(Ped ped, char* animGroup, char* animName, float* pValue) { return NativeInvoke::Invoke<681, std::to_underlying(NativeHashes::GET_CHAR_ANIM_CURRENT_TIME), void>(ped, animGroup, animName, pValue); }
    static inline auto GetCharAnimEventTime() { return NativeInvoke::Invoke<682, std::to_underlying(NativeHashes::GET_CHAR_ANIM_EVENT_TIME), Any>(); }
    static inline auto GetCharAnimIsEvent(Ped ped, char* AnimName0, char* AnimName1, bool flag) { return NativeInvoke::Invoke<683, std::to_underlying(NativeHashes::GET_CHAR_ANIM_IS_EVENT), bool>(ped, AnimName0, AnimName1, flag); }
    static inline auto GetCharAnimTotalTime(Ped ped, char* animGroup, char* animName, float* pValue) { return NativeInvoke::Invoke<684, std::to_underlying(NativeHashes::GET_CHAR_ANIM_TOTAL_TIME), void>(ped, animGroup, animName, pValue); }
    static inline auto GetCharAreaVisible() { return NativeInvoke::Invoke<685, std::to_underlying(NativeHashes::GET_CHAR_AREA_VISIBLE), Any>(); }
    static inline auto GetCharArmour(Ped ped, uint32_t* pArmour) { return NativeInvoke::Invoke<686, std::to_underlying(NativeHashes::GET_CHAR_ARMOUR), void>(ped, pArmour); }
    static inline auto GetCharDrawableVariation(Ped ped, uint32_t component) { return NativeInvoke::Invoke<687, std::to_underlying(NativeHashes::GET_CHAR_DRAWABLE_VARIATION), uint32_t>(ped, component); }
    static inline auto GetCharExtractedDisplacement(Ped ped, bool unknown, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<688, std::to_underlying(NativeHashes::GET_CHAR_EXTRACTED_DISPLACEMENT), void>(ped, unknown, pX, pY, pZ); }
    static inline auto GetCharExtractedVelocity(Ped ped, bool a2, float* x, float* y, float* z) { return NativeInvoke::Invoke<689, std::to_underlying(NativeHashes::GET_CHAR_EXTRACTED_VELOCITY), void>(ped, a2, x, y, z); }
    static inline auto GetCharGravity(Ped ped) { return NativeInvoke::Invoke<690, std::to_underlying(NativeHashes::GET_CHAR_GRAVITY), int32_t>(ped); }
    static inline auto GetCharHeading(Ped ped, float* pValue) { return NativeInvoke::Invoke<691, std::to_underlying(NativeHashes::GET_CHAR_HEADING), void>(ped, pValue); }
    static inline auto GetCharHealth(Ped ped, uint32_t* pHealth) { return NativeInvoke::Invoke<692, std::to_underlying(NativeHashes::GET_CHAR_HEALTH), void>(ped, pHealth); }
    static inline auto GetCharHeightAboveGround(Ped ped, float* pValue) { return NativeInvoke::Invoke<693, std::to_underlying(NativeHashes::GET_CHAR_HEIGHT_ABOVE_GROUND), void>(ped, pValue); }
    static inline auto GetCharHighestPriorityEvent(Ped ped, int32_t* event) { return NativeInvoke::Invoke<694, std::to_underlying(NativeHashes::GET_CHAR_HIGHEST_PRIORITY_EVENT), void>(ped, event); }
    static inline auto GetCharInCarPassengerSeat(Vehicle vehicle, uint32_t seatIndex, Ped* pPed) { return NativeInvoke::Invoke<695, std::to_underlying(NativeHashes::GET_CHAR_IN_CAR_PASSENGER_SEAT), void>(vehicle, seatIndex, pPed); }
    static inline auto GetCharLastDamageBone(Ped ped, uint32_t* pBone) { return NativeInvoke::Invoke<696, std::to_underlying(NativeHashes::GET_CHAR_LAST_DAMAGE_BONE), Any>(ped, pBone); }
    static inline auto GetCharMaxMoveBlendRatio(Ped ped) { return NativeInvoke::Invoke<697, std::to_underlying(NativeHashes::GET_CHAR_MAX_MOVE_BLEND_RATIO), float>(ped); }
    static inline auto GetCharMeleeActionFlag0(Ped ped) { return NativeInvoke::Invoke<698, std::to_underlying(NativeHashes::GET_CHAR_MELEE_ACTION_FLAG0), bool>(ped); }
    static inline auto GetCharMeleeActionFlag1(Ped ped) { return NativeInvoke::Invoke<699, std::to_underlying(NativeHashes::GET_CHAR_MELEE_ACTION_FLAG1), bool>(ped); }
    static inline auto GetCharMeleeActionFlag2(Ped ped) { return NativeInvoke::Invoke<700, std::to_underlying(NativeHashes::GET_CHAR_MELEE_ACTION_FLAG2), bool>(ped); }
    static inline auto GetCharModel(Ped ped, uint32_t* pModel) { return NativeInvoke::Invoke<701, std::to_underlying(NativeHashes::GET_CHAR_MODEL), void>(ped, pModel); }
    static inline auto GetCharMoney(Ped ped) { return NativeInvoke::Invoke<702, std::to_underlying(NativeHashes::GET_CHAR_MONEY), uint32_t>(ped); }
    static inline auto GetCharMoveAnimSpeedMultiplier(Ped ped, float* multiplier) { return NativeInvoke::Invoke<703, std::to_underlying(NativeHashes::GET_CHAR_MOVE_ANIM_SPEED_MULTIPLIER), void>(ped, multiplier); }
    static inline auto GetCharMovementAnimsBlocked(Ped ped) { return NativeInvoke::Invoke<704, std::to_underlying(NativeHashes::GET_CHAR_MOVEMENT_ANIMS_BLOCKED), bool>(ped); }
    static inline auto GetCharPropIndex(Ped ped, bool unknown, uint32_t* pIndex) { return NativeInvoke::Invoke<705, std::to_underlying(NativeHashes::GET_CHAR_PROP_INDEX), void>(ped, unknown, pIndex); }
    static inline auto GetCharReadyToBeExecuted(Ped ped) { return NativeInvoke::Invoke<706, std::to_underlying(NativeHashes::GET_CHAR_READY_TO_BE_EXECUTED), bool>(ped); }
    static inline auto GetCharReadyToBeStunned(Ped ped) { return NativeInvoke::Invoke<707, std::to_underlying(NativeHashes::GET_CHAR_READY_TO_BE_STUNNED), bool>(ped); }
    static inline auto GetCharSpeed(Ped ped, float* pValue) { return NativeInvoke::Invoke<708, std::to_underlying(NativeHashes::GET_CHAR_SPEED), void>(ped, pValue); }
    static inline auto GetCharSwimState(Ped ped, int32_t* state) { return NativeInvoke::Invoke<709, std::to_underlying(NativeHashes::GET_CHAR_SWIM_STATE), bool>(ped, state); }
    static inline auto GetCharTextureVariation(Ped ped, uint32_t component) { return NativeInvoke::Invoke<710, std::to_underlying(NativeHashes::GET_CHAR_TEXTURE_VARIATION), uint32_t>(ped, component); }
    static inline auto GetCharVelocity(Ped ped, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<711, std::to_underlying(NativeHashes::GET_CHAR_VELOCITY), void>(ped, pX, pY, pZ); }
    static inline auto GetCharWalkAlongsideLeaderWhenAppropriate(Ped ped) { return NativeInvoke::Invoke<712, std::to_underlying(NativeHashes::GET_CHAR_WALK_ALONGSIDE_LEADER_WHEN_APPROPRIATE), bool>(ped); }
    static inline auto GetCharWeaponInSlot(Ped ped, uint32_t slot, uint32_t* pWeapon, uint32_t* pAmmo0, uint32_t* pAmmo1) { return NativeInvoke::Invoke<713, std::to_underlying(NativeHashes::GET_CHAR_WEAPON_IN_SLOT), void>(ped, slot, pWeapon, pAmmo0, pAmmo1); }
    static inline auto GetCharWillCowerInsteadOfFleeing(Ped ped) { return NativeInvoke::Invoke<714, std::to_underlying(NativeHashes::GET_CHAR_WILL_COWER_INSTEAD_OF_FLEEING), bool>(ped); }
    static inline auto GetCharWillTryToLeaveBoatAfterLeader(Ped ped) { return NativeInvoke::Invoke<715, std::to_underlying(NativeHashes::GET_CHAR_WILL_TRY_TO_LEAVE_BOAT_AFTER_LEADER), bool>(ped); }
    static inline auto GetCharWillTryToLeaveWater(Ped ped) { return NativeInvoke::Invoke<716, std::to_underlying(NativeHashes::GET_CHAR_WILL_TRY_TO_LEAVE_WATER), bool>(ped); }
    static inline auto GetCinematicCam(int32_t* cam) { return NativeInvoke::Invoke<717, std::to_underlying(NativeHashes::GET_CINEMATIC_CAM), void>(cam); }
    static inline auto GetClosestCar(float x, float y, float z, float radius, bool unknownFalse, uint32_t unknown70) { return NativeInvoke::Invoke<718, std::to_underlying(NativeHashes::GET_CLOSEST_CAR), Vehicle>(x, y, z, radius, unknownFalse, unknown70); }
    static inline auto GetClosestCarNode(float x, float y, float z, float* pResX, float* pResY, float* pResZ) { return NativeInvoke::Invoke<719, std::to_underlying(NativeHashes::GET_CLOSEST_CAR_NODE), bool>(x, y, z, pResX, pResY, pResZ); }
    static inline auto GetClosestCarNodeFavourDirection(int a1, float x, float y, float z, float* pX, float* pY, float* pZ, float* heading) { return NativeInvoke::Invoke<720, std::to_underlying(NativeHashes::GET_CLOSEST_CAR_NODE_FAVOUR_DIRECTION), bool>(a1, x, y, z, pX, pY, pZ, heading); }
    static inline auto GetClosestCarNodeWithHeading(float x, float y, float z, float* pResX, float* pResY, float* pResZ, float* pHeading) { return NativeInvoke::Invoke<721, std::to_underlying(NativeHashes::GET_CLOSEST_CAR_NODE_WITH_HEADING), bool>(x, y, z, pResX, pResY, pResZ, pHeading); }
    static inline auto GetClosestChar(float x, float y, float z, float radius, bool unknown1, bool unknown2, Ped* pPed) { return NativeInvoke::Invoke<722, std::to_underlying(NativeHashes::GET_CLOSEST_CHAR), bool>(x, y, z, radius, unknown1, unknown2, pPed); }
    static inline auto GetClosestMajorCarNode(float x, float y, float z, float* pResX, float* pResY, float* pResZ) { return NativeInvoke::Invoke<723, std::to_underlying(NativeHashes::GET_CLOSEST_MAJOR_CAR_NODE), bool>(x, y, z, pResX, pResY, pResZ); }
    static inline auto GetClosestNetworkRestartNode(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<724, std::to_underlying(NativeHashes::GET_CLOSEST_NETWORK_RESTART_NODE), Any>(a1, a2, a3, a4, a5); }
    static inline auto GetClosestRoad(float x, float y, float z, float a4, int a5, Vector3* a6, Vector3* a7, float* a8, float* a9, float* a10) { return NativeInvoke::Invoke<725, std::to_underlying(NativeHashes::GET_CLOSEST_ROAD), bool>(x, y, z, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto GetClosestStealableObject(float x, float y, float z, float radius, Object* obj) { return NativeInvoke::Invoke<726, std::to_underlying(NativeHashes::GET_CLOSEST_STEALABLE_OBJECT), void>(x, y, z, radius, obj); }
    static inline auto GetClosestStraightRoad() { return NativeInvoke::Invoke<727, std::to_underlying(NativeHashes::GET_CLOSEST_STRAIGHT_ROAD), Any>(); }
    static inline auto GetConsoleCommand() { return NativeInvoke::Invoke<728, std::to_underlying(NativeHashes::GET_CONSOLE_COMMAND), Any>(); }
    static inline auto GetConsoleCommandToken() { return NativeInvoke::Invoke<729, std::to_underlying(NativeHashes::GET_CONSOLE_COMMAND_TOKEN), int32_t>(); }
    static inline auto GetContentsOfTextWidget(Any a1) { return NativeInvoke::Invoke<730, std::to_underlying(NativeHashes::GET_CONTENTS_OF_TEXT_WIDGET), Any>(a1); }
    static inline auto GetControlValue(int padIndex, int32_t controlID) { return NativeInvoke::Invoke<731, std::to_underlying(NativeHashes::GET_CONTROL_VALUE), int32_t>(padIndex, controlID); }
    static inline auto GetCoordinatesForNetworkRestartNode(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<732, std::to_underlying(NativeHashes::GET_COORDINATES_FOR_NETWORK_RESTART_NODE), void>(a1, a2, a3); }
    static inline auto GetCorrectedColour(uint32_t r, uint32_t g, uint32_t b, uint32_t* pR, uint32_t* pG, uint32_t* pB) { return NativeInvoke::Invoke<733, std::to_underlying(NativeHashes::GET_CORRECTED_COLOUR), void>(r, g, b, pR, pG, pB); }
    static inline auto GetCreateRandomCops() { return NativeInvoke::Invoke<734, std::to_underlying(NativeHashes::GET_CREATE_RANDOM_COPS), bool>(); }
    static inline auto GetCurrentBasicCopModel(uint32_t* pModel) { return NativeInvoke::Invoke<735, std::to_underlying(NativeHashes::GET_CURRENT_BASIC_COP_MODEL), void>(pModel); }
    static inline auto GetCurrentBasicPoliceCarModel(uint32_t* pModel) { return NativeInvoke::Invoke<736, std::to_underlying(NativeHashes::GET_CURRENT_BASIC_POLICE_CAR_MODEL), void>(pModel); }
    static inline auto GetCurrentCharWeapon(Ped ped, uint32_t* pWeapon) { return NativeInvoke::Invoke<737, std::to_underlying(NativeHashes::GET_CURRENT_CHAR_WEAPON), bool>(ped, pWeapon); }
    static inline auto GetCurrentCopModel(uint32_t* pModel) { return NativeInvoke::Invoke<738, std::to_underlying(NativeHashes::GET_CURRENT_COP_MODEL), void>(pModel); }
    static inline auto GetCurrentDate(uint32_t* day, uint32_t* month) { return NativeInvoke::Invoke<739, std::to_underlying(NativeHashes::GET_CURRENT_DATE), void>(day, month); }
    static inline auto GetCurrentDayOfWeek() { return NativeInvoke::Invoke<740, std::to_underlying(NativeHashes::GET_CURRENT_DAY_OF_WEEK), uint32_t>(); }
    static inline auto GetCurrentEpisode() { return NativeInvoke::Invoke<741, std::to_underlying(NativeHashes::GET_CURRENT_EPISODE), uint32_t>(); }
    static inline auto GetCurrentLanguage() { return NativeInvoke::Invoke<742, std::to_underlying(NativeHashes::GET_CURRENT_LANGUAGE), uint32_t>(); }
    static inline auto GetCurrentPlaybackNumberForCar(Car car) { return NativeInvoke::Invoke<743, std::to_underlying(NativeHashes::GET_CURRENT_PLAYBACK_NUMBER_FOR_CAR), int32_t>(car); }
    static inline auto GetCurrentPoliceCarModel(uint32_t* pModel) { return NativeInvoke::Invoke<744, std::to_underlying(NativeHashes::GET_CURRENT_POLICE_CAR_MODEL), void>(pModel); }
    static inline auto GetCurrentPopulationZoneType() { return NativeInvoke::Invoke<745, std::to_underlying(NativeHashes::GET_CURRENT_POPULATION_ZONE_TYPE), int32_t>(); }
    static inline auto GetCurrentScriptedConversationLine() { return NativeInvoke::Invoke<746, std::to_underlying(NativeHashes::GET_CURRENT_SCRIPTED_CONVERSATION_LINE), int32_t>(); }
    static inline auto GetCurrentStackSize() { return NativeInvoke::Invoke<747, std::to_underlying(NativeHashes::GET_CURRENT_STACK_SIZE), int32_t>(); }
    static inline auto GetCurrentStationForTrain(Train train) { return NativeInvoke::Invoke<748, std::to_underlying(NativeHashes::GET_CURRENT_STATION_FOR_TRAIN), uint32_t>(train); }
    static inline auto GetCurrentTaxiCarModel(uint32_t* pModel) { return NativeInvoke::Invoke<749, std::to_underlying(NativeHashes::GET_CURRENT_TAXI_CAR_MODEL), void>(pModel); }
    static inline auto GetCurrentWeather(uint32_t* pWeather) { return NativeInvoke::Invoke<750, std::to_underlying(NativeHashes::GET_CURRENT_WEATHER), void>(pWeather); }
    static inline auto GetCurrentWeatherFull(int32_t* weatherparam0, int32_t* weatherparam1, int32_t* weatherparam2) { return NativeInvoke::Invoke<751, std::to_underlying(NativeHashes::GET_CURRENT_WEATHER_FULL), void>(weatherparam0, weatherparam1, weatherparam2); }
    static inline auto GetCurrentZoneScumminess() { return NativeInvoke::Invoke<752, std::to_underlying(NativeHashes::GET_CURRENT_ZONE_SCUMMINESS), int32_t>(); }
    static inline auto GetCutsceneAudioTimeMs() { return NativeInvoke::Invoke<753, std::to_underlying(NativeHashes::GET_CUTSCENE_AUDIO_TIME_MS), int32_t>(); }
    static inline auto GetCutscenePedPosition(int32_t unkped, Vector3* pos) { return NativeInvoke::Invoke<754, std::to_underlying(NativeHashes::GET_CUTSCENE_PED_POSITION), void>(unkped, pos); }
    static inline auto GetCutsceneSectionPlaying() { return NativeInvoke::Invoke<755, std::to_underlying(NativeHashes::GET_CUTSCENE_SECTION_PLAYING), int32_t>(); }
    static inline auto GetCutsceneTime() { return NativeInvoke::Invoke<756, std::to_underlying(NativeHashes::GET_CUTSCENE_TIME), int32_t>(); }
    static inline auto GetDamageToPedBodyPart(Ped ped, uint32_t part) { return NativeInvoke::Invoke<757, std::to_underlying(NativeHashes::GET_DAMAGE_TO_PED_BODY_PART), uint32_t>(ped, part); }
    static inline auto GetDeadCarCoordinates(Vehicle vehicle, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<758, std::to_underlying(NativeHashes::GET_DEAD_CAR_COORDINATES), void>(vehicle, pX, pY, pZ); }
    static inline auto GetDeadCharPickupCoords(Ped ped, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<759, std::to_underlying(NativeHashes::GET_DEAD_CHAR_PICKUP_COORDS), void>(ped, pX, pY, pZ); }
    static inline auto GetDebugCam(int32_t* cam) { return NativeInvoke::Invoke<760, std::to_underlying(NativeHashes::GET_DEBUG_CAM), void>(cam); }
    static inline auto GetDestroyerOfNetworkId(Any a1, Any a2) { return NativeInvoke::Invoke<761, std::to_underlying(NativeHashes::GET_DESTROYER_OF_NETWORK_ID), Any>(a1, a2); }
    static inline auto GetDisplayNameFromVehicleModel(uint32_t model) { return NativeInvoke::Invoke<762, std::to_underlying(NativeHashes::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL), char*>(model); }
    static inline auto GetDistanceBetweenCoords2d(float x1, float y1, float x2, float y2, float* pDist) { return NativeInvoke::Invoke<763, std::to_underlying(NativeHashes::GET_DISTANCE_BETWEEN_COORDS_2D), void>(x1, y1, x2, y2, pDist); }
    static inline auto GetDistanceBetweenCoords3d(float x1, float y1, float z1, float x2, float y2, float z2, float* pDist) { return NativeInvoke::Invoke<764, std::to_underlying(NativeHashes::GET_DISTANCE_BETWEEN_COORDS_3D), void>(x1, y1, z1, x2, y2, z2, pDist); }
    static inline auto GetDoorAngleRatio(Vehicle vehicle, uint32_t door, float* pAngleRatio) { return NativeInvoke::Invoke<765, std::to_underlying(NativeHashes::GET_DOOR_ANGLE_RATIO), void>(vehicle, door, pAngleRatio); }
    static inline auto GetDoorState(Object obj, uint32_t* a2, float* a3) { return NativeInvoke::Invoke<766, std::to_underlying(NativeHashes::GET_DOOR_STATE), void>(obj, a2, a3); }
    static inline auto GetDriverOfCar(Vehicle vehicle, Ped* pPed) { return NativeInvoke::Invoke<767, std::to_underlying(NativeHashes::GET_DRIVER_OF_CAR), void>(vehicle, pPed); }
    static inline auto GetEngineHealth(Vehicle vehicle) { return NativeInvoke::Invoke<768, std::to_underlying(NativeHashes::GET_ENGINE_HEALTH), float>(vehicle); }
    static inline auto GetEpisodeIndexFromSummons() { return NativeInvoke::Invoke<769, std::to_underlying(NativeHashes::GET_EPISODE_INDEX_FROM_SUMMONS), uint32_t>(); }
    static inline auto GetEpisodeName(uint32_t episodeIndex) { return NativeInvoke::Invoke<770, std::to_underlying(NativeHashes::GET_EPISODE_NAME), char*>(episodeIndex); }
    static inline auto GetExtraCarColours(Vehicle vehicle, ColourIndex* pColour1, ColourIndex* pColour2) { return NativeInvoke::Invoke<771, std::to_underlying(NativeHashes::GET_EXTRA_CAR_COLOURS), void>(vehicle, pColour1, pColour2); }
    static inline auto GetFilterMenuOn() { return NativeInvoke::Invoke<772, std::to_underlying(NativeHashes::GET_FILTER_MENU_ON), Any>(); }
    static inline auto GetFilterSaveSetting(int32_t filterid) { return NativeInvoke::Invoke<773, std::to_underlying(NativeHashes::GET_FILTER_SAVE_SETTING), int32_t>(filterid); }
    static inline auto GetFirstBlipInfoId(uint32_t type) { return NativeInvoke::Invoke<774, std::to_underlying(NativeHashes::GET_FIRST_BLIP_INFO_ID), Blip>(type); }
    static inline auto GetFirstNCharactersOfLiteralString(char* literalString, uint32_t chars) { return NativeInvoke::Invoke<775, std::to_underlying(NativeHashes::GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING), char*>(literalString, chars); }
    static inline auto GetFirstNCharactersOfString(char* gxtName, uint32_t chars) { return NativeInvoke::Invoke<776, std::to_underlying(NativeHashes::GET_FIRST_N_CHARACTERS_OF_STRING), char*>(gxtName, chars); }
    static inline auto GetFloatStat(uint32_t stat) { return NativeInvoke::Invoke<777, std::to_underlying(NativeHashes::GET_FLOAT_STAT), float>(stat); }
    static inline auto GetFollowVehicleCamSubmode(int32_t* mode) { return NativeInvoke::Invoke<778, std::to_underlying(NativeHashes::GET_FOLLOW_VEHICLE_CAM_SUBMODE), void>(mode); }
    static inline auto GetFragmentDamageHealthOfClosestObjectOfType(float x, float y, float z, float radius, uint32_t a5, bool flag) { return NativeInvoke::Invoke<779, std::to_underlying(NativeHashes::GET_FRAGMENT_DAMAGE_HEALTH_OF_CLOSEST_OBJECT_OF_TYPE), float>(x, y, z, radius, a5, flag); }
    static inline auto GetFrameCount() { return NativeInvoke::Invoke<780, std::to_underlying(NativeHashes::GET_FRAME_COUNT), int32_t>(); }
    static inline auto GetFrameTime(float* time) { return NativeInvoke::Invoke<781, std::to_underlying(NativeHashes::GET_FRAME_TIME), void>(time); }
    static inline auto GetFreeCam(int32_t* cam) { return NativeInvoke::Invoke<782, std::to_underlying(NativeHashes::GET_FREE_CAM), void>(cam); }
    static inline auto GetFrontendDesignValue(int32_t frontendid, float* a2, float* a3) { return NativeInvoke::Invoke<783, std::to_underlying(NativeHashes::GET_FRONTEND_DESIGN_VALUE), void>(frontendid, a2, a3); }
    static inline auto GetFurthestNetworkRestartNode() { return NativeInvoke::Invoke<784, std::to_underlying(NativeHashes::GET_FURTHEST_NETWORK_RESTART_NODE), Any>(); }
    static inline auto GetGameCam(Camera* camera) { return NativeInvoke::Invoke<785, std::to_underlying(NativeHashes::GET_GAME_CAM), void>(camera); }
    static inline auto GetGameCamChild(Camera* camera) { return NativeInvoke::Invoke<786, std::to_underlying(NativeHashes::GET_GAME_CAM_CHILD), void>(camera); }
    static inline auto GetGameTimer(uint32_t* pTimer) { return NativeInvoke::Invoke<787, std::to_underlying(NativeHashes::GET_GAME_TIMER), void>(pTimer); }
    static inline auto GetGameViewportId(int32_t* viewportid) { return NativeInvoke::Invoke<788, std::to_underlying(NativeHashes::GET_GAME_VIEWPORT_ID), void>(viewportid); }
    static inline auto GetGamerNetworkScore(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<789, std::to_underlying(NativeHashes::GET_GAMER_NETWORK_SCORE), Any>(a1, a2, a3); }
    static inline auto GetGfwlHasSafeHouse() { return NativeInvoke::Invoke<790, std::to_underlying(NativeHashes::GET_GFWL_HAS_SAFE_HOUSE), Any>(); }
    static inline auto GetGfwlIsReturningToSinglePlayer() { return NativeInvoke::Invoke<791, std::to_underlying(NativeHashes::GET_GFWL_IS_RETURNING_TO_SINGLE_PLAYER), Any>(); }
    static inline auto GetGroundZFor3dCoord(float x, float y, float z, float* pGroundZ) { return NativeInvoke::Invoke<792, std::to_underlying(NativeHashes::GET_GROUND_Z_FOR_3D_COORD), Any>(x, y, z, pGroundZ); }
    static inline auto GetGroupCharDucksWhenAimedAt(Ped ped) { return NativeInvoke::Invoke<793, std::to_underlying(NativeHashes::GET_GROUP_CHAR_DUCKS_WHEN_AIMED_AT), bool>(ped); }
    static inline auto GetGroupFormation(int32_t group, int32_t* formation) { return NativeInvoke::Invoke<794, std::to_underlying(NativeHashes::GET_GROUP_FORMATION), void>(group, formation); }
    static inline auto GetGroupFormationSpacing(int32_t group, float* spacing) { return NativeInvoke::Invoke<795, std::to_underlying(NativeHashes::GET_GROUP_FORMATION_SPACING), void>(group, spacing); }
    static inline auto GetGroupLeader(Group group, Ped* pPed) { return NativeInvoke::Invoke<796, std::to_underlying(NativeHashes::GET_GROUP_LEADER), void>(group, pPed); }
    static inline auto GetGroupMember(Group group, uint32_t index, Ped* pPed) { return NativeInvoke::Invoke<797, std::to_underlying(NativeHashes::GET_GROUP_MEMBER), void>(group, index, pPed); }
    static inline auto GetGroupSize(Group group, uint32_t* pStartIndex, uint32_t* pCount) { return NativeInvoke::Invoke<798, std::to_underlying(NativeHashes::GET_GROUP_SIZE), void>(group, pStartIndex, pCount); }
    static inline auto GetHashKey(char* value) { return NativeInvoke::Invoke<799, std::to_underlying(NativeHashes::GET_HASH_KEY), uint32_t>(value); }
    static inline auto GetHeadingFromVector2d(float x, float y, float* pHeading) { return NativeInvoke::Invoke<800, std::to_underlying(NativeHashes::GET_HEADING_FROM_VECTOR_2D), void>(x, y, pHeading); }
    static inline auto GetHeightOfVehicle(Vehicle vehicle, float x, float y, float z, bool unknownTrue1, bool unknownTrue2) { return NativeInvoke::Invoke<801, std::to_underlying(NativeHashes::GET_HEIGHT_OF_VEHICLE), float>(vehicle, x, y, z, unknownTrue1, unknownTrue2); }
    static inline auto GetHelpMessageBoxSize(float* x, float* y) { return NativeInvoke::Invoke<802, std::to_underlying(NativeHashes::GET_HELP_MESSAGE_BOX_SIZE), void>(x, y); }
    static inline auto GetHostId() { return NativeInvoke::Invoke<803, std::to_underlying(NativeHashes::GET_HOST_ID), Any>(); }
    static inline auto GetHostMatchOn() { return NativeInvoke::Invoke<804, std::to_underlying(NativeHashes::GET_HOST_MATCH_ON), Any>(); }
    static inline auto GetHoursOfDay() { return NativeInvoke::Invoke<805, std::to_underlying(NativeHashes::GET_HOURS_OF_DAY), uint32_t>(); }
    static inline auto GetHudColour(uint32_t type, uint32_t* pR, uint32_t* pG, uint32_t* pB, uint32_t* pA) { return NativeInvoke::Invoke<806, std::to_underlying(NativeHashes::GET_HUD_COLOUR), void>(type, pR, pG, pB, pA); }
    static inline auto GetIdOfThisThread() { return NativeInvoke::Invoke<807, std::to_underlying(NativeHashes::GET_ID_OF_THIS_THREAD), uint32_t>(); }
    static inline auto GetIntStat(uint32_t stat) { return NativeInvoke::Invoke<808, std::to_underlying(NativeHashes::GET_INT_STAT), uint32_t>(stat); }
    static inline auto GetInteriorAtCoords(float x, float y, float z, Interior* pInterior) { return NativeInvoke::Invoke<809, std::to_underlying(NativeHashes::GET_INTERIOR_AT_COORDS), void>(x, y, z, pInterior); }
    static inline auto GetInteriorFromCar(Vehicle vehicle, Interior* pInterior) { return NativeInvoke::Invoke<810, std::to_underlying(NativeHashes::GET_INTERIOR_FROM_CAR), void>(vehicle, pInterior); }
    static inline auto GetInteriorFromChar(Ped ped, Interior* pInterior) { return NativeInvoke::Invoke<811, std::to_underlying(NativeHashes::GET_INTERIOR_FROM_CHAR), void>(ped, pInterior); }
    static inline auto GetInteriorFromDummyChar() { return NativeInvoke::Invoke<812, std::to_underlying(NativeHashes::GET_INTERIOR_FROM_DUMMY_CHAR), Any>(); }
    static inline auto GetInteriorHeading(Interior interior, float* pHeading) { return NativeInvoke::Invoke<813, std::to_underlying(NativeHashes::GET_INTERIOR_HEADING), void>(interior, pHeading); }
    static inline auto GetIsAutosaveOff() { return NativeInvoke::Invoke<814, std::to_underlying(NativeHashes::GET_IS_AUTOSAVE_OFF), bool>(); }
    static inline auto GetIsDepositAnimRunning() { return NativeInvoke::Invoke<815, std::to_underlying(NativeHashes::GET_IS_DEPOSIT_ANIM_RUNNING), bool>(); }
    static inline auto GetIsDisplayingsavemessage() { return NativeInvoke::Invoke<816, std::to_underlying(NativeHashes::GET_IS_DISPLAYINGSAVEMESSAGE), bool>(); }
    static inline auto GetIsHidef() { return NativeInvoke::Invoke<817, std::to_underlying(NativeHashes::GET_IS_HIDEF), bool>(); }
    static inline auto GetIsProjectileTypeInArea(float x0, float y0, float z0, float x1, float y1, float z1, int32_t type) { return NativeInvoke::Invoke<818, std::to_underlying(NativeHashes::GET_IS_PROJECTILE_TYPE_IN_AREA), bool>(x0, y0, z0, x1, y1, z1, type); }
    static inline auto GetIsStickyBombStuckToObject(Object obj) { return NativeInvoke::Invoke<819, std::to_underlying(NativeHashes::GET_IS_STICKY_BOMB_STUCK_TO_OBJECT), bool>(obj); }
    static inline auto GetIsStickyBombStuckToVehicle(Vehicle veh) { return NativeInvoke::Invoke<820, std::to_underlying(NativeHashes::GET_IS_STICKY_BOMB_STUCK_TO_VEHICLE), bool>(veh); }
    static inline auto GetIsWidescreen() { return NativeInvoke::Invoke<821, std::to_underlying(NativeHashes::GET_IS_WIDESCREEN), bool>(); }
    static inline auto GetKeyForCarInRoom(Vehicle vehicle, uint32_t* pKey) { return NativeInvoke::Invoke<822, std::to_underlying(NativeHashes::GET_KEY_FOR_CAR_IN_ROOM), void>(vehicle, pKey); }
    static inline auto GetKeyForCharInRoom(Ped ped, uint32_t* pKey) { return NativeInvoke::Invoke<823, std::to_underlying(NativeHashes::GET_KEY_FOR_CHAR_IN_ROOM), void>(ped, pKey); }
    static inline auto GetKeyForDummyCharInRoom(Ped ped, int32_t* room) { return NativeInvoke::Invoke<824, std::to_underlying(NativeHashes::GET_KEY_FOR_DUMMY_CHAR_IN_ROOM), void>(ped, room); }
    static inline auto GetKeyForViewportInRoom(int32_t viewportid, int32_t* roomkey) { return NativeInvoke::Invoke<825, std::to_underlying(NativeHashes::GET_KEY_FOR_VIEWPORT_IN_ROOM), void>(viewportid, roomkey); }
    static inline auto GetKeyboardMoveInput(int32_t* a1, int32_t* a2) { return NativeInvoke::Invoke<826, std::to_underlying(NativeHashes::GET_KEYBOARD_MOVE_INPUT), void>(a1, a2); }
    static inline auto GetKillTrackingResults() { return NativeInvoke::Invoke<827, std::to_underlying(NativeHashes::GET_KILL_TRACKING_RESULTS), Any>(); }
    static inline auto GetLastTimeNetworkIdDamaged() { return NativeInvoke::Invoke<828, std::to_underlying(NativeHashes::GET_LAST_TIME_NETWORK_ID_DAMAGED), Any>(); }
    static inline auto GetLatestConsoleCommand() { return NativeInvoke::Invoke<829, std::to_underlying(NativeHashes::GET_LATEST_CONSOLE_COMMAND), int32_t>(); }
    static inline auto GetLcpdCopScore() { return NativeInvoke::Invoke<830, std::to_underlying(NativeHashes::GET_LCPD_COP_SCORE), Any>(); }
    static inline auto GetLcpdCriminalScore() { return NativeInvoke::Invoke<831, std::to_underlying(NativeHashes::GET_LCPD_CRIMINAL_SCORE), Any>(); }
    static inline auto GetLeftPlayerCashToReachLevel(uint32_t playerRank) { return NativeInvoke::Invoke<832, std::to_underlying(NativeHashes::GET_LEFT_PLAYER_CASH_TO_REACH_LEVEL), uint32_t>(playerRank); }
    static inline auto GetLengthOfLiteralString(char* literalString) { return NativeInvoke::Invoke<833, std::to_underlying(NativeHashes::GET_LENGTH_OF_LITERAL_STRING), uint32_t>(literalString); }
    static inline auto GetLengthOfStringWithThisHashKey(uint32_t gxtkey) { return NativeInvoke::Invoke<834, std::to_underlying(NativeHashes::GET_LENGTH_OF_STRING_WITH_THIS_HASH_KEY), int32_t>(gxtkey); }
    static inline auto GetLengthOfStringWithThisTextLabel(char* gxtName) { return NativeInvoke::Invoke<835, std::to_underlying(NativeHashes::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL), uint32_t>(gxtName); }
    static inline auto GetLengthOfStringWithThisTextLabelInsNum(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<836, std::to_underlying(NativeHashes::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL_INS_NUM), int32_t>(a1, a2, a3); }
    static inline auto GetLevelDesignCoordsForObject(Object obj, int a2, float* x, float* y, float* z) { return NativeInvoke::Invoke<837, std::to_underlying(NativeHashes::GET_LEVEL_DESIGN_COORDS_FOR_OBJECT), float>(obj, a2, x, y, z); }
    static inline auto GetLineHeight() { return NativeInvoke::Invoke<838, std::to_underlying(NativeHashes::GET_LINE_HEIGHT), float>(); }
    static inline auto GetLocalGamerlevelFromProfilesettings() { return NativeInvoke::Invoke<839, std::to_underlying(NativeHashes::GET_LOCAL_GAMERLEVEL_FROM_PROFILESETTINGS), Any>(); }
    static inline auto GetLocalPlayerMpCash() { return NativeInvoke::Invoke<840, std::to_underlying(NativeHashes::GET_LOCAL_PLAYER_MP_CASH), int32_t>(); }
    static inline auto GetLocalPlayerWeaponStat(int32_t wtype, int32_t wid) { return NativeInvoke::Invoke<841, std::to_underlying(NativeHashes::GET_LOCAL_PLAYER_WEAPON_STAT), float>(wtype, wid); }
    static inline auto GetMapAreaFromCoords(float x, float y, float z) { return NativeInvoke::Invoke<842, std::to_underlying(NativeHashes::GET_MAP_AREA_FROM_COORDS), uint32_t>(x, y, z); }
    static inline auto GetMaxAmmo(Ped ped, uint32_t weapon, uint32_t* pMaxAmmo) { return NativeInvoke::Invoke<843, std::to_underlying(NativeHashes::GET_MAX_AMMO), bool>(ped, weapon, pMaxAmmo); }
    static inline auto GetMaxAmmoInClip(Ped ped, uint32_t weapon, uint32_t* pMaxAmmo) { return NativeInvoke::Invoke<844, std::to_underlying(NativeHashes::GET_MAX_AMMO_IN_CLIP), void>(ped, weapon, pMaxAmmo); }
    static inline auto GetMaxWantedLevel(uint32_t* pMaxWantedLevel) { return NativeInvoke::Invoke<845, std::to_underlying(NativeHashes::GET_MAX_WANTED_LEVEL), void>(pMaxWantedLevel); }
    static inline auto GetMaximumNumberOfPassengers(Vehicle vehicle, uint32_t* pMax) { return NativeInvoke::Invoke<846, std::to_underlying(NativeHashes::GET_MAXIMUM_NUMBER_OF_PASSENGERS), void>(vehicle, pMax); }
    static inline auto GetMenuItemAccepted(int32_t menuid) { return NativeInvoke::Invoke<847, std::to_underlying(NativeHashes::GET_MENU_ITEM_ACCEPTED), int32_t>(menuid); }
    static inline auto GetMenuItemSelected(int32_t menuid) { return NativeInvoke::Invoke<848, std::to_underlying(NativeHashes::GET_MENU_ITEM_SELECTED), int32_t>(menuid); }
    static inline auto GetMenuPosition(int32_t menuid, float* x, float* y) { return NativeInvoke::Invoke<849, std::to_underlying(NativeHashes::GET_MENU_POSITION), void>(menuid, x, y); }
    static inline auto GetMinutesOfDay() { return NativeInvoke::Invoke<850, std::to_underlying(NativeHashes::GET_MINUTES_OF_DAY), uint32_t>(); }
    static inline auto GetMinutesToTimeOfDay(uint32_t hour, uint32_t minute) { return NativeInvoke::Invoke<851, std::to_underlying(NativeHashes::GET_MINUTES_TO_TIME_OF_DAY), uint32_t>(hour, minute); }
    static inline auto GetMissionFlag() { return NativeInvoke::Invoke<852, std::to_underlying(NativeHashes::GET_MISSION_FLAG), bool>(); }
    static inline auto GetMobilePhonePosition() { return NativeInvoke::Invoke<853, std::to_underlying(NativeHashes::GET_MOBILE_PHONE_POSITION), Any>(); }
    static inline auto GetMobilePhoneRenderId(uint32_t* pRenderId) { return NativeInvoke::Invoke<854, std::to_underlying(NativeHashes::GET_MOBILE_PHONE_RENDER_ID), void>(pRenderId); }
    static inline auto GetMobilePhoneRotation() { return NativeInvoke::Invoke<855, std::to_underlying(NativeHashes::GET_MOBILE_PHONE_ROTATION), Any>(); }
    static inline auto GetMobilePhoneScale() { return NativeInvoke::Invoke<856, std::to_underlying(NativeHashes::GET_MOBILE_PHONE_SCALE), float>(); }
    static inline auto GetMobilePhoneTaskSubTask(Ped ped, int32_t* a2) { return NativeInvoke::Invoke<857, std::to_underlying(NativeHashes::GET_MOBILE_PHONE_TASK_SUB_TASK), bool>(ped, a2); }
    static inline auto GetModelDimensions(uint32_t model, Vector3* pMinVector, Vector3* pMaxVector) { return NativeInvoke::Invoke<858, std::to_underlying(NativeHashes::GET_MODEL_DIMENSIONS), void>(model, pMinVector, pMaxVector); }
    static inline auto GetModelNameForDebug(uint32_t model) { return NativeInvoke::Invoke<859, std::to_underlying(NativeHashes::GET_MODEL_NAME_FOR_DEBUG), char*>(model); }
    static inline auto GetModelNameOfCarForDebugOnly() { return NativeInvoke::Invoke<860, std::to_underlying(NativeHashes::GET_MODEL_NAME_OF_CAR_FOR_DEBUG_ONLY), Any>(); }
    static inline auto GetModelPedIsHolding(Ped ped) { return NativeInvoke::Invoke<861, std::to_underlying(NativeHashes::GET_MODEL_PED_IS_HOLDING), uint32_t>(ped); }
    static inline auto GetMotionControlsEnabled() { return NativeInvoke::Invoke<862, std::to_underlying(NativeHashes::GET_MOTION_CONTROLS_ENABLED), Any>(); }
    static inline auto GetMotionSensorValues() { return NativeInvoke::Invoke<863, std::to_underlying(NativeHashes::GET_MOTION_SENSOR_VALUES), Any>(); }
    static inline auto GetMouseInput(int32_t* x, int32_t* y) { return NativeInvoke::Invoke<864, std::to_underlying(NativeHashes::GET_MOUSE_INPUT), void>(x, y); }
    static inline auto GetMousePosition(int32_t* x, int32_t* y) { return NativeInvoke::Invoke<865, std::to_underlying(NativeHashes::GET_MOUSE_POSITION), void>(x, y); }
    static inline auto GetMouseSensitivity() { return NativeInvoke::Invoke<866, std::to_underlying(NativeHashes::GET_MOUSE_SENSITIVITY), float>(); }
    static inline auto GetMouseWheel(int32_t* a1) { return NativeInvoke::Invoke<867, std::to_underlying(NativeHashes::GET_MOUSE_WHEEL), void>(a1); }
    static inline auto GetNameOfInfoZone(float x, float y, float z) { return NativeInvoke::Invoke<868, std::to_underlying(NativeHashes::GET_NAME_OF_INFO_ZONE), char*>(x, y, z); }
    static inline auto GetNameOfScriptToAutomaticallyStart() { return NativeInvoke::Invoke<869, std::to_underlying(NativeHashes::GET_NAME_OF_SCRIPT_TO_AUTOMATICALLY_START), Any>(); }
    static inline auto GetNameOfZone(float x, float y, float z) { return NativeInvoke::Invoke<870, std::to_underlying(NativeHashes::GET_NAME_OF_ZONE), char*>(x, y, z); }
    static inline auto GetNavmeshRouteResult(int32_t navmesh) { return NativeInvoke::Invoke<871, std::to_underlying(NativeHashes::GET_NAVMESH_ROUTE_RESULT), int32_t>(navmesh); }
    static inline auto GetNearestCableCar(float x, float y, float z, float radius, Vehicle* pVehicle) { return NativeInvoke::Invoke<872, std::to_underlying(NativeHashes::GET_NEAREST_CABLE_CAR), void>(x, y, z, radius, pVehicle); }
    static inline auto GetNeededPlayerCashForLevel() { return NativeInvoke::Invoke<873, std::to_underlying(NativeHashes::GET_NEEDED_PLAYER_CASH_FOR_LEVEL), Any>(); }
    static inline auto GetNetworkIdFromObject(Object obj, int32_t* id) { return NativeInvoke::Invoke<874, std::to_underlying(NativeHashes::GET_NETWORK_ID_FROM_OBJECT), void>(obj, id); }
    static inline auto GetNetworkIdFromPed(Any a1, Any a2) { return NativeInvoke::Invoke<875, std::to_underlying(NativeHashes::GET_NETWORK_ID_FROM_PED), void>(a1, a2); }
    static inline auto GetNetworkIdFromVehicle(Any a1, Any a2) { return NativeInvoke::Invoke<876, std::to_underlying(NativeHashes::GET_NETWORK_ID_FROM_VEHICLE), void>(a1, a2); }
    static inline auto GetNetworkJoinFail() { return NativeInvoke::Invoke<877, std::to_underlying(NativeHashes::GET_NETWORK_JOIN_FAIL), Any>(); }
    static inline auto GetNetworkPlayerVip() { return NativeInvoke::Invoke<878, std::to_underlying(NativeHashes::GET_NETWORK_PLAYER_VIP), Any>(); }
    static inline auto GetNetworkRestartNodeDebug() { return NativeInvoke::Invoke<879, std::to_underlying(NativeHashes::GET_NETWORK_RESTART_NODE_DEBUG), Any>(); }
    static inline auto GetNetworkTimer(Any a1) { return NativeInvoke::Invoke<880, std::to_underlying(NativeHashes::GET_NETWORK_TIMER), void>(a1); }
    static inline auto GetNextBlipInfoId(uint32_t type) { return NativeInvoke::Invoke<881, std::to_underlying(NativeHashes::GET_NEXT_BLIP_INFO_ID), Blip>(type); }
    static inline auto GetNextClosestCarNode(float x, float y, float z, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<882, std::to_underlying(NativeHashes::GET_NEXT_CLOSEST_CAR_NODE), bool>(x, y, z, pX, pY, pZ); }
    static inline auto GetNextClosestCarNodeFavourDirection(float x, float y, float z, float* pX, float* pY, float* pZ, float* direction) { return NativeInvoke::Invoke<883, std::to_underlying(NativeHashes::GET_NEXT_CLOSEST_CAR_NODE_FAVOUR_DIRECTION), bool>(x, y, z, pX, pY, pZ, direction); }
    static inline auto GetNextClosestCarNodeWithHeading(float x, float y, float z, float* pX, float* pY, float* pZ, float* heading) { return NativeInvoke::Invoke<884, std::to_underlying(NativeHashes::GET_NEXT_CLOSEST_CAR_NODE_WITH_HEADING), bool>(x, y, z, pX, pY, pZ, heading); }
    static inline auto GetNextClosestCarNodeWithHeadingOnIsland(float x, float y, float z, float* pX, float* pY, float* pZ, float* heading) { return NativeInvoke::Invoke<885, std::to_underlying(NativeHashes::GET_NEXT_CLOSEST_CAR_NODE_WITH_HEADING_ON_ISLAND), bool>(x, y, z, pX, pY, pZ, heading); }
    static inline auto GetNextStationForTrain(Train train) { return NativeInvoke::Invoke<886, std::to_underlying(NativeHashes::GET_NEXT_STATION_FOR_TRAIN), uint32_t>(train); }
    static inline auto GetNoLawVehiclesDestroyedByLocalPlayer() { return NativeInvoke::Invoke<887, std::to_underlying(NativeHashes::GET_NO_LAW_VEHICLES_DESTROYED_BY_LOCAL_PLAYER), int32_t>(); }
    static inline auto GetNoOfPlayersInTeam(Any a1) { return NativeInvoke::Invoke<888, std::to_underlying(NativeHashes::GET_NO_OF_PLAYERS_IN_TEAM), Any>(a1); }
    static inline auto GetNthClosestCarNode(float x, float y, float z, int32_t n, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<889, std::to_underlying(NativeHashes::GET_NTH_CLOSEST_CAR_NODE), bool>(x, y, z, n, pX, pY, pZ); }
    static inline auto GetNthClosestCarNodeFavourDirection(int a1, float x, float y, float z, int32_t n, float* pX, float* pY, float* pZ, float* direction) { return NativeInvoke::Invoke<890, std::to_underlying(NativeHashes::GET_NTH_CLOSEST_CAR_NODE_FAVOUR_DIRECTION), bool>(a1, x, y, z, n, pX, pY, pZ, direction); }
    static inline auto GetNthClosestCarNodeWithHeading(float x, float y, float z, uint32_t nodeNum, float* pResX, float* pResY, float* pResZ, float* pHeading) { return NativeInvoke::Invoke<891, std::to_underlying(NativeHashes::GET_NTH_CLOSEST_CAR_NODE_WITH_HEADING), bool>(x, y, z, nodeNum, pResX, pResY, pResZ, pHeading); }
    static inline auto GetNthClosestCarNodeWithHeadingOnIsland(float x, float y, float z, uint32_t nodeNum, uint32_t areaId, float* pResX, float* pResY, float* pResZ, float* pHeading, uint32_t* pUnknownMaybeAreaId) { return NativeInvoke::Invoke<892, std::to_underlying(NativeHashes::GET_NTH_CLOSEST_CAR_NODE_WITH_HEADING_ON_ISLAND), bool>(x, y, z, nodeNum, areaId, pResX, pResY, pResZ, pHeading, pUnknownMaybeAreaId); }
    static inline auto GetNthClosestWaterNodeWithHeading(float x, float y, float z, bool flag0, bool flag1, Vector3* node, float* heading) { return NativeInvoke::Invoke<893, std::to_underlying(NativeHashes::GET_NTH_CLOSEST_WATER_NODE_WITH_HEADING), bool>(x, y, z, flag0, flag1, node, heading); }
    static inline auto GetNthGroupMember(int32_t group, int32_t n, Ped* ped) { return NativeInvoke::Invoke<894, std::to_underlying(NativeHashes::GET_NTH_GROUP_MEMBER), void>(group, n, ped); }
    static inline auto GetNthIntegerInString(char* gxtName, uint32_t index) { return NativeInvoke::Invoke<895, std::to_underlying(NativeHashes::GET_NTH_INTEGER_IN_STRING), char*>(gxtName, index); }
    static inline auto GetNumCarColours(Vehicle vehicle, uint32_t* pNumColours) { return NativeInvoke::Invoke<896, std::to_underlying(NativeHashes::GET_NUM_CAR_COLOURS), void>(vehicle, pNumColours); }
    static inline auto GetNumCarLiveries(Car car, int32_t* num) { return NativeInvoke::Invoke<897, std::to_underlying(NativeHashes::GET_NUM_CAR_LIVERIES), void>(car, num); }
    static inline auto GetNumConsoleCommandTokens() { return NativeInvoke::Invoke<898, std::to_underlying(NativeHashes::GET_NUM_CONSOLE_COMMAND_TOKENS), Any>(); }
    static inline auto GetNumKillsForRankPoints() { return NativeInvoke::Invoke<899, std::to_underlying(NativeHashes::GET_NUM_KILLS_FOR_RANK_POINTS), Any>(); }
    static inline auto GetNumOfModelsKilledByPlayer(int32_t player, uint32_t model, int32_t* num) { return NativeInvoke::Invoke<900, std::to_underlying(NativeHashes::GET_NUM_OF_MODELS_KILLED_BY_PLAYER), void>(player, model, num); }
    static inline auto GetNumStreamingRequests() { return NativeInvoke::Invoke<901, std::to_underlying(NativeHashes::GET_NUM_STREAMING_REQUESTS), uint32_t>(); }
    static inline auto GetNumberLines(float a1, float a2, char* a3) { return NativeInvoke::Invoke<902, std::to_underlying(NativeHashes::GET_NUMBER_LINES), int32_t>(a1, a2, a3); }
    static inline auto GetNumberLinesWithLiteralStrings(float a1, float a2, char* a3, char* a4, char* a5) { return NativeInvoke::Invoke<903, std::to_underlying(NativeHashes::GET_NUMBER_LINES_WITH_LITERAL_STRINGS), int32_t>(a1, a2, a3, a4, a5); }
    static inline auto GetNumberLinesWithSubstrings(float a1, float a2, char* a3, char* a4, char* a5) { return NativeInvoke::Invoke<904, std::to_underlying(NativeHashes::GET_NUMBER_LINES_WITH_SUBSTRINGS), int32_t>(a1, a2, a3, a4, a5); }
    static inline auto GetNumberOfActiveStickyBombsOwnedByPed(Ped ped) { return NativeInvoke::Invoke<905, std::to_underlying(NativeHashes::GET_NUMBER_OF_ACTIVE_STICKY_BOMBS_OWNED_BY_PED), int32_t>(ped); }
    static inline auto GetNumberOfCharDrawableVariations(Ped ped, uint32_t component) { return NativeInvoke::Invoke<906, std::to_underlying(NativeHashes::GET_NUMBER_OF_CHAR_DRAWABLE_VARIATIONS), uint32_t>(ped, component); }
    static inline auto GetNumberOfCharTextureVariations(Ped ped, uint32_t component, uint32_t unknown1) { return NativeInvoke::Invoke<907, std::to_underlying(NativeHashes::GET_NUMBER_OF_CHAR_TEXTURE_VARIATIONS), uint32_t>(ped, component, unknown1); }
    static inline auto GetNumberOfFiresInArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<908, std::to_underlying(NativeHashes::GET_NUMBER_OF_FIRES_IN_AREA), int32_t>(x0, y0, z0, x1, y1, z1); }
    static inline auto GetNumberOfFiresInRange(float x, float y, float z, float radius) { return NativeInvoke::Invoke<909, std::to_underlying(NativeHashes::GET_NUMBER_OF_FIRES_IN_RANGE), uint32_t>(x, y, z, radius); }
    static inline auto GetNumberOfFollowers(Ped ped, int32_t* followers) { return NativeInvoke::Invoke<910, std::to_underlying(NativeHashes::GET_NUMBER_OF_FOLLOWERS), void>(ped, followers); }
    static inline auto GetNumberOfInjuredPedsInRange(float x, float y, float z, float radius) { return NativeInvoke::Invoke<911, std::to_underlying(NativeHashes::GET_NUMBER_OF_INJURED_PEDS_IN_RANGE), int32_t>(x, y, z, radius); }
    static inline auto GetNumberOfInstancesOfStreamedScript(char* scriptName) { return NativeInvoke::Invoke<912, std::to_underlying(NativeHashes::GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT), uint32_t>(scriptName); }
    static inline auto GetNumberOfPassengers(Vehicle vehicle, uint32_t* pNumPassengers) { return NativeInvoke::Invoke<913, std::to_underlying(NativeHashes::GET_NUMBER_OF_PASSENGERS), void>(vehicle, pNumPassengers); }
    static inline auto GetNumberOfPlayers() { return NativeInvoke::Invoke<914, std::to_underlying(NativeHashes::GET_NUMBER_OF_PLAYERS), uint32_t>(); }
    static inline auto GetNumberOfStickyBombsStuckToObject(Object obj) { return NativeInvoke::Invoke<915, std::to_underlying(NativeHashes::GET_NUMBER_OF_STICKY_BOMBS_STUCK_TO_OBJECT), int32_t>(obj); }
    static inline auto GetNumberOfStickyBombsStuckToVehicle(Vehicle veh) { return NativeInvoke::Invoke<916, std::to_underlying(NativeHashes::GET_NUMBER_OF_STICKY_BOMBS_STUCK_TO_VEHICLE), int32_t>(veh); }
    static inline auto GetNumberOfWebPageLinks(int32_t htmlviewport) { return NativeInvoke::Invoke<917, std::to_underlying(NativeHashes::GET_NUMBER_OF_WEB_PAGE_LINKS), int32_t>(htmlviewport); }
    static inline auto GetObjectAnimCurrentTime(Object obj, char* animname0, char* animname1, float* time) { return NativeInvoke::Invoke<918, std::to_underlying(NativeHashes::GET_OBJECT_ANIM_CURRENT_TIME), void>(obj, animname0, animname1, time); }
    static inline auto GetObjectAnimTotalTime(Object obj, char* animname0, char* animname1, float* time) { return NativeInvoke::Invoke<919, std::to_underlying(NativeHashes::GET_OBJECT_ANIM_TOTAL_TIME), void>(obj, animname0, animname1, time); }
    static inline auto GetObjectCoordinates(Object obj, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<920, std::to_underlying(NativeHashes::GET_OBJECT_COORDINATES), void>(obj, pX, pY, pZ); }
    static inline auto GetObjectFragmentDamageHealth(Object obj, bool unknown) { return NativeInvoke::Invoke<921, std::to_underlying(NativeHashes::GET_OBJECT_FRAGMENT_DAMAGE_HEALTH), float>(obj, unknown); }
    static inline auto GetObjectFromNetworkId(Any a1, Any a2) { return NativeInvoke::Invoke<922, std::to_underlying(NativeHashes::GET_OBJECT_FROM_NETWORK_ID), void>(a1, a2); }
    static inline auto GetObjectHeading(Object obj, float* pHeading) { return NativeInvoke::Invoke<923, std::to_underlying(NativeHashes::GET_OBJECT_HEADING), void>(obj, pHeading); }
    static inline auto GetObjectHealth(Object obj, float* pHealth) { return NativeInvoke::Invoke<924, std::to_underlying(NativeHashes::GET_OBJECT_HEALTH), void>(obj, pHealth); }
    static inline auto GetObjectMass(Object obj, float* mass) { return NativeInvoke::Invoke<925, std::to_underlying(NativeHashes::GET_OBJECT_MASS), void>(obj, mass); }
    static inline auto GetObjectModel(Object obj, uint32_t* pModel) { return NativeInvoke::Invoke<926, std::to_underlying(NativeHashes::GET_OBJECT_MODEL), void>(obj, pModel); }
    static inline auto GetObjectPedIsHolding(Ped ped) { return NativeInvoke::Invoke<927, std::to_underlying(NativeHashes::GET_OBJECT_PED_IS_HOLDING), Object>(ped); }
    static inline auto GetObjectQuaternion(Object obj, float* a2, float* a3, float* a4, float* a5) { return NativeInvoke::Invoke<928, std::to_underlying(NativeHashes::GET_OBJECT_QUATERNION), void>(obj, a2, a3, a4, a5); }
    static inline auto GetObjectRotationVelocity(Object obj, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<929, std::to_underlying(NativeHashes::GET_OBJECT_ROTATION_VELOCITY), void>(obj, pX, pY, pZ); }
    static inline auto GetObjectSpeed(Object obj, float* pSpeed) { return NativeInvoke::Invoke<930, std::to_underlying(NativeHashes::GET_OBJECT_SPEED), void>(obj, pSpeed); }
    static inline auto GetObjectTurnMass(Object obj, float* turnmass) { return NativeInvoke::Invoke<931, std::to_underlying(NativeHashes::GET_OBJECT_TURN_MASS), void>(obj, turnmass); }
    static inline auto GetObjectVelocity(Object obj, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<932, std::to_underlying(NativeHashes::GET_OBJECT_VELOCITY), void>(obj, pX, pY, pZ); }
    static inline auto GetOffsetFromCarGivenWorldCoords(Vehicle vehicle, float x, float y, float z, float* pOffX, float* pOffY, float* pOffZ) { return NativeInvoke::Invoke<933, std::to_underlying(NativeHashes::GET_OFFSET_FROM_CAR_GIVEN_WORLD_COORDS), void>(vehicle, x, y, z, pOffX, pOffY, pOffZ); }
    static inline auto GetOffsetFromCarInWorldCoords(Vehicle vehicle, float x, float y, float z, float* pOffX, float* pOffY, float* pOffZ) { return NativeInvoke::Invoke<934, std::to_underlying(NativeHashes::GET_OFFSET_FROM_CAR_IN_WORLD_COORDS), void>(vehicle, x, y, z, pOffX, pOffY, pOffZ); }
    static inline auto GetOffsetFromCharInWorldCoords(Ped ped, float x, float y, float z, float* pOffX, float* pOffY, float* pOffZ) { return NativeInvoke::Invoke<935, std::to_underlying(NativeHashes::GET_OFFSET_FROM_CHAR_IN_WORLD_COORDS), void>(ped, x, y, z, pOffX, pOffY, pOffZ); }
    static inline auto GetOffsetFromInteriorInWorldCoords(Interior interior, float x, float y, float z, float* pOffset) { return NativeInvoke::Invoke<936, std::to_underlying(NativeHashes::GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS), void>(interior, x, y, z, pOffset); }
    static inline auto GetOffsetFromObjectInWorldCoords(Object obj, float x, float y, float z, float* pOffX, float* pOffY, float* pOffZ) { return NativeInvoke::Invoke<937, std::to_underlying(NativeHashes::GET_OFFSET_FROM_OBJECT_IN_WORLD_COORDS), void>(obj, x, y, z, pOffX, pOffY, pOffZ); }
    static inline auto GetOffsetsForAttachCarToCar(Car car0, Car car1, Vector3* a3, Vector3* a4) { return NativeInvoke::Invoke<938, std::to_underlying(NativeHashes::GET_OFFSETS_FOR_ATTACH_CAR_TO_CAR), void>(car0, car1, a3, a4); }
    static inline auto GetOnlineLan() { return NativeInvoke::Invoke<939, std::to_underlying(NativeHashes::GET_ONLINE_LAN), Any>(); }
    static inline auto GetOnlineScore(Any a1) { return NativeInvoke::Invoke<940, std::to_underlying(NativeHashes::GET_ONLINE_SCORE), Any>(a1); }
    static inline auto GetOverrideNoSprintingOnPhoneInMultiplayer() { return NativeInvoke::Invoke<941, std::to_underlying(NativeHashes::GET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER), Any>(); }
    static inline auto GetPadOrientation() { return NativeInvoke::Invoke<942, std::to_underlying(NativeHashes::GET_PAD_ORIENTATION), Any>(); }
    static inline auto GetPadPitchRoll(uint32_t padIndex, float* pPitch, float* pRoll) { return NativeInvoke::Invoke<943, std::to_underlying(NativeHashes::GET_PAD_PITCH_ROLL), bool>(padIndex, pPitch, pRoll); }
    static inline auto GetPadState(int a1, int a2, int32_t* a3) { return NativeInvoke::Invoke<944, std::to_underlying(NativeHashes::GET_PAD_STATE), void>(a1, a2, a3); }
    static inline auto GetParkingNodeInArea() { return NativeInvoke::Invoke<945, std::to_underlying(NativeHashes::GET_PARKING_NODE_IN_AREA), Any>(); }
    static inline auto GetPedAtHeadOfQueue() { return NativeInvoke::Invoke<946, std::to_underlying(NativeHashes::GET_PED_AT_HEAD_OF_QUEUE), Any>(); }
    static inline auto GetPedBonePosition(Ped ped, uint32_t bone, float x, float y, float z, Vector3* pPosition) { return NativeInvoke::Invoke<947, std::to_underlying(NativeHashes::GET_PED_BONE_POSITION), void>(ped, bone, x, y, z, pPosition); }
    static inline auto GetPedClimbState(Ped ped) { return NativeInvoke::Invoke<948, std::to_underlying(NativeHashes::GET_PED_CLIMB_STATE), uint32_t>(ped); }
    static inline auto GetPedFromNetworkId(int32_t id, Ped* ped) { return NativeInvoke::Invoke<949, std::to_underlying(NativeHashes::GET_PED_FROM_NETWORK_ID), void>(id, ped); }
    static inline auto GetPedGroupIndex(Ped ped, uint32_t* pIndex) { return NativeInvoke::Invoke<950, std::to_underlying(NativeHashes::GET_PED_GROUP_INDEX), void>(ped, pIndex); }
    static inline auto GetPedModelFromIndex(int32_t index) { return NativeInvoke::Invoke<951, std::to_underlying(NativeHashes::GET_PED_MODEL_FROM_INDEX), uint32_t>(index); }
    static inline auto GetPedObjectIsAttachedTo(Object obj) { return NativeInvoke::Invoke<952, std::to_underlying(NativeHashes::GET_PED_OBJECT_IS_ATTACHED_TO), Ped>(obj); }
    static inline auto GetPedPathMayDropFromHeight(Ped ped) { return NativeInvoke::Invoke<953, std::to_underlying(NativeHashes::GET_PED_PATH_MAY_DROP_FROM_HEIGHT), bool>(ped); }
    static inline auto GetPedPathMayUseClimbovers(Ped ped) { return NativeInvoke::Invoke<954, std::to_underlying(NativeHashes::GET_PED_PATH_MAY_USE_CLIMBOVERS), bool>(ped); }
    static inline auto GetPedPathMayUseLadders(Ped ped) { return NativeInvoke::Invoke<955, std::to_underlying(NativeHashes::GET_PED_PATH_MAY_USE_LADDERS), bool>(ped); }
    static inline auto GetPedPathWillAvoidDynamicObjects(Ped ped) { return NativeInvoke::Invoke<956, std::to_underlying(NativeHashes::GET_PED_PATH_WILL_AVOID_DYNAMIC_OBJECTS), bool>(ped); }
    static inline auto GetPedSteersAroundObjects(Ped ped) { return NativeInvoke::Invoke<957, std::to_underlying(NativeHashes::GET_PED_STEERS_AROUND_OBJECTS), bool>(ped); }
    static inline auto GetPedSteersAroundPeds(Ped ped) { return NativeInvoke::Invoke<958, std::to_underlying(NativeHashes::GET_PED_STEERS_AROUND_PEDS), bool>(ped); }
    static inline auto GetPedType(Ped ped, uint32_t* pType) { return NativeInvoke::Invoke<959, std::to_underlying(NativeHashes::GET_PED_TYPE), void>(ped, pType); }
    static inline auto GetPetrolTankHealth(Vehicle vehicle) { return NativeInvoke::Invoke<960, std::to_underlying(NativeHashes::GET_PETROL_TANK_HEALTH), float>(vehicle); }
    static inline auto GetPhysicalScreenResolution(float* x, float* y) { return NativeInvoke::Invoke<961, std::to_underlying(NativeHashes::GET_PHYSICAL_SCREEN_RESOLUTION), void>(x, y); }
    static inline auto GetPickupCoordinates(Pickup pickup, float* pX, float* pY, float* pZ) { return NativeInvoke::Invoke<962, std::to_underlying(NativeHashes::GET_PICKUP_COORDINATES), void>(pickup, pX, pY, pZ); }
    static inline auto GetPlaneUndercarriagePosition(Vehicle plane, float* pos) { return NativeInvoke::Invoke<963, std::to_underlying(NativeHashes::GET_PLANE_UNDERCARRIAGE_POSITION), void>(plane, pos); }
    static inline auto GetPlayerChar(Player playerIndex, Ped* pPed) { return NativeInvoke::Invoke<964, std::to_underlying(NativeHashes::GET_PLAYER_CHAR), void>(playerIndex, pPed); }
    static inline auto GetPlayerColour(int32_t Player) { return NativeInvoke::Invoke<965, std::to_underlying(NativeHashes::GET_PLAYER_COLOUR), uint32_t>(Player); }
    static inline auto GetPlayerGroup(Player playerIndex, Group* pGroup) { return NativeInvoke::Invoke<966, std::to_underlying(NativeHashes::GET_PLAYER_GROUP), void>(playerIndex, pGroup); }
    static inline auto GetPlayerHasTracks() { return NativeInvoke::Invoke<967, std::to_underlying(NativeHashes::GET_PLAYER_HAS_TRACKS), bool>(); }
    static inline auto GetPlayerId() { return NativeInvoke::Invoke<968, std::to_underlying(NativeHashes::GET_PLAYER_ID), uint32_t>(); }
    static inline auto GetPlayerIdForThisPed(Ped ped) { return NativeInvoke::Invoke<969, std::to_underlying(NativeHashes::GET_PLAYER_ID_FOR_THIS_PED), int32_t>(ped); }
    static inline auto GetPlayerLcpdScore() { return NativeInvoke::Invoke<970, std::to_underlying(NativeHashes::GET_PLAYER_LCPD_SCORE), Any>(); }
    static inline auto GetPlayerMaxArmour(Player playerIndex, uint32_t* pMaxArmour) { return NativeInvoke::Invoke<971, std::to_underlying(NativeHashes::GET_PLAYER_MAX_ARMOUR), void>(playerIndex, pMaxArmour); }
    static inline auto GetPlayerMaxHealth(int32_t player, int32_t* maxhealth) { return NativeInvoke::Invoke<972, std::to_underlying(NativeHashes::GET_PLAYER_MAX_HEALTH), void>(player, maxhealth); }
    static inline auto GetPlayerName(Player playerIndex) { return NativeInvoke::Invoke<973, std::to_underlying(NativeHashes::GET_PLAYER_NAME), char*>(playerIndex); }
    static inline auto GetPlayerRadioMode() { return NativeInvoke::Invoke<974, std::to_underlying(NativeHashes::GET_PLAYER_RADIO_MODE), int32_t>(); }
    static inline auto GetPlayerRadioStationIndex() { return NativeInvoke::Invoke<975, std::to_underlying(NativeHashes::GET_PLAYER_RADIO_STATION_INDEX), uint32_t>(); }
    static inline auto GetPlayerRadioStationName() { return NativeInvoke::Invoke<976, std::to_underlying(NativeHashes::GET_PLAYER_RADIO_STATION_NAME), char*>(); }
    static inline auto GetPlayerRadioStationNameRoll() { return NativeInvoke::Invoke<977, std::to_underlying(NativeHashes::GET_PLAYER_RADIO_STATION_NAME_ROLL), char*>(); }
    static inline auto GetPlayerRankLevelDuringMp(Any a1) { return NativeInvoke::Invoke<978, std::to_underlying(NativeHashes::GET_PLAYER_RANK_LEVEL_DURING_MP), Any>(a1); }
    static inline auto GetPlayerRgbColour(int32_t Player, int32_t* r, int32_t* g, int32_t* b) { return NativeInvoke::Invoke<979, std::to_underlying(NativeHashes::GET_PLAYER_RGB_COLOUR), void>(Player, r, g, b); }
    static inline auto GetPlayerTeam(int32_t Player) { return NativeInvoke::Invoke<980, std::to_underlying(NativeHashes::GET_PLAYER_TEAM), int32_t>(Player); }
    static inline auto GetPlayerToPlaceBombInCar(Vehicle vehicle) { return NativeInvoke::Invoke<981, std::to_underlying(NativeHashes::GET_PLAYER_TO_PLACE_BOMB_IN_CAR), Any>(vehicle); }
    static inline auto GetPlayerWantedLevelIncrement(int32_t player, int32_t* increment) { return NativeInvoke::Invoke<982, std::to_underlying(NativeHashes::GET_PLAYER_WANTED_LEVEL_INCREMENT), void>(player, increment); }
    static inline auto GetPlayersLastCarNoSave(Vehicle* pVehicle) { return NativeInvoke::Invoke<983, std::to_underlying(NativeHashes::GET_PLAYERS_LAST_CAR_NO_SAVE), void>(pVehicle); }
    static inline auto GetPlayersettingsModelChoice() { return NativeInvoke::Invoke<984, std::to_underlying(NativeHashes::GET_PLAYERSETTINGS_MODEL_CHOICE), uint32_t>(); }
    static inline auto GetPositionOfAnalogueSticks(uint32_t padIndex, uint32_t* pLeftX, uint32_t* pLeftY, uint32_t* pRightX, uint32_t* pRightY) { return NativeInvoke::Invoke<985, std::to_underlying(NativeHashes::GET_POSITION_OF_ANALOGUE_STICKS), void>(padIndex, pLeftX, pLeftY, pRightX, pRightY); }
    static inline auto GetPositionOfCarRecordingAtTime(int32_t CarRec, float time, float* pos) { return NativeInvoke::Invoke<986, std::to_underlying(NativeHashes::GET_POSITION_OF_CAR_RECORDING_AT_TIME), void>(CarRec, time, pos); }
    static inline auto GetProfileSetting(int32_t settingid) { return NativeInvoke::Invoke<987, std::to_underlying(NativeHashes::GET_PROFILE_SETTING), int32_t>(settingid); }
    static inline auto GetProgressPercentage() { return NativeInvoke::Invoke<988, std::to_underlying(NativeHashes::GET_PROGRESS_PERCENTAGE), float>(); }
    static inline auto GetRadarViewportId(int32_t* viewport) { return NativeInvoke::Invoke<989, std::to_underlying(NativeHashes::GET_RADAR_VIEWPORT_ID), void>(viewport); }
    static inline auto GetRadioName(int32_t id) { return NativeInvoke::Invoke<990, std::to_underlying(NativeHashes::GET_RADIO_NAME), char*>(id); }
    static inline auto GetRandomCarBackBumperInSphere(float x, float y, float z, float radius, int a5, int a6, Vehicle* veh) { return NativeInvoke::Invoke<991, std::to_underlying(NativeHashes::GET_RANDOM_CAR_BACK_BUMPER_IN_SPHERE), void>(x, y, z, radius, a5, a6, veh); }
    static inline auto GetRandomCarFrontBumperInSphereNoSave(float x, float y, float z, float radius, bool flag0, bool flag1, int32_t* handle, bool flag2) { return NativeInvoke::Invoke<992, std::to_underlying(NativeHashes::GET_RANDOM_CAR_FRONT_BUMPER_IN_SPHERE_NO_SAVE), void>(x, y, z, radius, flag0, flag1, handle, flag2); }
    static inline auto GetRandomCarInSphere(float x, float y, float z, float radius, uint32_t model, int32_t unk, Car* car) { return NativeInvoke::Invoke<993, std::to_underlying(NativeHashes::GET_RANDOM_CAR_IN_SPHERE), void>(x, y, z, radius, model, unk, car); }
    static inline auto GetRandomCarInSphereNoSave(float x, float y, float z, float radius, uint32_t model, bool flag, Car* car) { return NativeInvoke::Invoke<994, std::to_underlying(NativeHashes::GET_RANDOM_CAR_IN_SPHERE_NO_SAVE), void>(x, y, z, radius, model, flag, car); }
    static inline auto GetRandomCarModelInMemory(bool MustIncludeSpecialModels, uint32_t* pHash, int32_t* pErrorId) { return NativeInvoke::Invoke<995, std::to_underlying(NativeHashes::GET_RANDOM_CAR_MODEL_IN_MEMORY), void>(MustIncludeSpecialModels, pHash, pErrorId); }
    static inline auto GetRandomCarNode(float x, float y, float z, float radius, bool flag0, bool flag1, bool flag2, float* pX, float* pY, float* pZ, float* heading) { return NativeInvoke::Invoke<996, std::to_underlying(NativeHashes::GET_RANDOM_CAR_NODE), bool>(x, y, z, radius, flag0, flag1, flag2, pX, pY, pZ, heading); }
    static inline auto GetRandomCarNodeIncludeSwitchedOffNodes(float x, float y, float z, float radius, bool flag0, bool flag1, bool flag2, float* pX, float* pY, float* pZ, float* heading) { return NativeInvoke::Invoke<997, std::to_underlying(NativeHashes::GET_RANDOM_CAR_NODE_INCLUDE_SWITCHED_OFF_NODES), bool>(x, y, z, radius, flag0, flag1, flag2, pX, pY, pZ, heading); }
    static inline auto GetRandomCarOfTypeInAngledAreaNoSave(float a1, float a2, float a3, float a4, float a5, uint32_t type, Car* car) { return NativeInvoke::Invoke<998, std::to_underlying(NativeHashes::GET_RANDOM_CAR_OF_TYPE_IN_ANGLED_AREA_NO_SAVE), void>(a1, a2, a3, a4, a5, type, car); }
    static inline auto GetRandomCarOfTypeInAreaNoSave(float x0, float y0, float x1, float y1, uint32_t model, Car* car) { return NativeInvoke::Invoke<999, std::to_underlying(NativeHashes::GET_RANDOM_CAR_OF_TYPE_IN_AREA_NO_SAVE), void>(x0, y0, x1, y1, model, car); }
    static inline auto GetRandomCharInAreaOffsetNoSave(float x, float y, float z, float sx, float sy, float sz, Ped* pPed) { return NativeInvoke::Invoke<1000, std::to_underlying(NativeHashes::GET_RANDOM_CHAR_IN_AREA_OFFSET_NO_SAVE), void>(x, y, z, sx, sy, sz, pPed); }
    static inline auto GetRandomNetworkRestartNode(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<1001, std::to_underlying(NativeHashes::GET_RANDOM_NETWORK_RESTART_NODE), Any>(a1, a2, a3, a4, a5, a6); }
    static inline auto GetRandomNetworkRestartNodeExcludingGroup() { return NativeInvoke::Invoke<1002, std::to_underlying(NativeHashes::GET_RANDOM_NETWORK_RESTART_NODE_EXCLUDING_GROUP), Any>(); }
    static inline auto GetRandomNetworkRestartNodeOfGroup() { return NativeInvoke::Invoke<1003, std::to_underlying(NativeHashes::GET_RANDOM_NETWORK_RESTART_NODE_OF_GROUP), Any>(); }
    static inline auto GetRandomNetworkRestartNodeUsingGroupList(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<1004, std::to_underlying(NativeHashes::GET_RANDOM_NETWORK_RESTART_NODE_USING_GROUP_LIST), Any>(a1, a2, a3, a4, a5, a6); }
    static inline auto GetRandomWaterNode(float x, float y, float z, float radius, bool flag0, bool flag1, bool flag2, bool flag3, float* pX, float* pY, float* pZ, float* heading) { return NativeInvoke::Invoke<1005, std::to_underlying(NativeHashes::GET_RANDOM_WATER_NODE), bool>(x, y, z, radius, flag0, flag1, flag2, flag3, pX, pY, pZ, heading); }
    static inline auto GetRemoteControlledCar() { return NativeInvoke::Invoke<1006, std::to_underlying(NativeHashes::GET_REMOTE_CONTROLLED_CAR), Any>(); }
    static inline auto GetReturnToFilterMenu() { return NativeInvoke::Invoke<1007, std::to_underlying(NativeHashes::GET_RETURN_TO_FILTER_MENU), Any>(); }
    static inline auto GetRoomKeyFromObject(Object obj, uint32_t* pRoomKey) { return NativeInvoke::Invoke<1008, std::to_underlying(NativeHashes::GET_ROOM_KEY_FROM_OBJECT), void>(obj, pRoomKey); }
    static inline auto GetRoomKeyFromPickup(int32_t pickup, uint32_t* hash) { return NativeInvoke::Invoke<1009, std::to_underlying(NativeHashes::GET_ROOM_KEY_FROM_PICKUP), void>(pickup, hash); }
    static inline auto GetRoomNameFromCharDebug() { return NativeInvoke::Invoke<1010, std::to_underlying(NativeHashes::GET_ROOM_NAME_FROM_CHAR_DEBUG), Any>(); }
    static inline auto GetRootCam(Cam* rootcam) { return NativeInvoke::Invoke<1011, std::to_underlying(NativeHashes::GET_ROOT_CAM), void>(rootcam); }
    static inline auto GetRopeHeightForObject(Object obj, float* height) { return NativeInvoke::Invoke<1012, std::to_underlying(NativeHashes::GET_ROPE_HEIGHT_FOR_OBJECT), void>(obj, height); }
    static inline auto GetRouteSize() { return NativeInvoke::Invoke<1013, std::to_underlying(NativeHashes::GET_ROUTE_SIZE), int32_t>(); }
    static inline auto GetSafeLocalRestartCoords() { return NativeInvoke::Invoke<1014, std::to_underlying(NativeHashes::GET_SAFE_LOCAL_RESTART_COORDS), Any>(); }
    static inline auto GetSafePickupCoords(float x, float y, float z, float* pSafeX, float* pSafeY, float* pSafeZ) { return NativeInvoke::Invoke<1015, std::to_underlying(NativeHashes::GET_SAFE_PICKUP_COORDS), void>(x, y, z, pSafeX, pSafeY, pSafeZ); }
    static inline auto GetSafePositionForChar(float x, float y, float z, bool unknownTrue, float* pSafeX, float* pSafeY, float* pSafeZ) { return NativeInvoke::Invoke<1016, std::to_underlying(NativeHashes::GET_SAFE_POSITION_FOR_CHAR), bool>(x, y, z, unknownTrue, pSafeX, pSafeY, pSafeZ); }
    static inline auto GetScreenFadeAlpha() { return NativeInvoke::Invoke<1017, std::to_underlying(NativeHashes::GET_SCREEN_FADE_ALPHA), int32_t>(); }
    static inline auto GetScreenResolution(float* x, float* y) { return NativeInvoke::Invoke<1018, std::to_underlying(NativeHashes::GET_SCREEN_RESOLUTION), void>(x, y); }
    static inline auto GetScreenViewportId(int32_t* viewportid) { return NativeInvoke::Invoke<1019, std::to_underlying(NativeHashes::GET_SCREEN_VIEWPORT_ID), void>(viewportid); }
    static inline auto GetScriptCam(int32_t* cam) { return NativeInvoke::Invoke<1020, std::to_underlying(NativeHashes::GET_SCRIPT_CAM), void>(cam); }
    static inline auto GetScriptDrawCam(int32_t* cam) { return NativeInvoke::Invoke<1021, std::to_underlying(NativeHashes::GET_SCRIPT_DRAW_CAM), void>(cam); }
    static inline auto GetScriptFireCoords(int32_t fire, float* x, float* y, float* z) { return NativeInvoke::Invoke<1022, std::to_underlying(NativeHashes::GET_SCRIPT_FIRE_COORDS), void>(fire, x, y, z); }
    static inline auto GetScriptRendertargetRenderId(uint32_t* pRenderId) { return NativeInvoke::Invoke<1023, std::to_underlying(NativeHashes::GET_SCRIPT_RENDERTARGET_RENDER_ID), void>(pRenderId); }
    static inline auto GetScriptTaskStatus(Ped ped, int32_t task, int32_t* status) { return NativeInvoke::Invoke<1024, std::to_underlying(NativeHashes::GET_SCRIPT_TASK_STATUS), void>(ped, task, status); }
    static inline auto GetSequenceProgress(int32_t seq, int32_t* progress) { return NativeInvoke::Invoke<1025, std::to_underlying(NativeHashes::GET_SEQUENCE_PROGRESS), void>(seq, progress); }
    static inline auto GetSequenceProgressRecursive() { return NativeInvoke::Invoke<1026, std::to_underlying(NativeHashes::GET_SEQUENCE_PROGRESS_RECURSIVE), Any>(); }
    static inline auto GetServerId() { return NativeInvoke::Invoke<1027, std::to_underlying(NativeHashes::GET_SERVER_ID), Any>(); }
    static inline auto GetSimpleBlipId() { return NativeInvoke::Invoke<1028, std::to_underlying(NativeHashes::GET_SIMPLE_BLIP_ID), int32_t>(); }
    static inline auto GetSortedNetworkRestartNode(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<1029, std::to_underlying(NativeHashes::GET_SORTED_NETWORK_RESTART_NODE), Any>(a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto GetSortedNetworkRestartNodeExcludingGroup() { return NativeInvoke::Invoke<1030, std::to_underlying(NativeHashes::GET_SORTED_NETWORK_RESTART_NODE_EXCLUDING_GROUP), Any>(); }
    static inline auto GetSortedNetworkRestartNodeOfGroup() { return NativeInvoke::Invoke<1031, std::to_underlying(NativeHashes::GET_SORTED_NETWORK_RESTART_NODE_OF_GROUP), Any>(); }
    static inline auto GetSortedNetworkRestartNodeUsingGroupList(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<1032, std::to_underlying(NativeHashes::GET_SORTED_NETWORK_RESTART_NODE_USING_GROUP_LIST), Any>(a1, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto GetSoundId() { return NativeInvoke::Invoke<1033, std::to_underlying(NativeHashes::GET_SOUND_ID), uint32_t>(); }
    static inline auto GetSoundLevelAtCoords(Ped ped, float x, float y, float z, int32_t* level) { return NativeInvoke::Invoke<1034, std::to_underlying(NativeHashes::GET_SOUND_LEVEL_AT_COORDS), void>(ped, x, y, z, level); }
    static inline auto GetSpawnCoordinatesForCarNode(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<1035, std::to_underlying(NativeHashes::GET_SPAWN_COORDINATES_FOR_CAR_NODE), void>(a1, a2, a3, a4, a5, a6); }
    static inline auto GetSpeechForEmergencyServiceCall() { return NativeInvoke::Invoke<1036, std::to_underlying(NativeHashes::GET_SPEECH_FOR_EMERGENCY_SERVICE_CALL), char*>(); }
    static inline auto GetStartFromFilterMenu() { return NativeInvoke::Invoke<1037, std::to_underlying(NativeHashes::GET_START_FROM_FILTER_MENU), Any>(); }
    static inline auto GetStatFrontendDisplayType(int32_t stat) { return NativeInvoke::Invoke<1038, std::to_underlying(NativeHashes::GET_STAT_FRONTEND_DISPLAY_TYPE), int32_t>(stat); }
    static inline auto GetStatFrontendVisibility(int32_t stat) { return NativeInvoke::Invoke<1039, std::to_underlying(NativeHashes::GET_STAT_FRONTEND_VISIBILITY), bool>(stat); }
    static inline auto GetStateOfClosestDoorOfType(uint32_t model, float x, float y, float z, int32_t* state, float* a6) { return NativeInvoke::Invoke<1040, std::to_underlying(NativeHashes::GET_STATE_OF_CLOSEST_DOOR_OF_TYPE), void>(model, x, y, z, state, a6); }
    static inline auto GetStaticEmitterPlaytime(int32_t StaticEmitterIndex) { return NativeInvoke::Invoke<1041, std::to_underlying(NativeHashes::GET_STATIC_EMITTER_PLAYTIME), int32_t>(StaticEmitterIndex); }
    static inline auto GetStationName(Train train, uint32_t station) { return NativeInvoke::Invoke<1042, std::to_underlying(NativeHashes::GET_STATION_NAME), char*>(train, station); }
    static inline auto GetStreamBeatInfo(int32_t* a1, int32_t* a2, int32_t* a3) { return NativeInvoke::Invoke<1043, std::to_underlying(NativeHashes::GET_STREAM_BEAT_INFO), void>(a1, a2, a3); }
    static inline auto GetStreamPlaytime() { return NativeInvoke::Invoke<1044, std::to_underlying(NativeHashes::GET_STREAM_PLAYTIME), int32_t>(); }
    static inline auto GetStringFromHashKey(uint32_t hashKey) { return NativeInvoke::Invoke<1045, std::to_underlying(NativeHashes::GET_STRING_FROM_HASH_KEY), char*>(hashKey); }
    static inline auto GetStringFromString(char* str, int32_t startsymb, int32_t endsymb) { return NativeInvoke::Invoke<1046, std::to_underlying(NativeHashes::GET_STRING_FROM_STRING), char*>(str, startsymb, endsymb); }
    static inline auto GetStringFromTextFile(char* gxtentry) { return NativeInvoke::Invoke<1047, std::to_underlying(NativeHashes::GET_STRING_FROM_TEXT_FILE), char*>(gxtentry); }
    static inline auto GetStringWidth(char* gxtName) { return NativeInvoke::Invoke<1048, std::to_underlying(NativeHashes::GET_STRING_WIDTH), int32_t>(gxtName); }
    static inline auto GetStringWidthWithNumber(char* gxtName, int32_t number) { return NativeInvoke::Invoke<1049, std::to_underlying(NativeHashes::GET_STRING_WIDTH_WITH_NUMBER), int32_t>(gxtName, number); }
    static inline auto GetStringWidthWithString(char* gxtName, char* literalString) { return NativeInvoke::Invoke<1050, std::to_underlying(NativeHashes::GET_STRING_WIDTH_WITH_STRING), int32_t>(gxtName, literalString); }
    static inline auto GetStringWidthWithTextAndInt(char* gxtname, char* gxtnamenext, int32_t val) { return NativeInvoke::Invoke<1051, std::to_underlying(NativeHashes::GET_STRING_WIDTH_WITH_TEXT_AND_INT), int32_t>(gxtname, gxtnamenext, val); }
    static inline auto GetTaskPlaceCarBombUnsuccessful() { return NativeInvoke::Invoke<1052, std::to_underlying(NativeHashes::GET_TASK_PLACE_CAR_BOMB_UNSUCCESSFUL), bool>(); }
    static inline auto GetTeamColour() { return NativeInvoke::Invoke<1053, std::to_underlying(NativeHashes::GET_TEAM_COLOUR), Any>(); }
    static inline auto GetTeamRgbColour(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<1054, std::to_underlying(NativeHashes::GET_TEAM_RGB_COLOUR), void>(a1, a2, a3, a4); }
    static inline auto GetTextInputActive() { return NativeInvoke::Invoke<1055, std::to_underlying(NativeHashes::GET_TEXT_INPUT_ACTIVE), bool>(); }
    static inline auto GetTexture(TextureDict dictionary, const char* textureName) { return NativeInvoke::Invoke<1056, std::to_underlying(NativeHashes::GET_TEXTURE), Texture>(dictionary, textureName); }
    static inline auto GetTextureFromStreamedTxd(char* txdName, const char* textureName) { return NativeInvoke::Invoke<1057, std::to_underlying(NativeHashes::GET_TEXTURE_FROM_STREAMED_TXD), Texture>(txdName, textureName); }
    static inline auto GetTextureResolution(uint32_t texture, float* x, float* y) { return NativeInvoke::Invoke<1058, std::to_underlying(NativeHashes::GET_TEXTURE_RESOLUTION), void>(texture, x, y); }
    static inline auto GetTimeOfDay(uint32_t* hour, uint32_t* minute) { return NativeInvoke::Invoke<1059, std::to_underlying(NativeHashes::GET_TIME_OF_DAY), void>(hour, minute); }
    static inline auto GetTimeSinceLastArrest() { return NativeInvoke::Invoke<1060, std::to_underlying(NativeHashes::GET_TIME_SINCE_LAST_ARREST), uint32_t>(); }
    static inline auto GetTimeSinceLastDeath() { return NativeInvoke::Invoke<1061, std::to_underlying(NativeHashes::GET_TIME_SINCE_LAST_DEATH), uint32_t>(); }
    static inline auto GetTimeSincePlayerDroveAgainstTraffic(Player playerIndex) { return NativeInvoke::Invoke<1062, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC), uint32_t>(playerIndex); }
    static inline auto GetTimeSincePlayerDroveOnPavement(Player playerIndex) { return NativeInvoke::Invoke<1063, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT), uint32_t>(playerIndex); }
    static inline auto GetTimeSincePlayerHitBuilding(Player playerIndex) { return NativeInvoke::Invoke<1064, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_HIT_BUILDING), uint32_t>(playerIndex); }
    static inline auto GetTimeSincePlayerHitCar(Player playerIndex) { return NativeInvoke::Invoke<1065, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_HIT_CAR), uint32_t>(playerIndex); }
    static inline auto GetTimeSincePlayerHitObject(Player playerIndex) { return NativeInvoke::Invoke<1066, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_HIT_OBJECT), uint32_t>(playerIndex); }
    static inline auto GetTimeSincePlayerHitPed(Player playerIndex) { return NativeInvoke::Invoke<1067, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_HIT_PED), uint32_t>(playerIndex); }
    static inline auto GetTimeSincePlayerRanLight(Player playerIndex) { return NativeInvoke::Invoke<1068, std::to_underlying(NativeHashes::GET_TIME_SINCE_PLAYER_RAN_LIGHT), uint32_t>(playerIndex); }
    static inline auto GetTimeTilNextStation(Vehicle train) { return NativeInvoke::Invoke<1069, std::to_underlying(NativeHashes::GET_TIME_TIL_NEXT_STATION), float>(train); }
    static inline auto GetTotalDurationOfCarRecording(int32_t CarRec) { return NativeInvoke::Invoke<1070, std::to_underlying(NativeHashes::GET_TOTAL_DURATION_OF_CAR_RECORDING), float>(CarRec); }
    static inline auto GetTotalNumberOfStats() { return NativeInvoke::Invoke<1071, std::to_underlying(NativeHashes::GET_TOTAL_NUMBER_OF_STATS), int32_t>(); }
    static inline auto GetTrainCaboose(Vehicle train, Vehicle* caboose) { return NativeInvoke::Invoke<1072, std::to_underlying(NativeHashes::GET_TRAIN_CABOOSE), void>(train, caboose); }
    static inline auto GetTrainCarriage(Vehicle train, int32_t num, Vehicle* carriage) { return NativeInvoke::Invoke<1073, std::to_underlying(NativeHashes::GET_TRAIN_CARRIAGE), void>(train, num, carriage); }
    static inline auto GetTrainPlayerWouldEnter(int32_t player, int32_t* train) { return NativeInvoke::Invoke<1074, std::to_underlying(NativeHashes::GET_TRAIN_PLAYER_WOULD_ENTER), void>(player, train); }
    static inline auto GetTxd(char* txdName) { return NativeInvoke::Invoke<1075, std::to_underlying(NativeHashes::GET_TXD), TextureDict>(txdName); }
    static inline auto GetVehicleClass() { return NativeInvoke::Invoke<1076, std::to_underlying(NativeHashes::GET_VEHICLE_CLASS), Any>(); }
    static inline auto GetVehicleComponentInfo(Vehicle veh, int32_t component_id, Vector3* a3, Vector3* a4, int32_t* a5, bool flag) { return NativeInvoke::Invoke<1077, std::to_underlying(NativeHashes::GET_VEHICLE_COMPONENT_INFO), bool>(veh, component_id, a3, a4, a5, flag); }
    static inline auto GetVehicleDirtLevel(Vehicle vehicle, float* pIntensity) { return NativeInvoke::Invoke<1078, std::to_underlying(NativeHashes::GET_VEHICLE_DIRT_LEVEL), void>(vehicle, pIntensity); }
    static inline auto GetVehicleEngineRevs(Vehicle veh) { return NativeInvoke::Invoke<1079, std::to_underlying(NativeHashes::GET_VEHICLE_ENGINE_REVS), float>(veh); }
    static inline auto GetVehicleFromNetworkId(Any a1, Any a2) { return NativeInvoke::Invoke<1080, std::to_underlying(NativeHashes::GET_VEHICLE_FROM_NETWORK_ID), void>(a1, a2); }
    static inline auto GetVehicleGear(Vehicle veh) { return NativeInvoke::Invoke<1081, std::to_underlying(NativeHashes::GET_VEHICLE_GEAR), int32_t>(veh); }
    static inline auto GetVehicleModelFromIndex(int32_t index) { return NativeInvoke::Invoke<1082, std::to_underlying(NativeHashes::GET_VEHICLE_MODEL_FROM_INDEX), uint32_t>(index); }
    static inline auto GetVehiclePlayerWouldEnter(int32_t player, Vehicle* veh) { return NativeInvoke::Invoke<1083, std::to_underlying(NativeHashes::GET_VEHICLE_PLAYER_WOULD_ENTER), void>(player, veh); }
    static inline auto GetVehicleQuaternion(Vehicle veh, float* a2, float* a3, float* a4, float* a5) { return NativeInvoke::Invoke<1084, std::to_underlying(NativeHashes::GET_VEHICLE_QUATERNION), void>(veh, a2, a3, a4, a5); }
    static inline auto GetVehicleTypeOfModel(uint32_t model) { return NativeInvoke::Invoke<1085, std::to_underlying(NativeHashes::GET_VEHICLE_TYPE_OF_MODEL), int32_t>(model); }
    static inline auto GetViewportPosAndSize(int32_t viewportid, float* x, float* y, float* xsize, float* ysize) { return NativeInvoke::Invoke<1086, std::to_underlying(NativeHashes::GET_VIEWPORT_POS_AND_SIZE), void>(viewportid, x, y, xsize, ysize); }
    static inline auto GetViewportPositionOfCoord(float x, float y, float z, float* vx, float* vy, float* vz) { return NativeInvoke::Invoke<1087, std::to_underlying(NativeHashes::GET_VIEWPORT_POSITION_OF_COORD), bool>(x, y, z, vx, vy, vz); }
    static inline auto GetWaterHeight(float x, float y, float z, float* pheight) { return NativeInvoke::Invoke<1088, std::to_underlying(NativeHashes::GET_WATER_HEIGHT), bool>(x, y, z, pheight); }
    static inline auto GetWaterHeightNoWaves(float x, float y, float z, float* height) { return NativeInvoke::Invoke<1089, std::to_underlying(NativeHashes::GET_WATER_HEIGHT_NO_WAVES), bool>(x, y, z, height); }
    static inline auto GetWeapontypeModel(int32_t weapontype, uint32_t* model) { return NativeInvoke::Invoke<1090, std::to_underlying(NativeHashes::GET_WEAPONTYPE_MODEL), void>(weapontype, model); }
    static inline auto GetWeapontypeSlot(int32_t weapon, int32_t* slot) { return NativeInvoke::Invoke<1091, std::to_underlying(NativeHashes::GET_WEAPONTYPE_SLOT), void>(weapon, slot); }
    static inline auto GetWebPageHeight(int32_t htmlviewport) { return NativeInvoke::Invoke<1092, std::to_underlying(NativeHashes::GET_WEB_PAGE_HEIGHT), float>(htmlviewport); }
    static inline auto GetWebPageLinkAtPosn(int32_t htmlviewport, float x, float y) { return NativeInvoke::Invoke<1093, std::to_underlying(NativeHashes::GET_WEB_PAGE_LINK_AT_POSN), int32_t>(htmlviewport, x, y); }
    static inline auto GetWebPageLinkHref(int32_t htmlviewport, int32_t linkid) { return NativeInvoke::Invoke<1094, std::to_underlying(NativeHashes::GET_WEB_PAGE_LINK_HREF), char*>(htmlviewport, linkid); }
    static inline auto GetWebPageLinkPosn(int32_t htmlviewport, int32_t linkid, float* x, float* y) { return NativeInvoke::Invoke<1095, std::to_underlying(NativeHashes::GET_WEB_PAGE_LINK_POSN), void>(htmlviewport, linkid, x, y); }
    static inline auto GetWidthOfLiteralString(char* str) { return NativeInvoke::Invoke<1096, std::to_underlying(NativeHashes::GET_WIDTH_OF_LITERAL_STRING), int32_t>(str); }
    static inline auto GetWidthOfSubstringGivenTextLabel(char* gxtname, bool a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<1097, std::to_underlying(NativeHashes::GET_WIDTH_OF_SUBSTRING_GIVEN_TEXT_LABEL), int32_t>(gxtname, a2, a3, a4, a5); }
    static inline auto GiveDelayedWeaponToChar(Ped ped, int32_t weapon, int32_t delaytime, bool flag) { return NativeInvoke::Invoke<1098, std::to_underlying(NativeHashes::GIVE_DELAYED_WEAPON_TO_CHAR), void>(ped, weapon, delaytime, flag); }
    static inline auto GivePedAmbientObject(Ped ped, uint32_t model) { return NativeInvoke::Invoke<1099, std::to_underlying(NativeHashes::GIVE_PED_AMBIENT_OBJECT), void>(ped, model); }
    static inline auto GivePedFakeNetworkName(Ped ped, char* name, int32_t r, int32_t g, int32_t b, int32_t a) { return NativeInvoke::Invoke<1100, std::to_underlying(NativeHashes::GIVE_PED_FAKE_NETWORK_NAME), void>(ped, name, r, g, b, a); }
    static inline auto GivePedHelmet(Ped ped) { return NativeInvoke::Invoke<1101, std::to_underlying(NativeHashes::GIVE_PED_HELMET), void>(ped); }
    static inline auto GivePedHelmetWithOpts(Ped ped, bool a2) { return NativeInvoke::Invoke<1102, std::to_underlying(NativeHashes::GIVE_PED_HELMET_WITH_OPTS), void>(ped, a2); }
    static inline auto GivePedPickupObject(Ped ped, Object obj, bool flag) { return NativeInvoke::Invoke<1103, std::to_underlying(NativeHashes::GIVE_PED_PICKUP_OBJECT), void>(ped, obj, flag); }
    static inline auto GivePlayerHelmet() { return NativeInvoke::Invoke<1104, std::to_underlying(NativeHashes::GIVE_PLAYER_HELMET), Any>(); }
    static inline auto GivePlayerRagdollControl(int32_t player, bool give) { return NativeInvoke::Invoke<1105, std::to_underlying(NativeHashes::GIVE_PLAYER_RAGDOLL_CONTROL), void>(player, give); }
    static inline auto GiveRemoteControlledModelToPlayer() { return NativeInvoke::Invoke<1106, std::to_underlying(NativeHashes::GIVE_REMOTE_CONTROLLED_MODEL_TO_PLAYER), Any>(); }
    static inline auto GiveWeaponToChar(Ped ped, uint32_t weapon, uint32_t ammo, bool unknown0) { return NativeInvoke::Invoke<1107, std::to_underlying(NativeHashes::GIVE_WEAPON_TO_CHAR), void>(ped, weapon, ammo, unknown0); }
    static inline auto GrabEntityOnRopeForObject(Object obj, int32_t* a2, int32_t* a3, int32_t* a4) { return NativeInvoke::Invoke<1108, std::to_underlying(NativeHashes::GRAB_ENTITY_ON_ROPE_FOR_OBJECT), void>(obj, a2, a3, a4); }
    static inline auto GrabNearbyObjectWithSpecialAttribute(int32_t attribute, Object* obj) { return NativeInvoke::Invoke<1109, std::to_underlying(NativeHashes::GRAB_NEARBY_OBJECT_WITH_SPECIAL_ATTRIBUTE), void>(attribute, obj); }
    static inline auto HandVehicleControlBackToPlayer(Vehicle veh) { return NativeInvoke::Invoke<1110, std::to_underlying(NativeHashes::HAND_VEHICLE_CONTROL_BACK_TO_PLAYER), void>(veh); }
    static inline auto HandleAudioAnimEvent(Ped ped, char* AudioAnimEventName) { return NativeInvoke::Invoke<1111, std::to_underlying(NativeHashes::HANDLE_AUDIO_ANIM_EVENT), void>(ped, AudioAnimEventName); }
    static inline auto HasAchievementBeenPassed(uint32_t achievement) { return NativeInvoke::Invoke<1112, std::to_underlying(NativeHashes::HAS_ACHIEVEMENT_BEEN_PASSED), bool>(achievement); }
    static inline auto HasAdditionalTextLoaded(uint32_t textIndex) { return NativeInvoke::Invoke<1113, std::to_underlying(NativeHashes::HAS_ADDITIONAL_TEXT_LOADED), bool>(textIndex); }
    static inline auto HasCarBeenDamagedByCar(Vehicle vehicle, Vehicle otherCar) { return NativeInvoke::Invoke<1114, std::to_underlying(NativeHashes::HAS_CAR_BEEN_DAMAGED_BY_CAR), bool>(vehicle, otherCar); }
    static inline auto HasCarBeenDamagedByChar(Vehicle vehicle, Ped ped) { return NativeInvoke::Invoke<1115, std::to_underlying(NativeHashes::HAS_CAR_BEEN_DAMAGED_BY_CHAR), bool>(vehicle, ped); }
    static inline auto HasCarBeenDamagedByWeapon(Vehicle vehicle, uint32_t weapon) { return NativeInvoke::Invoke<1116, std::to_underlying(NativeHashes::HAS_CAR_BEEN_DAMAGED_BY_WEAPON), bool>(vehicle, weapon); }
    static inline auto HasCarBeenDroppedOff(Car car) { return NativeInvoke::Invoke<1117, std::to_underlying(NativeHashes::HAS_CAR_BEEN_DROPPED_OFF), bool>(car); }
    static inline auto HasCarBeenResprayed(Vehicle vehicle) { return NativeInvoke::Invoke<1118, std::to_underlying(NativeHashes::HAS_CAR_BEEN_RESPRAYED), bool>(vehicle); }
    static inline auto HasCarRecordingBeenLoaded(int32_t CarRec) { return NativeInvoke::Invoke<1119, std::to_underlying(NativeHashes::HAS_CAR_RECORDING_BEEN_LOADED), bool>(CarRec); }
    static inline auto HasCarStoppedBecauseOfLight(Car car) { return NativeInvoke::Invoke<1120, std::to_underlying(NativeHashes::HAS_CAR_STOPPED_BECAUSE_OF_LIGHT), bool>(car); }
    static inline auto HasCharAnimFinished(Ped ped, char* AnimName0, char* AnimName1) { return NativeInvoke::Invoke<1121, std::to_underlying(NativeHashes::HAS_CHAR_ANIM_FINISHED), bool>(ped, AnimName0, AnimName1); }
    static inline auto HasCharBeenArrested(Ped ped) { return NativeInvoke::Invoke<1122, std::to_underlying(NativeHashes::HAS_CHAR_BEEN_ARRESTED), bool>(ped); }
    static inline auto HasCharBeenDamagedByCar(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<1123, std::to_underlying(NativeHashes::HAS_CHAR_BEEN_DAMAGED_BY_CAR), bool>(ped, vehicle); }
    static inline auto HasCharBeenDamagedByChar(Ped ped, Ped otherChar, bool unknownFalse) { return NativeInvoke::Invoke<1124, std::to_underlying(NativeHashes::HAS_CHAR_BEEN_DAMAGED_BY_CHAR), bool>(ped, otherChar, unknownFalse); }
    static inline auto HasCharBeenDamagedByWeapon(Ped ped, uint32_t weapon) { return NativeInvoke::Invoke<1125, std::to_underlying(NativeHashes::HAS_CHAR_BEEN_DAMAGED_BY_WEAPON), bool>(ped, weapon); }
    static inline auto HasCharBeenPhotographed(Ped ped) { return NativeInvoke::Invoke<1126, std::to_underlying(NativeHashes::HAS_CHAR_BEEN_PHOTOGRAPHED), bool>(ped); }
    static inline auto HasCharGotWeapon(Ped ped, uint32_t weapon) { return NativeInvoke::Invoke<1127, std::to_underlying(NativeHashes::HAS_CHAR_GOT_WEAPON), bool>(ped, weapon); }
    static inline auto HasCharSpottedChar(Ped ped, Ped otherChar) { return NativeInvoke::Invoke<1128, std::to_underlying(NativeHashes::HAS_CHAR_SPOTTED_CHAR), bool>(ped, otherChar); }
    static inline auto HasCharSpottedCharInFront(Ped ped, Ped otherChar) { return NativeInvoke::Invoke<1129, std::to_underlying(NativeHashes::HAS_CHAR_SPOTTED_CHAR_IN_FRONT), bool>(ped, otherChar); }
    static inline auto HasClosestObjectOfTypeBeenDamagedByCar(float x, float y, float z, float radius, uint32_t type_or_model, Car car) { return NativeInvoke::Invoke<1130, std::to_underlying(NativeHashes::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_CAR), bool>(x, y, z, radius, type_or_model, car); }
    static inline auto HasClosestObjectOfTypeBeenDamagedByChar(float x, float y, float z, float radius, uint32_t objectModel, Ped ped) { return NativeInvoke::Invoke<1131, std::to_underlying(NativeHashes::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_CHAR), bool>(x, y, z, radius, objectModel, ped); }
    static inline auto HasCollisionForModelLoaded(uint32_t model) { return NativeInvoke::Invoke<1132, std::to_underlying(NativeHashes::HAS_COLLISION_FOR_MODEL_LOADED), bool>(model); }
    static inline auto HasControlOfNetworkId(Any a1) { return NativeInvoke::Invoke<1133, std::to_underlying(NativeHashes::HAS_CONTROL_OF_NETWORK_ID), Any>(a1); }
    static inline auto HasCutsceneFinished() { return NativeInvoke::Invoke<1134, std::to_underlying(NativeHashes::HAS_CUTSCENE_FINISHED), bool>(); }
    static inline auto HasCutsceneLoaded() { return NativeInvoke::Invoke<1135, std::to_underlying(NativeHashes::HAS_CUTSCENE_LOADED), bool>(); }
    static inline auto HasDeatharrestExecuted() { return NativeInvoke::Invoke<1136, std::to_underlying(NativeHashes::HAS_DEATHARREST_EXECUTED), bool>(); }
    static inline auto HasFragmentRootOfClosestObjectOfTypeBeenDamaged(float x, float y, float z, float radius, uint32_t a5) { return NativeInvoke::Invoke<1137, std::to_underlying(NativeHashes::HAS_FRAGMENT_ROOT_OF_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED), bool>(x, y, z, radius, a5); }
    static inline auto HasGamerChangedNetworkModelSettings() { return NativeInvoke::Invoke<1138, std::to_underlying(NativeHashes::HAS_GAMER_CHANGED_NETWORK_MODEL_SETTINGS), Any>(); }
    static inline auto HasModelLoaded(uint32_t model) { return NativeInvoke::Invoke<1139, std::to_underlying(NativeHashes::HAS_MODEL_LOADED), bool>(model); }
    static inline auto HasNetIdBeenCloned() { return NativeInvoke::Invoke<1140, std::to_underlying(NativeHashes::HAS_NET_ID_BEEN_CLONED), Any>(); }
    static inline auto HasNetworkPlayerLeftGame(Any a1) { return NativeInvoke::Invoke<1141, std::to_underlying(NativeHashes::HAS_NETWORK_PLAYER_LEFT_GAME), Any>(a1); }
    static inline auto HasObjectBeenDamaged(Object obj) { return NativeInvoke::Invoke<1142, std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED), bool>(obj); }
    static inline auto HasObjectBeenDamagedByCar(Object obj, Vehicle vehicle) { return NativeInvoke::Invoke<1143, std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED_BY_CAR), bool>(obj, vehicle); }
    static inline auto HasObjectBeenDamagedByChar(Object obj, Ped ped) { return NativeInvoke::Invoke<1144, std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED_BY_CHAR), bool>(obj, ped); }
    static inline auto HasObjectBeenDamagedByWeapon(Object obj, int32_t unk) { return NativeInvoke::Invoke<1145, std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_DAMAGED_BY_WEAPON), bool>(obj, unk); }
    static inline auto HasObjectBeenPhotographed(Object obj) { return NativeInvoke::Invoke<1146, std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_PHOTOGRAPHED), bool>(obj); }
    static inline auto HasObjectBeenUprooted(Object obj) { return NativeInvoke::Invoke<1147, std::to_underlying(NativeHashes::HAS_OBJECT_BEEN_UPROOTED), bool>(obj); }
    static inline auto HasObjectCollidedWithAnything(Object obj) { return NativeInvoke::Invoke<1148, std::to_underlying(NativeHashes::HAS_OBJECT_COLLIDED_WITH_ANYTHING), bool>(obj); }
    static inline auto HasObjectFragmentRootBeenDamaged(Object obj) { return NativeInvoke::Invoke<1149, std::to_underlying(NativeHashes::HAS_OBJECT_FRAGMENT_ROOT_BEEN_DAMAGED), bool>(obj); }
    static inline auto HasOverridenSitIdleAnimFinished(Ped ped) { return NativeInvoke::Invoke<1150, std::to_underlying(NativeHashes::HAS_OVERRIDEN_SIT_IDLE_ANIM_FINISHED), bool>(ped); }
    static inline auto HasPickupBeenCollected(Pickup pickup) { return NativeInvoke::Invoke<1151, std::to_underlying(NativeHashes::HAS_PICKUP_BEEN_COLLECTED), bool>(pickup); }
    static inline auto HasPlayerCollectedPickup(Player playerIndex, Pickup pikcup) { return NativeInvoke::Invoke<1152, std::to_underlying(NativeHashes::HAS_PLAYER_COLLECTED_PICKUP), bool>(playerIndex, pikcup); }
    static inline auto HasPlayerDamagedAtLeastOnePed(Player playerIndex) { return NativeInvoke::Invoke<1153, std::to_underlying(NativeHashes::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED), bool>(playerIndex); }
    static inline auto HasPlayerDamagedAtLeastOneVehicle(Player playerIndex) { return NativeInvoke::Invoke<1154, std::to_underlying(NativeHashes::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_VEHICLE), bool>(playerIndex); }
    static inline auto HasPlayerRankBeenUpgraded() { return NativeInvoke::Invoke<1155, std::to_underlying(NativeHashes::HAS_PLAYER_RANK_BEEN_UPGRADED), Any>(); }
    static inline auto HasPoolObjectCollidedWithCushion(Object obj) { return NativeInvoke::Invoke<1156, std::to_underlying(NativeHashes::HAS_POOL_OBJECT_COLLIDED_WITH_CUSHION), bool>(obj); }
    static inline auto HasPoolObjectCollidedWithObject(Object obj, Object otherObj) { return NativeInvoke::Invoke<1157, std::to_underlying(NativeHashes::HAS_POOL_OBJECT_COLLIDED_WITH_OBJECT), bool>(obj, otherObj); }
    static inline auto HasReloadedWithMotionControl(Any a1, Any a2) { return NativeInvoke::Invoke<1158, std::to_underlying(NativeHashes::HAS_RELOADED_WITH_MOTION_CONTROL), bool>(a1, a2); }
    static inline auto HasResprayHappened() { return NativeInvoke::Invoke<1159, std::to_underlying(NativeHashes::HAS_RESPRAY_HAPPENED), bool>(); }
    static inline auto HasScriptLoaded(char* scriptName) { return NativeInvoke::Invoke<1160, std::to_underlying(NativeHashes::HAS_SCRIPT_LOADED), bool>(scriptName); }
    static inline auto HasSoundFinished(uint32_t sound) { return NativeInvoke::Invoke<1161, std::to_underlying(NativeHashes::HAS_SOUND_FINISHED), bool>(sound); }
    static inline auto HasStreamedTxdLoaded(char* txdName) { return NativeInvoke::Invoke<1162, std::to_underlying(NativeHashes::HAS_STREAMED_TXD_LOADED), bool>(txdName); }
    static inline auto HasThisAdditionalTextLoaded(char* textName, uint32_t textIndex) { return NativeInvoke::Invoke<1163, std::to_underlying(NativeHashes::HAS_THIS_ADDITIONAL_TEXT_LOADED), bool>(textName, textIndex); }
    static inline auto HaveAnimsLoaded(char* animName) { return NativeInvoke::Invoke<1164, std::to_underlying(NativeHashes::HAVE_ANIMS_LOADED), bool>(animName); }
    static inline auto HaveRequestedPathNodesBeenLoaded(uint32_t requestId) { return NativeInvoke::Invoke<1165, std::to_underlying(NativeHashes::HAVE_REQUESTED_PATH_NODES_BEEN_LOADED), bool>(requestId); }
    static inline auto HeliAudioShouldSkipStartup(Vehicle heli, bool skip) { return NativeInvoke::Invoke<1166, std::to_underlying(NativeHashes::HELI_AUDIO_SHOULD_SKIP_STARTUP), void>(heli, skip); }
    static inline auto HideCharWeaponForScriptedCutscene(Ped ped, bool hide) { return NativeInvoke::Invoke<1167, std::to_underlying(NativeHashes::HIDE_CHAR_WEAPON_FOR_SCRIPTED_CUTSCENE), void>(ped, hide); }
    static inline auto HideHelpTextThisFrame() { return NativeInvoke::Invoke<1168, std::to_underlying(NativeHashes::HIDE_HELP_TEXT_THIS_FRAME), void>(); }
    static inline auto HideHudAndRadarThisFrame() { return NativeInvoke::Invoke<1169, std::to_underlying(NativeHashes::HIDE_HUD_AND_RADAR_THIS_FRAME), void>(); }
    static inline auto HighFallScream(Ped ped) { return NativeInvoke::Invoke<1170, std::to_underlying(NativeHashes::HIGH_FALL_SCREAM), void>(ped); }
    static inline auto HighlightMenuItem(int32_t menuid, int32_t item, bool highlight) { return NativeInvoke::Invoke<1171, std::to_underlying(NativeHashes::HIGHLIGHT_MENU_ITEM), void>(menuid, item, highlight); }
    static inline auto HintCam(float x, float y, float z, int a4, int a5, int a6, int a7) { return NativeInvoke::Invoke<1172, std::to_underlying(NativeHashes::HINT_CAM), void>(x, y, z, a4, a5, a6, a7); }
    static inline auto HowLongHasNetworkPlayerBeenDeadFor(Any a1) { return NativeInvoke::Invoke<1173, std::to_underlying(NativeHashes::HOW_LONG_HAS_NETWORK_PLAYER_BEEN_DEAD_FOR), Any>(a1); }
    static inline auto IsAussieVersion() { return NativeInvoke::Invoke<1174, std::to_underlying(NativeHashes::IS_AUSSIE_VERSION), bool>(); }
    static inline auto IsGermanVersion() { return NativeInvoke::Invoke<1175, std::to_underlying(NativeHashes::IS_GERMAN_VERSION), bool>(); }
    static inline auto ImproveLowPerformanceMissionPerFrameFlag() { return NativeInvoke::Invoke<1176, std::to_underlying(NativeHashes::IMPROVE_LOW_PERFORMANCE_MISSION_PER_FRAME_FLAG), void>(); }
    static inline auto IncreasePlayerMaxArmour(int32_t player, float armour) { return NativeInvoke::Invoke<1177, std::to_underlying(NativeHashes::INCREASE_PLAYER_MAX_ARMOUR), void>(player, armour); }
    static inline auto IncreasePlayerMaxHealth(int32_t player, int32_t maxhealth) { return NativeInvoke::Invoke<1178, std::to_underlying(NativeHashes::INCREASE_PLAYER_MAX_HEALTH), void>(player, maxhealth); }
    static inline auto IncrementFloatStat(int32_t stat, float val) { return NativeInvoke::Invoke<1179, std::to_underlying(NativeHashes::INCREMENT_FLOAT_STAT), void>(stat, val); }
    static inline auto IncrementFloatStatNoMessage(uint32_t stat, float value) { return NativeInvoke::Invoke<1180, std::to_underlying(NativeHashes::INCREMENT_FLOAT_STAT_NO_MESSAGE), void>(stat, value); }
    static inline auto IncrementIntStat(uint32_t stat, uint32_t value) { return NativeInvoke::Invoke<1181, std::to_underlying(NativeHashes::INCREMENT_INT_STAT), void>(stat, value); }
    static inline auto IncrementIntStatNoMessage(uint32_t stat, uint32_t value) { return NativeInvoke::Invoke<1182, std::to_underlying(NativeHashes::INCREMENT_INT_STAT_NO_MESSAGE), void>(stat, value); }
    static inline auto InitCutscene(char* name) { return NativeInvoke::Invoke<1183, std::to_underlying(NativeHashes::INIT_CUTSCENE), void>(name); }
    static inline auto InitDebugWidgets() { return NativeInvoke::Invoke<1184, std::to_underlying(NativeHashes::INIT_DEBUG_WIDGETS), void>(); }
    static inline auto InitFrontendHelperText() { return NativeInvoke::Invoke<1185, std::to_underlying(NativeHashes::INIT_FRONTEND_HELPER_TEXT), void>(); }
    static inline auto Is2playerGameGoingOn() { return NativeInvoke::Invoke<1186, std::to_underlying(NativeHashes::IS_2PLAYER_GAME_GOING_ON), Any>(); }
    static inline auto IsAmbientSpeechDisabled(Ped ped) { return NativeInvoke::Invoke<1187, std::to_underlying(NativeHashes::IS_AMBIENT_SPEECH_DISABLED), bool>(ped); }
    static inline auto IsAmbientSpeechPlaying(Ped ped) { return NativeInvoke::Invoke<1188, std::to_underlying(NativeHashes::IS_AMBIENT_SPEECH_PLAYING), bool>(ped); }
    static inline auto IsAnyCharShootingInArea(float x0, float y0, float z0, float x1, float y1, float z1, bool flag) { return NativeInvoke::Invoke<1189, std::to_underlying(NativeHashes::IS_ANY_CHAR_SHOOTING_IN_AREA), bool>(x0, y0, z0, x1, y1, z1, flag); }
    static inline auto IsAnyPickupAtCoords(float x, float y, float z) { return NativeInvoke::Invoke<1190, std::to_underlying(NativeHashes::IS_ANY_PICKUP_AT_COORDS), bool>(x, y, z); }
    static inline auto IsAnySpeechPlaying(Ped ped) { return NativeInvoke::Invoke<1191, std::to_underlying(NativeHashes::IS_ANY_SPEECH_PLAYING), bool>(ped); }
    static inline auto IsAreaOccupied(float x1, float y1, float z1, float x2, float y2, float z2, bool unknownFalse1, bool unknownTrue, bool unknownFalse2, bool unknownFalse3, bool unknownFalse4) { return NativeInvoke::Invoke<1192, std::to_underlying(NativeHashes::IS_AREA_OCCUPIED), bool>(x1, y1, z1, x2, y2, z2, unknownFalse1, unknownTrue, unknownFalse2, unknownFalse3, unknownFalse4); }
    static inline auto IsAttachedPlayerHeadingAchieved() { return NativeInvoke::Invoke<1193, std::to_underlying(NativeHashes::IS_ATTACHED_PLAYER_HEADING_ACHIEVED), Any>(); }
    static inline auto IsAutoAimingOn() { return NativeInvoke::Invoke<1194, std::to_underlying(NativeHashes::IS_AUTO_AIMING_ON), bool>(); }
    static inline auto IsAutoSaveInProgress() { return NativeInvoke::Invoke<1195, std::to_underlying(NativeHashes::IS_AUTO_SAVE_IN_PROGRESS), bool>(); }
    static inline auto IsBigVehicle(Vehicle vehicle) { return NativeInvoke::Invoke<1196, std::to_underlying(NativeHashes::IS_BIG_VEHICLE), bool>(vehicle); }
    static inline auto IsBitSet(int32_t val, int32_t bitnum) { return NativeInvoke::Invoke<1197, std::to_underlying(NativeHashes::IS_BIT_SET), bool>(val, bitnum); }
    static inline auto IsBlipShortRange(Blip blip) { return NativeInvoke::Invoke<1198, std::to_underlying(NativeHashes::IS_BLIP_SHORT_RANGE), bool>(blip); }
    static inline auto IsBulletInArea(float x, float y, float z, float radius, bool unknownTrue) { return NativeInvoke::Invoke<1199, std::to_underlying(NativeHashes::IS_BULLET_IN_AREA), bool>(x, y, z, radius, unknownTrue); }
    static inline auto IsBulletInBox(float x1, float y1, float z1, float x2, float y2, float z2, bool unknown) { return NativeInvoke::Invoke<1200, std::to_underlying(NativeHashes::IS_BULLET_IN_BOX), bool>(x1, y1, z1, x2, y2, z2, unknown); }
    static inline auto IsButtonJustPressed(uint32_t padIndex, uint32_t button) { return NativeInvoke::Invoke<1201, std::to_underlying(NativeHashes::IS_BUTTON_JUST_PRESSED), bool>(padIndex, button); }
    static inline auto IsButtonPressed(uint32_t padIndex, uint32_t button) { return NativeInvoke::Invoke<1202, std::to_underlying(NativeHashes::IS_BUTTON_PRESSED), bool>(padIndex, button); }
    static inline auto IsCamActive(Camera camera) { return NativeInvoke::Invoke<1203, std::to_underlying(NativeHashes::IS_CAM_ACTIVE), bool>(camera); }
    static inline auto IsCamColliding() { return NativeInvoke::Invoke<1204, std::to_underlying(NativeHashes::IS_CAM_COLLIDING), Any>(); }
    static inline auto IsCamHappy(int32_t cam) { return NativeInvoke::Invoke<1205, std::to_underlying(NativeHashes::IS_CAM_HAPPY), bool>(cam); }
    static inline auto IsCamInterpolating() { return NativeInvoke::Invoke<1206, std::to_underlying(NativeHashes::IS_CAM_INTERPOLATING), bool>(); }
    static inline auto IsCamPropagating(Camera camera) { return NativeInvoke::Invoke<1207, std::to_underlying(NativeHashes::IS_CAM_PROPAGATING), bool>(camera); }
    static inline auto IsCamSequenceComplete(int a1) { return NativeInvoke::Invoke<1208, std::to_underlying(NativeHashes::IS_CAM_SEQUENCE_COMPLETE), bool>(a1); }
    static inline auto IsCamShaking() { return NativeInvoke::Invoke<1209, std::to_underlying(NativeHashes::IS_CAM_SHAKING), bool>(); }
    static inline auto IsCarAMissionCar(Vehicle vehicle) { return NativeInvoke::Invoke<1210, std::to_underlying(NativeHashes::IS_CAR_A_MISSION_CAR), bool>(vehicle); }
    static inline auto IsCarAttached(Vehicle vehicle) { return NativeInvoke::Invoke<1211, std::to_underlying(NativeHashes::IS_CAR_ATTACHED), bool>(vehicle); }
    static inline auto IsCarDead(Vehicle vehicle) { return NativeInvoke::Invoke<1212, std::to_underlying(NativeHashes::IS_CAR_DEAD), bool>(vehicle); }
    static inline auto IsCarDoorDamaged(Vehicle vehicle, uint32_t door) { return NativeInvoke::Invoke<1213, std::to_underlying(NativeHashes::IS_CAR_DOOR_DAMAGED), bool>(vehicle, door); }
    static inline auto IsCarDoorFullyOpen(Vehicle vehicle, uint32_t door) { return NativeInvoke::Invoke<1214, std::to_underlying(NativeHashes::IS_CAR_DOOR_FULLY_OPEN), bool>(vehicle, door); }
    static inline auto IsCarHealthGreater(Car car, float health) { return NativeInvoke::Invoke<1215, std::to_underlying(NativeHashes::IS_CAR_HEALTH_GREATER), bool>(car, health); }
    static inline auto IsCarInAirProper(Vehicle vehicle) { return NativeInvoke::Invoke<1216, std::to_underlying(NativeHashes::IS_CAR_IN_AIR_PROPER), bool>(vehicle); }
    static inline auto IsCarInAngledArea2d() { return NativeInvoke::Invoke<1217, std::to_underlying(NativeHashes::IS_CAR_IN_ANGLED_AREA_2D), Any>(); }
    static inline auto IsCarInAngledArea3d() { return NativeInvoke::Invoke<1218, std::to_underlying(NativeHashes::IS_CAR_IN_ANGLED_AREA_3D), Any>(); }
    static inline auto IsCarInArea2d(Vehicle vehicle, float x1, float y1, float x2, float y2, bool unknownFalse) { return NativeInvoke::Invoke<1219, std::to_underlying(NativeHashes::IS_CAR_IN_AREA_2D), bool>(vehicle, x1, y1, x2, y2, unknownFalse); }
    static inline auto IsCarInArea3d(Vehicle vehicle, float x1, float y1, float z1, float x2, float y2, float z2, uint32_t unknownFalse) { return NativeInvoke::Invoke<1220, std::to_underlying(NativeHashes::IS_CAR_IN_AREA_3D), bool>(vehicle, x1, y1, z1, x2, y2, z2, unknownFalse); }
    static inline auto IsCarInGarageArea(char* garageName, Vehicle vehicle) { return NativeInvoke::Invoke<1221, std::to_underlying(NativeHashes::IS_CAR_IN_GARAGE_AREA), bool>(garageName, vehicle); }
    static inline auto IsCarInWater(Vehicle vehicle) { return NativeInvoke::Invoke<1222, std::to_underlying(NativeHashes::IS_CAR_IN_WATER), bool>(vehicle); }
    static inline auto IsCarLowRider(Car car) { return NativeInvoke::Invoke<1223, std::to_underlying(NativeHashes::IS_CAR_LOW_RIDER), bool>(car); }
    static inline auto IsCarModel(Vehicle vehicle, uint32_t model) { return NativeInvoke::Invoke<1224, std::to_underlying(NativeHashes::IS_CAR_MODEL), bool>(vehicle, model); }
    static inline auto IsCarOnFire(Vehicle vehicle) { return NativeInvoke::Invoke<1225, std::to_underlying(NativeHashes::IS_CAR_ON_FIRE), bool>(vehicle); }
    static inline auto IsCarOnScreen(Vehicle vehicle) { return NativeInvoke::Invoke<1226, std::to_underlying(NativeHashes::IS_CAR_ON_SCREEN), bool>(vehicle); }
    static inline auto IsCarPassengerSeatFree(Vehicle vehicle, uint32_t seatIndex) { return NativeInvoke::Invoke<1227, std::to_underlying(NativeHashes::IS_CAR_PASSENGER_SEAT_FREE), bool>(vehicle, seatIndex); }
    static inline auto IsCarPlayingAnim(Car car, char* animname0, char* animname1) { return NativeInvoke::Invoke<1228, std::to_underlying(NativeHashes::IS_CAR_PLAYING_ANIM), bool>(car, animname0, animname1); }
    static inline auto IsCarSirenOn(Vehicle vehicle) { return NativeInvoke::Invoke<1229, std::to_underlying(NativeHashes::IS_CAR_SIREN_ON), bool>(vehicle); }
    static inline auto IsCarStopped(Vehicle vehicle) { return NativeInvoke::Invoke<1230, std::to_underlying(NativeHashes::IS_CAR_STOPPED), bool>(vehicle); }
    static inline auto IsCarStoppedAtTrafficLights(Vehicle vehicle) { return NativeInvoke::Invoke<1231, std::to_underlying(NativeHashes::IS_CAR_STOPPED_AT_TRAFFIC_LIGHTS), bool>(vehicle); }
    static inline auto IsCarStoppedInArea2d() { return NativeInvoke::Invoke<1232, std::to_underlying(NativeHashes::IS_CAR_STOPPED_IN_AREA_2D), Any>(); }
    static inline auto IsCarStreetRacer(Car car) { return NativeInvoke::Invoke<1233, std::to_underlying(NativeHashes::IS_CAR_STREET_RACER), bool>(car); }
    static inline auto IsCarStuck(Car car) { return NativeInvoke::Invoke<1234, std::to_underlying(NativeHashes::IS_CAR_STUCK), bool>(car); }
    static inline auto IsCarStuckOnRoof(Vehicle vehicle) { return NativeInvoke::Invoke<1235, std::to_underlying(NativeHashes::IS_CAR_STUCK_ON_ROOF), bool>(vehicle); }
    static inline auto IsCarTouchingCar(Vehicle vehicle, Vehicle otherCar) { return NativeInvoke::Invoke<1236, std::to_underlying(NativeHashes::IS_CAR_TOUCHING_CAR), bool>(vehicle, otherCar); }
    static inline auto IsCarTyreBurst(Vehicle vehicle, uint32_t tyre) { return NativeInvoke::Invoke<1237, std::to_underlying(NativeHashes::IS_CAR_TYRE_BURST), bool>(vehicle, tyre); }
    static inline auto IsCarUpright(Vehicle vehicle) { return NativeInvoke::Invoke<1238, std::to_underlying(NativeHashes::IS_CAR_UPRIGHT), bool>(vehicle); }
    static inline auto IsCarUpsidedown(Vehicle vehicle) { return NativeInvoke::Invoke<1239, std::to_underlying(NativeHashes::IS_CAR_UPSIDEDOWN), bool>(vehicle); }
    static inline auto IsCarWaitingForWorldCollision(Vehicle vehicle) { return NativeInvoke::Invoke<1240, std::to_underlying(NativeHashes::IS_CAR_WAITING_FOR_WORLD_COLLISION), bool>(vehicle); }
    static inline auto IsCharArmed(Ped ped, uint32_t slot) { return NativeInvoke::Invoke<1241, std::to_underlying(NativeHashes::IS_CHAR_ARMED), bool>(ped, slot); }
    static inline auto IsCharDead(Ped ped) { return NativeInvoke::Invoke<1242, std::to_underlying(NativeHashes::IS_CHAR_DEAD), bool>(ped); }
    static inline auto IsCharDucking(Ped ped) { return NativeInvoke::Invoke<1243, std::to_underlying(NativeHashes::IS_CHAR_DUCKING), bool>(ped); }
    static inline auto IsCharFacingChar(Ped ped, Ped otherChar, float angle) { return NativeInvoke::Invoke<1244, std::to_underlying(NativeHashes::IS_CHAR_FACING_CHAR), bool>(ped, otherChar, angle); }
    static inline auto IsCharFatallyInjured(Ped ped) { return NativeInvoke::Invoke<1245, std::to_underlying(NativeHashes::IS_CHAR_FATALLY_INJURED), bool>(ped); }
    static inline auto IsCharGesturing(Ped ped) { return NativeInvoke::Invoke<1246, std::to_underlying(NativeHashes::IS_CHAR_GESTURING), bool>(ped); }
    static inline auto IsCharGettingInToACar(Ped ped) { return NativeInvoke::Invoke<1247, std::to_underlying(NativeHashes::IS_CHAR_GETTING_IN_TO_A_CAR), bool>(ped); }
    static inline auto IsCharGettingUp(Ped ped) { return NativeInvoke::Invoke<1248, std::to_underlying(NativeHashes::IS_CHAR_GETTING_UP), bool>(ped); }
    static inline auto IsCharHealthGreater(Ped ped, uint32_t health) { return NativeInvoke::Invoke<1249, std::to_underlying(NativeHashes::IS_CHAR_HEALTH_GREATER), bool>(ped, health); }
    static inline auto IsCharInAir(Ped ped) { return NativeInvoke::Invoke<1250, std::to_underlying(NativeHashes::IS_CHAR_IN_AIR), bool>(ped); }
    static inline auto IsCharInAngledArea2d(Ped ped, float x1, float y1, float x2, float y2, float unknown, bool unknownFalse) { return NativeInvoke::Invoke<1251, std::to_underlying(NativeHashes::IS_CHAR_IN_ANGLED_AREA_2D), bool>(ped, x1, y1, x2, y2, unknown, unknownFalse); }
    static inline auto IsCharInAngledArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float unknown, bool unknownFalse) { return NativeInvoke::Invoke<1252, std::to_underlying(NativeHashes::IS_CHAR_IN_ANGLED_AREA_3D), bool>(ped, x1, y1, z1, x2, y2, z2, unknown, unknownFalse); }
    static inline auto IsCharInAnyBoat(Ped ped) { return NativeInvoke::Invoke<1253, std::to_underlying(NativeHashes::IS_CHAR_IN_ANY_BOAT), bool>(ped); }
    static inline auto IsCharInAnyCar(Ped ped) { return NativeInvoke::Invoke<1254, std::to_underlying(NativeHashes::IS_CHAR_IN_ANY_CAR), bool>(ped); }
    static inline auto IsCharInAnyHeli(Ped ped) { return NativeInvoke::Invoke<1255, std::to_underlying(NativeHashes::IS_CHAR_IN_ANY_HELI), bool>(ped); }
    static inline auto IsCharInAnyPlane(Ped ped) { return NativeInvoke::Invoke<1256, std::to_underlying(NativeHashes::IS_CHAR_IN_ANY_PLANE), bool>(ped); }
    static inline auto IsCharInAnyPoliceVehicle(Ped ped) { return NativeInvoke::Invoke<1257, std::to_underlying(NativeHashes::IS_CHAR_IN_ANY_POLICE_VEHICLE), bool>(ped); }
    static inline auto IsCharInAnyTrain(Ped ped) { return NativeInvoke::Invoke<1258, std::to_underlying(NativeHashes::IS_CHAR_IN_ANY_TRAIN), bool>(ped); }
    static inline auto IsCharInArea2d(Ped ped, float x1, float y1, float x2, float y2, bool unknownFalse) { return NativeInvoke::Invoke<1259, std::to_underlying(NativeHashes::IS_CHAR_IN_AREA_2D), bool>(ped, x1, y1, x2, y2, unknownFalse); }
    static inline auto IsCharInArea3d(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, bool unknownFalse) { return NativeInvoke::Invoke<1260, std::to_underlying(NativeHashes::IS_CHAR_IN_AREA_3D), bool>(ped, x1, y1, z1, x2, y2, z2, unknownFalse); }
    static inline auto IsCharInAreaOnFoot2d(Ped ped, float x1, float y1, float x2, float y2, bool unknownFalse) { return NativeInvoke::Invoke<1261, std::to_underlying(NativeHashes::IS_CHAR_IN_AREA_ON_FOOT_2D), bool>(ped, x1, y1, x2, y2, unknownFalse); }
    static inline auto IsCharInCar(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<1262, std::to_underlying(NativeHashes::IS_CHAR_IN_CAR), bool>(ped, vehicle); }
    static inline auto IsCharInFlyingVehicle(Ped ped) { return NativeInvoke::Invoke<1263, std::to_underlying(NativeHashes::IS_CHAR_IN_FLYING_VEHICLE), bool>(ped); }
    static inline auto IsCharInMeleeCombat(Ped ped) { return NativeInvoke::Invoke<1264, std::to_underlying(NativeHashes::IS_CHAR_IN_MELEE_COMBAT), bool>(ped); }
    static inline auto IsCharInModel(Ped ped, uint32_t model) { return NativeInvoke::Invoke<1265, std::to_underlying(NativeHashes::IS_CHAR_IN_MODEL), bool>(ped, model); }
    static inline auto IsCharInTaxi(Ped ped) { return NativeInvoke::Invoke<1266, std::to_underlying(NativeHashes::IS_CHAR_IN_TAXI), bool>(ped); }
    static inline auto IsCharInWater(Ped ped) { return NativeInvoke::Invoke<1267, std::to_underlying(NativeHashes::IS_CHAR_IN_WATER), bool>(ped); }
    static inline auto IsCharInZone(Ped ped, char* zonename) { return NativeInvoke::Invoke<1268, std::to_underlying(NativeHashes::IS_CHAR_IN_ZONE), bool>(ped, zonename); }
    static inline auto IsCharInjured(Ped ped) { return NativeInvoke::Invoke<1269, std::to_underlying(NativeHashes::IS_CHAR_INJURED), bool>(ped); }
    static inline auto IsCharMale(Ped ped) { return NativeInvoke::Invoke<1270, std::to_underlying(NativeHashes::IS_CHAR_MALE), bool>(ped); }
    static inline auto IsCharModel(Ped ped, uint32_t model) { return NativeInvoke::Invoke<1271, std::to_underlying(NativeHashes::IS_CHAR_MODEL), bool>(ped, model); }
    static inline auto IsCharOnAnyBike(Ped ped) { return NativeInvoke::Invoke<1272, std::to_underlying(NativeHashes::IS_CHAR_ON_ANY_BIKE), bool>(ped); }
    static inline auto IsCharOnFire(Ped ped) { return NativeInvoke::Invoke<1273, std::to_underlying(NativeHashes::IS_CHAR_ON_FIRE), bool>(ped); }
    static inline auto IsCharOnFoot(Ped ped) { return NativeInvoke::Invoke<1274, std::to_underlying(NativeHashes::IS_CHAR_ON_FOOT), bool>(ped); }
    static inline auto IsCharOnPlayerMachine() { return NativeInvoke::Invoke<1275, std::to_underlying(NativeHashes::IS_CHAR_ON_PLAYER_MACHINE), Any>(); }
    static inline auto IsCharOnScreen(Ped ped) { return NativeInvoke::Invoke<1276, std::to_underlying(NativeHashes::IS_CHAR_ON_SCREEN), bool>(ped); }
    static inline auto IsCharPlayingAnim(Ped ped, char* animSet, char* animName) { return NativeInvoke::Invoke<1277, std::to_underlying(NativeHashes::IS_CHAR_PLAYING_ANIM), bool>(ped, animSet, animName); }
    static inline auto IsCharRespondingToAnyEvent(Ped ped) { return NativeInvoke::Invoke<1278, std::to_underlying(NativeHashes::IS_CHAR_RESPONDING_TO_ANY_EVENT), bool>(ped); }
    static inline auto IsCharRespondingToEvent(Ped ped, int32_t eventid) { return NativeInvoke::Invoke<1279, std::to_underlying(NativeHashes::IS_CHAR_RESPONDING_TO_EVENT), bool>(ped, eventid); }
    static inline auto IsCharShooting(Ped ped) { return NativeInvoke::Invoke<1280, std::to_underlying(NativeHashes::IS_CHAR_SHOOTING), bool>(ped); }
    static inline auto IsCharShootingInArea(Ped ped, float x1, float y1, float x2, float y2, bool unknownFalse) { return NativeInvoke::Invoke<1281, std::to_underlying(NativeHashes::IS_CHAR_SHOOTING_IN_AREA), bool>(ped, x1, y1, x2, y2, unknownFalse); }
    static inline auto IsCharSittingIdle(Ped ped) { return NativeInvoke::Invoke<1282, std::to_underlying(NativeHashes::IS_CHAR_SITTING_IDLE), bool>(ped); }
    static inline auto IsCharSittingInAnyCar(Ped ped) { return NativeInvoke::Invoke<1283, std::to_underlying(NativeHashes::IS_CHAR_SITTING_IN_ANY_CAR), bool>(ped); }
    static inline auto IsCharSittingInCar(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<1284, std::to_underlying(NativeHashes::IS_CHAR_SITTING_IN_CAR), bool>(ped, vehicle); }
    static inline auto IsCharStopped(Ped ped) { return NativeInvoke::Invoke<1285, std::to_underlying(NativeHashes::IS_CHAR_STOPPED), bool>(ped); }
    static inline auto IsCharStuckUnderCar(Ped ped) { return NativeInvoke::Invoke<1286, std::to_underlying(NativeHashes::IS_CHAR_STUCK_UNDER_CAR), bool>(ped); }
    static inline auto IsCharSwimming(Ped ped) { return NativeInvoke::Invoke<1287, std::to_underlying(NativeHashes::IS_CHAR_SWIMMING), bool>(ped); }
    static inline auto IsCharTouchingChar(Ped ped, Ped otherChar) { return NativeInvoke::Invoke<1288, std::to_underlying(NativeHashes::IS_CHAR_TOUCHING_CHAR), bool>(ped, otherChar); }
    static inline auto IsCharTouchingObject(Ped ped, Object obj) { return NativeInvoke::Invoke<1289, std::to_underlying(NativeHashes::IS_CHAR_TOUCHING_OBJECT), bool>(ped, obj); }
    static inline auto IsCharTouchingObjectOnFoot(Ped ped, Object obj) { return NativeInvoke::Invoke<1290, std::to_underlying(NativeHashes::IS_CHAR_TOUCHING_OBJECT_ON_FOOT), bool>(ped, obj); }
    static inline auto IsCharTouchingVehicle(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<1291, std::to_underlying(NativeHashes::IS_CHAR_TOUCHING_VEHICLE), bool>(ped, vehicle); }
    static inline auto IsCharTryingToEnterALockedCar(Ped ped) { return NativeInvoke::Invoke<1292, std::to_underlying(NativeHashes::IS_CHAR_TRYING_TO_ENTER_A_LOCKED_CAR), bool>(ped); }
    static inline auto IsCharUsingAnyScenario(Ped ped) { return NativeInvoke::Invoke<1293, std::to_underlying(NativeHashes::IS_CHAR_USING_ANY_SCENARIO), bool>(ped); }
    static inline auto IsCharUsingMapAttractor(Ped ped) { return NativeInvoke::Invoke<1294, std::to_underlying(NativeHashes::IS_CHAR_USING_MAP_ATTRACTOR), bool>(ped); }
    static inline auto IsCharUsingScenario(Ped ped, char* scenarioName) { return NativeInvoke::Invoke<1295, std::to_underlying(NativeHashes::IS_CHAR_USING_SCENARIO), bool>(ped, scenarioName); }
    static inline auto IsCharVisible(Ped ped) { return NativeInvoke::Invoke<1296, std::to_underlying(NativeHashes::IS_CHAR_VISIBLE), bool>(ped); }
    static inline auto IsCharWaitingForWorldCollision(Ped ped) { return NativeInvoke::Invoke<1297, std::to_underlying(NativeHashes::IS_CHAR_WAITING_FOR_WORLD_COLLISION), bool>(ped); }
    static inline auto IsClosestObjectOfTypeSmashedOrDamaged(float x, float y, float z, float radius, uint32_t type_or_model, bool flag0, bool flag1) { return NativeInvoke::Invoke<1298, std::to_underlying(NativeHashes::IS_CLOSEST_OBJECT_OF_TYPE_SMASHED_OR_DAMAGED), bool>(x, y, z, radius, type_or_model, flag0, flag1); }
    static inline auto IsControlJustPressed(int padIndex, int32_t control) { return NativeInvoke::Invoke<1299, std::to_underlying(NativeHashes::IS_CONTROL_JUST_PRESSED), bool>(padIndex, control); }
    static inline auto IsControlPressed(int padIndex, int32_t control) { return NativeInvoke::Invoke<1300, std::to_underlying(NativeHashes::IS_CONTROL_PRESSED), bool>(padIndex, control); }
    static inline auto IsCopPedInArea3dNoSave(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1301, std::to_underlying(NativeHashes::IS_COP_PED_IN_AREA_3D_NO_SAVE), bool>(x0, y0, z0, x1, y1, z1); }
    static inline auto IsCopVehicleInArea3dNoSave(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1302, std::to_underlying(NativeHashes::IS_COP_VEHICLE_IN_AREA_3D_NO_SAVE), bool>(x0, y0, z0, x1, y1, z1); }
    static inline auto IsDamageTrackerActiveOnNetworkId(Any a1) { return NativeInvoke::Invoke<1303, std::to_underlying(NativeHashes::IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID), Any>(a1); }
    static inline auto IsDebugCameraOn() { return NativeInvoke::Invoke<1304, std::to_underlying(NativeHashes::IS_DEBUG_CAMERA_ON), bool>(); }
    static inline auto IsEmergencyServicesVehicle(Vehicle veh) { return NativeInvoke::Invoke<1305, std::to_underlying(NativeHashes::IS_EMERGENCY_SERVICES_VEHICLE), bool>(veh); }
    static inline auto IsEpisodeAvailable(int32_t episode) { return NativeInvoke::Invoke<1306, std::to_underlying(NativeHashes::IS_EPISODE_AVAILABLE), bool>(episode); }
    static inline auto IsEpisodicDiscBuild() { return NativeInvoke::Invoke<1307, std::to_underlying(NativeHashes::IS_EPISODIC_DISC_BUILD), bool>(); }
    static inline auto IsExplosionInArea(int32_t expnum, float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1308, std::to_underlying(NativeHashes::IS_EXPLOSION_IN_AREA), bool>(expnum, x0, y0, z0, x1, y1, z1); }
    static inline auto IsExplosionInSphere(int32_t expnum, float x, float y, float z, float radius) { return NativeInvoke::Invoke<1309, std::to_underlying(NativeHashes::IS_EXPLOSION_IN_SPHERE), bool>(expnum, x, y, z, radius); }
    static inline auto IsFollowVehicleCamOffsetActive() { return NativeInvoke::Invoke<1310, std::to_underlying(NativeHashes::IS_FOLLOW_VEHICLE_CAM_OFFSET_ACTIVE), bool>(); }
    static inline auto IsFontLoaded(uint32_t font) { return NativeInvoke::Invoke<1311, std::to_underlying(NativeHashes::IS_FONT_LOADED), bool>(font); }
    static inline auto IsFrontendFading() { return NativeInvoke::Invoke<1312, std::to_underlying(NativeHashes::IS_FRONTEND_FADING), bool>(); }
    static inline auto IsGameInControlOfMusic() { return NativeInvoke::Invoke<1313, std::to_underlying(NativeHashes::IS_GAME_IN_CONTROL_OF_MUSIC), bool>(); }
    static inline auto IsGameKeyboardKeyJustPressed(int32_t key) { return NativeInvoke::Invoke<1314, std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_KEY_JUST_PRESSED), bool>(key); }
    static inline auto IsGameKeyboardKeyPressed(int32_t key) { return NativeInvoke::Invoke<1315, std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_KEY_PRESSED), bool>(key); }
    static inline auto IsGameKeyboardNavDownPressed(bool a1) { return NativeInvoke::Invoke<1316, std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_NAV_DOWN_PRESSED), bool>(a1); }
    static inline auto IsGameKeyboardNavLeftPressed(bool a1) { return NativeInvoke::Invoke<1317, std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_NAV_LEFT_PRESSED), bool>(a1); }
    static inline auto IsGameKeyboardNavRightPressed(bool a1) { return NativeInvoke::Invoke<1318, std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_NAV_RIGHT_PRESSED), bool>(a1); }
    static inline auto IsGameKeyboardNavUpPressed(bool a1) { return NativeInvoke::Invoke<1319, std::to_underlying(NativeHashes::IS_GAME_KEYBOARD_NAV_UP_PRESSED), bool>(a1); }
    static inline auto IsGarageClosed(char* garageName) { return NativeInvoke::Invoke<1320, std::to_underlying(NativeHashes::IS_GARAGE_CLOSED), bool>(garageName); }
    static inline auto IsGarageOpen(char* garageName) { return NativeInvoke::Invoke<1321, std::to_underlying(NativeHashes::IS_GARAGE_OPEN), bool>(garageName); }
    static inline auto IsGroupLeader(Ped ped, Group group) { return NativeInvoke::Invoke<1322, std::to_underlying(NativeHashes::IS_GROUP_LEADER), bool>(ped, group); }
    static inline auto IsGroupMember(Ped ped, Group g) { return NativeInvoke::Invoke<1323, std::to_underlying(NativeHashes::IS_GROUP_MEMBER), bool>(ped, g); }
    static inline auto IsHeliPartBroken(Vehicle heli, bool flag0, bool flag1, bool flag2) { return NativeInvoke::Invoke<1324, std::to_underlying(NativeHashes::IS_HELI_PART_BROKEN), bool>(heli, flag0, flag1, flag2); }
    static inline auto IsHelpMessageBeingDisplayed() { return NativeInvoke::Invoke<1325, std::to_underlying(NativeHashes::IS_HELP_MESSAGE_BEING_DISPLAYED), bool>(); }
    static inline auto IsHintRunning() { return NativeInvoke::Invoke<1326, std::to_underlying(NativeHashes::IS_HINT_RUNNING), bool>(); }
    static inline auto IsHudPreferenceSwitchedOn() { return NativeInvoke::Invoke<1327, std::to_underlying(NativeHashes::IS_HUD_PREFERENCE_SWITCHED_ON), bool>(); }
    static inline auto IsHudReticuleComplex() { return NativeInvoke::Invoke<1328, std::to_underlying(NativeHashes::IS_HUD_RETICULE_COMPLEX), bool>(); }
    static inline auto IsInCarFireButtonPressed() { return NativeInvoke::Invoke<1329, std::to_underlying(NativeHashes::IS_IN_CAR_FIRE_BUTTON_PRESSED), bool>(); }
    static inline auto IsInLanMode() { return NativeInvoke::Invoke<1330, std::to_underlying(NativeHashes::IS_IN_LAN_MODE), bool>(); }
    static inline auto IsInMpTutorial() { return NativeInvoke::Invoke<1331, std::to_underlying(NativeHashes::IS_IN_MP_TUTORIAL), Any>(); }
    static inline auto IsInPlayerSettingsMenu() { return NativeInvoke::Invoke<1332, std::to_underlying(NativeHashes::IS_IN_PLAYER_SETTINGS_MENU), bool>(); }
    static inline auto IsInSpectatorMode() { return NativeInvoke::Invoke<1333, std::to_underlying(NativeHashes::IS_IN_SPECTATOR_MODE), bool>(); }
    static inline auto IsInteriorScene() { return NativeInvoke::Invoke<1334, std::to_underlying(NativeHashes::IS_INTERIOR_SCENE), bool>(); }
    static inline auto IsJapaneseVersion() { return NativeInvoke::Invoke<1335, std::to_underlying(NativeHashes::IS_JAPANESE_VERSION), bool>(); }
    static inline auto IsKeyboardKeyJustPressed(int32_t key) { return NativeInvoke::Invoke<1336, std::to_underlying(NativeHashes::IS_KEYBOARD_KEY_JUST_PRESSED), bool>(key); }
    static inline auto IsKeyboardKeyPressed(int32_t key) { return NativeInvoke::Invoke<1337, std::to_underlying(NativeHashes::IS_KEYBOARD_KEY_PRESSED), bool>(key); }
    static inline auto IsLazlowStationLocked() { return NativeInvoke::Invoke<1338, std::to_underlying(NativeHashes::IS_LAZLOW_STATION_LOCKED), bool>(); }
    static inline auto IsLcpdDataValid() { return NativeInvoke::Invoke<1339, std::to_underlying(NativeHashes::IS_LCPD_DATA_VALID), Any>(); }
    static inline auto IsLookInverted() { return NativeInvoke::Invoke<1340, std::to_underlying(NativeHashes::IS_LOOK_INVERTED), bool>(); }
    static inline auto IsMemoryCardInUse() { return NativeInvoke::Invoke<1341, std::to_underlying(NativeHashes::IS_MEMORY_CARD_IN_USE), bool>(); }
    static inline auto IsMessageBeingDisplayed() { return NativeInvoke::Invoke<1342, std::to_underlying(NativeHashes::IS_MESSAGE_BEING_DISPLAYED), bool>(); }
    static inline auto IsMinigameInProgress() { return NativeInvoke::Invoke<1343, std::to_underlying(NativeHashes::IS_MINIGAME_IN_PROGRESS), bool>(); }
    static inline auto IsMissionCompletePlaying() { return NativeInvoke::Invoke<1344, std::to_underlying(NativeHashes::IS_MISSION_COMPLETE_PLAYING), bool>(); }
    static inline auto IsMobilePhoneCallOngoing() { return NativeInvoke::Invoke<1345, std::to_underlying(NativeHashes::IS_MOBILE_PHONE_CALL_ONGOING), bool>(); }
    static inline auto IsMobilePhoneRadioActive() { return NativeInvoke::Invoke<1346, std::to_underlying(NativeHashes::IS_MOBILE_PHONE_RADIO_ACTIVE), bool>(); }
    static inline auto IsModelInCdimage(uint32_t model) { return NativeInvoke::Invoke<1347, std::to_underlying(NativeHashes::IS_MODEL_IN_CDIMAGE), bool>(model); }
    static inline auto IsMoneyPickupAtCoords(float x, float y, float z) { return NativeInvoke::Invoke<1348, std::to_underlying(NativeHashes::IS_MONEY_PICKUP_AT_COORDS), bool>(x, y, z); }
    static inline auto IsMouseButtonJustPressed(int a1) { return NativeInvoke::Invoke<1349, std::to_underlying(NativeHashes::IS_MOUSE_BUTTON_JUST_PRESSED), bool>(a1); }
    static inline auto IsMouseButtonPressed(int a1) { return NativeInvoke::Invoke<1350, std::to_underlying(NativeHashes::IS_MOUSE_BUTTON_PRESSED), bool>(a1); }
    static inline auto IsMouseUsingVerticalInversion() { return NativeInvoke::Invoke<1351, std::to_underlying(NativeHashes::IS_MOUSE_USING_VERTICAL_INVERSION), bool>(); }
    static inline auto IsNetworkConnected() { return NativeInvoke::Invoke<1352, std::to_underlying(NativeHashes::IS_NETWORK_CONNECTED), Any>(); }
    static inline auto IsNetworkGamePending() { return NativeInvoke::Invoke<1353, std::to_underlying(NativeHashes::IS_NETWORK_GAME_PENDING), Any>(); }
    static inline auto IsNetworkGameRunning() { return NativeInvoke::Invoke<1354, std::to_underlying(NativeHashes::IS_NETWORK_GAME_RUNNING), Any>(); }
    static inline auto IsNetworkPlayerActive(Any a1) { return NativeInvoke::Invoke<1355, std::to_underlying(NativeHashes::IS_NETWORK_PLAYER_ACTIVE), Any>(a1); }
    static inline auto IsNetworkPlayerVisible() { return NativeInvoke::Invoke<1356, std::to_underlying(NativeHashes::IS_NETWORK_PLAYER_VISIBLE), Any>(); }
    static inline auto IsNetworkSession() { return NativeInvoke::Invoke<1357, std::to_underlying(NativeHashes::IS_NETWORK_SESSION), Any>(); }
    static inline auto IsNextStationAllowed(Vehicle veh) { return NativeInvoke::Invoke<1358, std::to_underlying(NativeHashes::IS_NEXT_STATION_ALLOWED), bool>(veh); }
    static inline auto IsNonFragObjectSmashed(float x, float y, float z, float radius, uint32_t model) { return NativeInvoke::Invoke<1359, std::to_underlying(NativeHashes::IS_NON_FRAG_OBJECT_SMASHED), bool>(x, y, z, radius, model); }
    static inline auto IsNumlockEnabled() { return NativeInvoke::Invoke<1360, std::to_underlying(NativeHashes::IS_NUMLOCK_ENABLED), bool>(); }
    static inline auto IsObjectAttached(Object obj) { return NativeInvoke::Invoke<1361, std::to_underlying(NativeHashes::IS_OBJECT_ATTACHED), bool>(obj); }
    static inline auto IsObjectInAngledArea2d() { return NativeInvoke::Invoke<1362, std::to_underlying(NativeHashes::IS_OBJECT_IN_ANGLED_AREA_2D), Any>(); }
    static inline auto IsObjectInAngledArea3d(Object obj, float x0, float y0, float z0, float x1, float y1, float z1, float a8, bool flag) { return NativeInvoke::Invoke<1363, std::to_underlying(NativeHashes::IS_OBJECT_IN_ANGLED_AREA_3D), bool>(obj, x0, y0, z0, x1, y1, z1, a8, flag); }
    static inline auto IsObjectInArea2d() { return NativeInvoke::Invoke<1364, std::to_underlying(NativeHashes::IS_OBJECT_IN_AREA_2D), Any>(); }
    static inline auto IsObjectInArea3d(Object obj, float x0, float y0, float z0, float x1, float y1, float z1, bool flag) { return NativeInvoke::Invoke<1365, std::to_underlying(NativeHashes::IS_OBJECT_IN_AREA_3D), bool>(obj, x0, y0, z0, x1, y1, z1, flag); }
    static inline auto IsObjectInWater(Object obj) { return NativeInvoke::Invoke<1366, std::to_underlying(NativeHashes::IS_OBJECT_IN_WATER), bool>(obj); }
    static inline auto IsObjectOnFire(Object obj) { return NativeInvoke::Invoke<1367, std::to_underlying(NativeHashes::IS_OBJECT_ON_FIRE), bool>(obj); }
    static inline auto IsObjectOnPlayerMachine() { return NativeInvoke::Invoke<1368, std::to_underlying(NativeHashes::IS_OBJECT_ON_PLAYER_MACHINE), Any>(); }
    static inline auto IsObjectOnScreen(Object obj) { return NativeInvoke::Invoke<1369, std::to_underlying(NativeHashes::IS_OBJECT_ON_SCREEN), bool>(obj); }
    static inline auto IsObjectPlayingAnim(Object obj, char* animname0, char* animname1) { return NativeInvoke::Invoke<1370, std::to_underlying(NativeHashes::IS_OBJECT_PLAYING_ANIM), bool>(obj, animname0, animname1); }
    static inline auto IsObjectReassignmentInProgress() { return NativeInvoke::Invoke<1371, std::to_underlying(NativeHashes::IS_OBJECT_REASSIGNMENT_IN_PROGRESS), Any>(); }
    static inline auto IsObjectStatic(Object obj) { return NativeInvoke::Invoke<1372, std::to_underlying(NativeHashes::IS_OBJECT_STATIC), bool>(obj); }
    static inline auto IsObjectTouchingObject(Object obj0, Object obj1) { return NativeInvoke::Invoke<1373, std::to_underlying(NativeHashes::IS_OBJECT_TOUCHING_OBJECT), bool>(obj0, obj1); }
    static inline auto IsObjectUpright(Object obj, float angle) { return NativeInvoke::Invoke<1374, std::to_underlying(NativeHashes::IS_OBJECT_UPRIGHT), bool>(obj, angle); }
    static inline auto IsObjectWithinBrainActivationRange(Object obj) { return NativeInvoke::Invoke<1375, std::to_underlying(NativeHashes::IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE), bool>(obj); }
    static inline auto IsOurPlayerHigherPriorityForCarGeneration(Any a1) { return NativeInvoke::Invoke<1376, std::to_underlying(NativeHashes::IS_OUR_PLAYER_HIGHER_PRIORITY_FOR_CAR_GENERATION), Any>(a1); }
    static inline auto IsPainPlaying(Ped ped) { return NativeInvoke::Invoke<1377, std::to_underlying(NativeHashes::IS_PAIN_PLAYING), bool>(ped); }
    static inline auto IsPartyMode() { return NativeInvoke::Invoke<1378, std::to_underlying(NativeHashes::IS_PARTY_MODE), Any>(); }
    static inline auto IsPauseMenuActive() { return NativeInvoke::Invoke<1379, std::to_underlying(NativeHashes::IS_PAUSE_MENU_ACTIVE), bool>(); }
    static inline auto IsPayNSprayActive() { return NativeInvoke::Invoke<1380, std::to_underlying(NativeHashes::IS_PAY_N_SPRAY_ACTIVE), bool>(); }
    static inline auto IsPcUsingJoypad() { return NativeInvoke::Invoke<1381, std::to_underlying(NativeHashes::IS_PC_USING_JOYPAD), bool>(); }
    static inline auto IsPedAMissionPed(Ped ped) { return NativeInvoke::Invoke<1382, std::to_underlying(NativeHashes::IS_PED_A_MISSION_PED), bool>(ped); }
    static inline auto IsPedAttachedToAnyCar(Ped ped) { return NativeInvoke::Invoke<1383, std::to_underlying(NativeHashes::IS_PED_ATTACHED_TO_ANY_CAR), bool>(ped); }
    static inline auto IsPedAttachedToObject(Ped ped, Object obj) { return NativeInvoke::Invoke<1384, std::to_underlying(NativeHashes::IS_PED_ATTACHED_TO_OBJECT), bool>(ped, obj); }
    static inline auto IsPedBeingJacked(Ped ped) { return NativeInvoke::Invoke<1385, std::to_underlying(NativeHashes::IS_PED_BEING_JACKED), bool>(ped); }
    static inline auto IsPedClimbing(Ped ped) { return NativeInvoke::Invoke<1386, std::to_underlying(NativeHashes::IS_PED_CLIMBING), bool>(ped); }
    static inline auto IsPedDoingDriveby(Ped ped) { return NativeInvoke::Invoke<1387, std::to_underlying(NativeHashes::IS_PED_DOING_DRIVEBY), bool>(ped); }
    static inline auto IsPedFleeing(Ped ped) { return NativeInvoke::Invoke<1388, std::to_underlying(NativeHashes::IS_PED_FLEEING), bool>(ped); }
    static inline auto IsPedHoldingAnObject(Ped ped) { return NativeInvoke::Invoke<1389, std::to_underlying(NativeHashes::IS_PED_HOLDING_AN_OBJECT), bool>(ped); }
    static inline auto IsPedInCombat(Ped ped) { return NativeInvoke::Invoke<1390, std::to_underlying(NativeHashes::IS_PED_IN_COMBAT), bool>(ped); }
    static inline auto IsPedInCover(Ped ped) { return NativeInvoke::Invoke<1391, std::to_underlying(NativeHashes::IS_PED_IN_COVER), bool>(ped); }
    static inline auto IsPedInCutsceneBlockingBounds(Ped ped) { return NativeInvoke::Invoke<1392, std::to_underlying(NativeHashes::IS_PED_IN_CUTSCENE_BLOCKING_BOUNDS), bool>(ped); }
    static inline auto IsPedInGroup(Ped ped) { return NativeInvoke::Invoke<1393, std::to_underlying(NativeHashes::IS_PED_IN_GROUP), bool>(ped); }
    static inline auto IsPedJacking(Ped ped) { return NativeInvoke::Invoke<1394, std::to_underlying(NativeHashes::IS_PED_JACKING), bool>(ped); }
    static inline auto IsPedLookingAtCar(Ped ped, Car car) { return NativeInvoke::Invoke<1395, std::to_underlying(NativeHashes::IS_PED_LOOKING_AT_CAR), bool>(ped, car); }
    static inline auto IsPedLookingAtObject(Ped ped, Object obj) { return NativeInvoke::Invoke<1396, std::to_underlying(NativeHashes::IS_PED_LOOKING_AT_OBJECT), bool>(ped, obj); }
    static inline auto IsPedLookingAtPed(Ped ped, Ped otherChar) { return NativeInvoke::Invoke<1397, std::to_underlying(NativeHashes::IS_PED_LOOKING_AT_PED), bool>(ped, otherChar); }
    static inline auto IsPedPinnedDown(Ped ped) { return NativeInvoke::Invoke<1398, std::to_underlying(NativeHashes::IS_PED_PINNED_DOWN), bool>(ped); }
    static inline auto IsPedRagdoll(Ped ped) { return NativeInvoke::Invoke<1399, std::to_underlying(NativeHashes::IS_PED_RAGDOLL), bool>(ped); }
    static inline auto IsPedRetreating(Ped ped) { return NativeInvoke::Invoke<1400, std::to_underlying(NativeHashes::IS_PED_RETREATING), bool>(ped); }
    static inline auto IsPedsVehicleHot(Ped ped) { return NativeInvoke::Invoke<1401, std::to_underlying(NativeHashes::IS_PEDS_VEHICLE_HOT), bool>(ped); }
    static inline auto IsPlaceCarBombActive() { return NativeInvoke::Invoke<1402, std::to_underlying(NativeHashes::IS_PLACE_CAR_BOMB_ACTIVE), bool>(); }
    static inline auto IsPlaybackGoingOnForCar(Car car) { return NativeInvoke::Invoke<1403, std::to_underlying(NativeHashes::IS_PLAYBACK_GOING_ON_FOR_CAR), bool>(car); }
    static inline auto IsPlayerBeingArrested() { return NativeInvoke::Invoke<1404, std::to_underlying(NativeHashes::IS_PLAYER_BEING_ARRESTED), bool>(); }
    static inline auto IsPlayerClimbing(Player playerIndex) { return NativeInvoke::Invoke<1405, std::to_underlying(NativeHashes::IS_PLAYER_CLIMBING), bool>(playerIndex); }
    static inline auto IsPlayerControlOn(Player playerIndex) { return NativeInvoke::Invoke<1406, std::to_underlying(NativeHashes::IS_PLAYER_CONTROL_ON), bool>(playerIndex); }
    static inline auto IsPlayerDead(Player playerIndex) { return NativeInvoke::Invoke<1407, std::to_underlying(NativeHashes::IS_PLAYER_DEAD), bool>(playerIndex); }
    static inline auto IsPlayerFreeAimingAtChar(Player playerIndex, Ped ped) { return NativeInvoke::Invoke<1408, std::to_underlying(NativeHashes::IS_PLAYER_FREE_AIMING_AT_CHAR), bool>(playerIndex, ped); }
    static inline auto IsPlayerFreeForAmbientTask(Player playerIndex) { return NativeInvoke::Invoke<1409, std::to_underlying(NativeHashes::IS_PLAYER_FREE_FOR_AMBIENT_TASK), bool>(playerIndex); }
    static inline auto IsPlayerInInfoZone(int32_t player, int32_t zoneid) { return NativeInvoke::Invoke<1410, std::to_underlying(NativeHashes::IS_PLAYER_IN_INFO_ZONE), bool>(player, zoneid); }
    static inline auto IsPlayerInRemoteMode(int32_t player) { return NativeInvoke::Invoke<1411, std::to_underlying(NativeHashes::IS_PLAYER_IN_REMOTE_MODE), bool>(player); }
    static inline auto IsPlayerInShortcutTaxi() { return NativeInvoke::Invoke<1412, std::to_underlying(NativeHashes::IS_PLAYER_IN_SHORTCUT_TAXI), Any>(); }
    static inline auto IsPlayerOnline() { return NativeInvoke::Invoke<1413, std::to_underlying(NativeHashes::IS_PLAYER_ONLINE), bool>(); }
    static inline auto IsPlayerPerformingStoppie(int32_t player) { return NativeInvoke::Invoke<1414, std::to_underlying(NativeHashes::IS_PLAYER_PERFORMING_STOPPIE), bool>(player); }
    static inline auto IsPlayerPerformingWheelie(int32_t player) { return NativeInvoke::Invoke<1415, std::to_underlying(NativeHashes::IS_PLAYER_PERFORMING_WHEELIE), bool>(player); }
    static inline auto IsPlayerPlaying(Player playerIndex) { return NativeInvoke::Invoke<1416, std::to_underlying(NativeHashes::IS_PLAYER_PLAYING), bool>(playerIndex); }
    static inline auto IsPlayerPressingHorn(Player playerIndex) { return NativeInvoke::Invoke<1417, std::to_underlying(NativeHashes::IS_PLAYER_PRESSING_HORN), bool>(playerIndex); }
    static inline auto IsPlayerReadyForCutscene(int32_t player) { return NativeInvoke::Invoke<1418, std::to_underlying(NativeHashes::IS_PLAYER_READY_FOR_CUTSCENE), bool>(player); }
    static inline auto IsPlayerScriptControlOn(int32_t player) { return NativeInvoke::Invoke<1419, std::to_underlying(NativeHashes::IS_PLAYER_SCRIPT_CONTROL_ON), bool>(player); }
    static inline auto IsPlayerSignedInLocally() { return NativeInvoke::Invoke<1420, std::to_underlying(NativeHashes::IS_PLAYER_SIGNED_IN_LOCALLY), bool>(); }
    static inline auto IsPlayerTargettingAnything(Player playerIndex) { return NativeInvoke::Invoke<1421, std::to_underlying(NativeHashes::IS_PLAYER_TARGETTING_ANYTHING), bool>(playerIndex); }
    static inline auto IsPlayerTargettingChar(Player playerIndex, Ped ped) { return NativeInvoke::Invoke<1422, std::to_underlying(NativeHashes::IS_PLAYER_TARGETTING_CHAR), bool>(playerIndex, ped); }
    static inline auto IsPlayerTargettingObject(Player playerIndex, Object obj) { return NativeInvoke::Invoke<1423, std::to_underlying(NativeHashes::IS_PLAYER_TARGETTING_OBJECT), bool>(playerIndex, obj); }
    static inline auto IsPlayerVehicleEntryDisabled(int32_t player) { return NativeInvoke::Invoke<1424, std::to_underlying(NativeHashes::IS_PLAYER_VEHICLE_ENTRY_DISABLED), bool>(player); }
    static inline auto IsPointObscuredByAMissionEntity(float pX, float pY, float pZ, float sizeX, float sizeY, float sizeZ) { return NativeInvoke::Invoke<1425, std::to_underlying(NativeHashes::IS_POINT_OBSCURED_BY_A_MISSION_ENTITY), bool>(pX, pY, pZ, sizeX, sizeY, sizeZ); }
    static inline auto IsPosInCutsceneBlockingBounds(float x, float y, float z) { return NativeInvoke::Invoke<1426, std::to_underlying(NativeHashes::IS_POS_IN_CUTSCENE_BLOCKING_BOUNDS), bool>(x, y, z); }
    static inline auto IsProjectileInArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1427, std::to_underlying(NativeHashes::IS_PROJECTILE_IN_AREA), bool>(x0, y0, z0, x1, y1, z1); }
    static inline auto IsRadioHudOn() { return NativeInvoke::Invoke<1428, std::to_underlying(NativeHashes::IS_RADIO_HUD_ON), bool>(); }
    static inline auto IsRadioRetuning() { return NativeInvoke::Invoke<1429, std::to_underlying(NativeHashes::IS_RADIO_RETUNING), bool>(); }
    static inline auto IsRelationshipSet(int a1, int a2, int a3) { return NativeInvoke::Invoke<1430, std::to_underlying(NativeHashes::IS_RELATIONSHIP_SET), bool>(a1, a2, a3); }
    static inline auto IsReplaySaving() { return NativeInvoke::Invoke<1431, std::to_underlying(NativeHashes::IS_REPLAY_SAVING), bool>(); }
    static inline auto IsReplaySystemSaving() { return NativeInvoke::Invoke<1432, std::to_underlying(NativeHashes::IS_REPLAY_SYSTEM_SAVING), bool>(); }
    static inline auto IsScoreGreater(Player playerIndex, uint32_t score) { return NativeInvoke::Invoke<1433, std::to_underlying(NativeHashes::IS_SCORE_GREATER), bool>(playerIndex, score); }
    static inline auto IsScreenFadedIn() { return NativeInvoke::Invoke<1434, std::to_underlying(NativeHashes::IS_SCREEN_FADED_IN), bool>(); }
    static inline auto IsScreenFadedOut() { return NativeInvoke::Invoke<1435, std::to_underlying(NativeHashes::IS_SCREEN_FADED_OUT), bool>(); }
    static inline auto IsScreenFading() { return NativeInvoke::Invoke<1436, std::to_underlying(NativeHashes::IS_SCREEN_FADING), bool>(); }
    static inline auto IsScreenFadingIn() { return NativeInvoke::Invoke<1437, std::to_underlying(NativeHashes::IS_SCREEN_FADING_IN), bool>(); }
    static inline auto IsScreenFadingOut() { return NativeInvoke::Invoke<1438, std::to_underlying(NativeHashes::IS_SCREEN_FADING_OUT), bool>(); }
    static inline auto IsScriptFireExtinguished(FireId fire) { return NativeInvoke::Invoke<1439, std::to_underlying(NativeHashes::IS_SCRIPT_FIRE_EXTINGUISHED), bool>(fire); }
    static inline auto IsScriptedConversationOngoing() { return NativeInvoke::Invoke<1440, std::to_underlying(NativeHashes::IS_SCRIPTED_CONVERSATION_ONGOING), bool>(); }
    static inline auto IsScriptedSpeechPlaying(Ped ped) { return NativeInvoke::Invoke<1441, std::to_underlying(NativeHashes::IS_SCRIPTED_SPEECH_PLAYING), bool>(ped); }
    static inline auto IsSittingObjectNear(float x, float y, float z, int a4) { return NativeInvoke::Invoke<1442, std::to_underlying(NativeHashes::IS_SITTING_OBJECT_NEAR), bool>(x, y, z, a4); }
    static inline auto IsSniperBulletInArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1443, std::to_underlying(NativeHashes::IS_SNIPER_BULLET_IN_AREA), Any>(x0, y0, z0, x1, y1, z1); }
    static inline auto IsSniperInverted() { return NativeInvoke::Invoke<1444, std::to_underlying(NativeHashes::IS_SNIPER_INVERTED), bool>(); }
    static inline auto IsSpecificCamInterpolating(int32_t cam) { return NativeInvoke::Invoke<1445, std::to_underlying(NativeHashes::IS_SPECIFIC_CAM_INTERPOLATING), bool>(cam); }
    static inline auto IsSphereVisibleToAnotherMachine(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<1446, std::to_underlying(NativeHashes::IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE), Any>(a1, a2, a3, a4); }
    static inline auto IsStreamingAdditionalText(uint32_t textIndex) { return NativeInvoke::Invoke<1447, std::to_underlying(NativeHashes::IS_STREAMING_ADDITIONAL_TEXT), bool>(textIndex); }
    static inline auto IsStreamingPriorityRequests() { return NativeInvoke::Invoke<1448, std::to_underlying(NativeHashes::IS_STREAMING_PRIORITY_REQUESTS), bool>(); }
    static inline auto IsStreamingThisAdditionalText(char* a1, int a2, int a3) { return NativeInvoke::Invoke<1449, std::to_underlying(NativeHashes::IS_STREAMING_THIS_ADDITIONAL_TEXT), bool>(a1, a2, a3); }
    static inline auto IsStringNull(char* str) { return NativeInvoke::Invoke<1450, std::to_underlying(NativeHashes::IS_STRING_NULL), bool>(str); }
    static inline auto IsSystemUiShowing() { return NativeInvoke::Invoke<1451, std::to_underlying(NativeHashes::IS_SYSTEM_UI_SHOWING), bool>(); }
    static inline auto IsThisAMinigameScript() { return NativeInvoke::Invoke<1452, std::to_underlying(NativeHashes::IS_THIS_A_MINIGAME_SCRIPT), bool>(); }
    static inline auto IsThisHelpMessageBeingDisplayed(char* gxtentry) { return NativeInvoke::Invoke<1453, std::to_underlying(NativeHashes::IS_THIS_HELP_MESSAGE_BEING_DISPLAYED), bool>(gxtentry); }
    static inline auto IsThisHelpMessageWithNumberBeingDisplayed(char* gxtentry, int32_t number) { return NativeInvoke::Invoke<1454, std::to_underlying(NativeHashes::IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED), bool>(gxtentry, number); }
    static inline auto IsThisHelpMessageWithStringBeingDisplayed(char* gxtentry, char* str) { return NativeInvoke::Invoke<1455, std::to_underlying(NativeHashes::IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED), bool>(gxtentry, str); }
    static inline auto IsThisMachineTheServer() { return NativeInvoke::Invoke<1456, std::to_underlying(NativeHashes::IS_THIS_MACHINE_THE_SERVER), Any>(); }
    static inline auto IsThisModelABike(uint32_t model) { return NativeInvoke::Invoke<1457, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_BIKE), bool>(model); }
    static inline auto IsThisModelABoat(uint32_t model) { return NativeInvoke::Invoke<1458, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_BOAT), bool>(model); }
    static inline auto IsThisModelACar(uint32_t model) { return NativeInvoke::Invoke<1459, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_CAR), bool>(model); }
    static inline auto IsThisModelAHeli(uint32_t model) { return NativeInvoke::Invoke<1460, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_HELI), bool>(model); }
    static inline auto IsThisModelAPed(uint32_t model) { return NativeInvoke::Invoke<1461, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_PED), bool>(model); }
    static inline auto IsThisModelAPlane(uint32_t model) { return NativeInvoke::Invoke<1462, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_PLANE), bool>(model); }
    static inline auto IsThisModelATrain(uint32_t model) { return NativeInvoke::Invoke<1463, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_TRAIN), bool>(model); }
    static inline auto IsThisModelAVehicle(uint32_t model) { return NativeInvoke::Invoke<1464, std::to_underlying(NativeHashes::IS_THIS_MODEL_A_VEHICLE), bool>(model); }
    static inline auto IsThisPedAPlayer(Ped ped) { return NativeInvoke::Invoke<1465, std::to_underlying(NativeHashes::IS_THIS_PED_A_PLAYER), bool>(ped); }
    static inline auto IsThisPrintBeingDisplayed(char* gxtentry, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11) { return NativeInvoke::Invoke<1466, std::to_underlying(NativeHashes::IS_THIS_PRINT_BEING_DISPLAYED), Any>(gxtentry, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto IsThreadActive(uint32_t threadId) { return NativeInvoke::Invoke<1467, std::to_underlying(NativeHashes::IS_THREAD_ACTIVE), bool>(threadId); }
    static inline auto IsUsingController() { return NativeInvoke::Invoke<1468, std::to_underlying(NativeHashes::IS_USING_CONTROLLER), bool>(); }
    static inline auto IsVehDriveable(Vehicle vehicle) { return NativeInvoke::Invoke<1469, std::to_underlying(NativeHashes::IS_VEH_DRIVEABLE), bool>(vehicle); }
    static inline auto IsVehStuck(Vehicle veh, int32_t time, bool flag0, bool flag1, bool flag2) { return NativeInvoke::Invoke<1470, std::to_underlying(NativeHashes::IS_VEH_STUCK), bool>(veh, time, flag0, flag1, flag2); }
    static inline auto IsVehWindowIntact(Vehicle vehicle, uint32_t window) { return NativeInvoke::Invoke<1471, std::to_underlying(NativeHashes::IS_VEH_WINDOW_INTACT), bool>(vehicle, window); }
    static inline auto IsVehicleExtraTurnedOn(Vehicle vehicle, uint32_t extra) { return NativeInvoke::Invoke<1472, std::to_underlying(NativeHashes::IS_VEHICLE_EXTRA_TURNED_ON), bool>(vehicle, extra); }
    static inline auto IsVehicleOnAllWheels(Vehicle vehicle) { return NativeInvoke::Invoke<1473, std::to_underlying(NativeHashes::IS_VEHICLE_ON_ALL_WHEELS), bool>(vehicle); }
    static inline auto IsVehicleOnPlayerMachine() { return NativeInvoke::Invoke<1474, std::to_underlying(NativeHashes::IS_VEHICLE_ON_PLAYER_MACHINE), Any>(); }
    static inline auto IsVehicleTouchingObject(Vehicle veh, Object obj) { return NativeInvoke::Invoke<1475, std::to_underlying(NativeHashes::IS_VEHICLE_TOUCHING_OBJECT), bool>(veh, obj); }
    static inline auto IsViewportActive(int32_t viewportid) { return NativeInvoke::Invoke<1476, std::to_underlying(NativeHashes::IS_VIEWPORT_ACTIVE), bool>(viewportid); }
    static inline auto IsWantedLevelGreater(Player playerIndex, uint32_t level) { return NativeInvoke::Invoke<1477, std::to_underlying(NativeHashes::IS_WANTED_LEVEL_GREATER), bool>(playerIndex, level); }
    static inline auto IsWorldPointWithinBrainActivationRange() { return NativeInvoke::Invoke<1478, std::to_underlying(NativeHashes::IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE), bool>(); }
    static inline auto KnockPedOffBike(Vehicle vehicle) { return NativeInvoke::Invoke<1479, std::to_underlying(NativeHashes::KNOCK_PED_OFF_BIKE), void>(vehicle); }
    static inline auto LoadGroupDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<1480, std::to_underlying(NativeHashes::LOAD_GROUP_DECISION_MAKER), void>(type, pDM); }
    static inline auto LaunchLocalPlayerInNetworkGame() { return NativeInvoke::Invoke<1481, std::to_underlying(NativeHashes::LAUNCH_LOCAL_PLAYER_IN_NETWORK_GAME), void>(); }
    static inline auto LcpdFirstTime() { return NativeInvoke::Invoke<1482, std::to_underlying(NativeHashes::LCPD_FIRST_TIME), Any>(); }
    static inline auto LcpdHasBeenConfigured() { return NativeInvoke::Invoke<1483, std::to_underlying(NativeHashes::LCPD_HAS_BEEN_CONFIGURED), Any>(); }
    static inline auto LimitAngle(float angle, float* anglelimited) { return NativeInvoke::Invoke<1484, std::to_underlying(NativeHashes::LIMIT_ANGLE), void>(angle, anglelimited); }
    static inline auto LimitTwoPlayerDistance(float distance) { return NativeInvoke::Invoke<1485, std::to_underlying(NativeHashes::LIMIT_TWO_PLAYER_DISTANCE), void>(distance); }
    static inline auto Line(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1486, std::to_underlying(NativeHashes::LINE), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto ListenToPlayerGroupCommands(Ped ped, bool set) { return NativeInvoke::Invoke<1487, std::to_underlying(NativeHashes::LISTEN_TO_PLAYER_GROUP_COMMANDS), void>(ped, set); }
    static inline auto LoadAdditionalText(char* textName, uint32_t textIndex) { return NativeInvoke::Invoke<1488, std::to_underlying(NativeHashes::LOAD_ADDITIONAL_TEXT), void>(textName, textIndex); }
    static inline auto LoadAllObjectsNow() { return NativeInvoke::Invoke<1489, std::to_underlying(NativeHashes::LOAD_ALL_OBJECTS_NOW), void>(); }
    static inline auto LoadAllPathNodes(bool value) { return NativeInvoke::Invoke<1490, std::to_underlying(NativeHashes::LOAD_ALL_PATH_NODES), uint32_t>(value); }
    static inline auto LoadCharDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<1491, std::to_underlying(NativeHashes::LOAD_CHAR_DECISION_MAKER), void>(type, pDM); }
    static inline auto LoadCombatDecisionMaker(uint32_t type, DecisionMaker* pDM) { return NativeInvoke::Invoke<1492, std::to_underlying(NativeHashes::LOAD_COMBAT_DECISION_MAKER), void>(type, pDM); }
    static inline auto LoadPathNodesInArea(float x, float y, float z, float radius) { return NativeInvoke::Invoke<1493, std::to_underlying(NativeHashes::LOAD_PATH_NODES_IN_AREA), void>(x, y, z, radius); }
    static inline auto LoadScene(float x, float y, float z) { return NativeInvoke::Invoke<1494, std::to_underlying(NativeHashes::LOAD_SCENE), void>(x, y, z); }
    static inline auto LoadSceneForRoomByKey(int32_t interior, uint32_t roomhash) { return NativeInvoke::Invoke<1495, std::to_underlying(NativeHashes::LOAD_SCENE_FOR_ROOM_BY_KEY), void>(interior, roomhash); }
    static inline auto LoadSettings() { return NativeInvoke::Invoke<1496, std::to_underlying(NativeHashes::LOAD_SETTINGS), void>(); }
    static inline auto LoadTextFont(uint32_t font) { return NativeInvoke::Invoke<1497, std::to_underlying(NativeHashes::LOAD_TEXT_FONT), void>(font); }
    static inline auto LoadTxd(char* txdName) { return NativeInvoke::Invoke<1498, std::to_underlying(NativeHashes::LOAD_TXD), TextureDict>(txdName); }
    static inline auto LoadWebPage(int32_t htmlviewport, char* webaddress) { return NativeInvoke::Invoke<1499, std::to_underlying(NativeHashes::LOAD_WEB_PAGE), void>(htmlviewport, webaddress); }
    static inline auto LocalPlayerIsReadyToStartPlaying() { return NativeInvoke::Invoke<1500, std::to_underlying(NativeHashes::LOCAL_PLAYER_IS_READY_TO_START_PLAYING), Any>(); }
    static inline auto LocateCar2d(Car car, float x0, float y0, float xUnk, float yUnk, bool flag) { return NativeInvoke::Invoke<1501, std::to_underlying(NativeHashes::LOCATE_CAR_2D), bool>(car, x0, y0, xUnk, yUnk, flag); }
    static inline auto LocateCar3d(Car car, float x, float y, float z, float xa, float ya, float za, bool flag) { return NativeInvoke::Invoke<1502, std::to_underlying(NativeHashes::LOCATE_CAR_3D), bool>(car, x, y, z, xa, ya, za, flag); }
    static inline auto LocateCharAnyMeans2d(Ped ped, float x0, float y0, float x1, float y1, bool flag) { return NativeInvoke::Invoke<1503, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_2D), bool>(ped, x0, y0, x1, y1, flag); }
    static inline auto LocateCharAnyMeans3d(Ped ped, float x0, float y0, float z0, float x1, float y1, float z1, bool flag) { return NativeInvoke::Invoke<1504, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_3D), bool>(ped, x0, y0, z0, x1, y1, z1, flag); }
    static inline auto LocateCharAnyMeansCar2d(Ped ped, Car car, float x, float y, bool flag) { return NativeInvoke::Invoke<1505, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_CAR_2D), bool>(ped, car, x, y, flag); }
    static inline auto LocateCharAnyMeansCar3d(Ped ped, Car car, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1506, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_CAR_3D), bool>(ped, car, x, y, z, flag); }
    static inline auto LocateCharAnyMeansChar2d(Ped ped, Ped pednext, float x, float y, bool flag) { return NativeInvoke::Invoke<1507, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_CHAR_2D), bool>(ped, pednext, x, y, flag); }
    static inline auto LocateCharAnyMeansChar3d(Ped ped, Ped pednext, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1508, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_CHAR_3D), bool>(ped, pednext, x, y, z, flag); }
    static inline auto LocateCharAnyMeansObject2d(Ped ped, Object obj, float x, float y, bool flag) { return NativeInvoke::Invoke<1509, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_OBJECT_2D), bool>(ped, obj, x, y, flag); }
    static inline auto LocateCharAnyMeansObject3d(Ped ped, Object obj, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1510, std::to_underlying(NativeHashes::LOCATE_CHAR_ANY_MEANS_OBJECT_3D), bool>(ped, obj, x, y, z, flag); }
    static inline auto LocateCharInCar2d(Ped ped, float x0, float y0, float x1, float y1, bool flag) { return NativeInvoke::Invoke<1511, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_2D), bool>(ped, x0, y0, x1, y1, flag); }
    static inline auto LocateCharInCar3d(Ped ped, float x0, float y0, float z0, float x1, float y1, float z, bool flag) { return NativeInvoke::Invoke<1512, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_3D), bool>(ped, x0, y0, z0, x1, y1, z, flag); }
    static inline auto LocateCharInCarCar2d(Ped ped, Car car, float x, float y, bool flag) { return NativeInvoke::Invoke<1513, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_CAR_2D), bool>(ped, car, x, y, flag); }
    static inline auto LocateCharInCarCar3d(Ped ped, Car car, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1514, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_CAR_3D), bool>(ped, car, x, y, z, flag); }
    static inline auto LocateCharInCarChar2d(Ped ped, Ped pednext, float x, float y, bool flag) { return NativeInvoke::Invoke<1515, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_CHAR_2D), bool>(ped, pednext, x, y, flag); }
    static inline auto LocateCharInCarChar3d(Ped ped, Car pednext, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1516, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_CHAR_3D), bool>(ped, pednext, x, y, z, flag); }
    static inline auto LocateCharInCarObject2d(Ped ped, Object obj, float x, float y, bool flag) { return NativeInvoke::Invoke<1517, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_OBJECT_2D), bool>(ped, obj, x, y, flag); }
    static inline auto LocateCharInCarObject3d(Ped ped, Object obj, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1518, std::to_underlying(NativeHashes::LOCATE_CHAR_IN_CAR_OBJECT_3D), bool>(ped, obj, x, y, z, flag); }
    static inline auto LocateCharOnFoot2d(Ped ped, float x0, float y0, float x1, float y1, bool flag) { return NativeInvoke::Invoke<1519, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_2D), bool>(ped, x0, y0, x1, y1, flag); }
    static inline auto LocateCharOnFoot3d(Ped ped, float x0, float y0, float z0, float x1, float y1, float z1, bool flag) { return NativeInvoke::Invoke<1520, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_3D), bool>(ped, x0, y0, z0, x1, y1, z1, flag); }
    static inline auto LocateCharOnFootCar2d(Ped ped, Car car, float x, float y, bool flag) { return NativeInvoke::Invoke<1521, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_CAR_2D), bool>(ped, car, x, y, flag); }
    static inline auto LocateCharOnFootCar3d(Ped ped, Car car, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1522, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_CAR_3D), bool>(ped, car, x, y, z, flag); }
    static inline auto LocateCharOnFootChar2d(Ped ped, Ped pednext, float x, float y, bool flag) { return NativeInvoke::Invoke<1523, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_CHAR_2D), bool>(ped, pednext, x, y, flag); }
    static inline auto LocateCharOnFootChar3d(Ped ped, Ped pednext, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1524, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_CHAR_3D), bool>(ped, pednext, x, y, z, flag); }
    static inline auto LocateCharOnFootObject2d(Ped ped, Object obj, float x, float y, bool flag) { return NativeInvoke::Invoke<1525, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_OBJECT_2D), bool>(ped, obj, x, y, flag); }
    static inline auto LocateCharOnFootObject3d(Ped ped, Object obj, float x, float y, float z, bool flag) { return NativeInvoke::Invoke<1526, std::to_underlying(NativeHashes::LOCATE_CHAR_ON_FOOT_OBJECT_3D), bool>(ped, obj, x, y, z, flag); }
    static inline auto LocateDeadCar3d(Car car, float x, float y, float z, float xa, float ya, float za, bool flag) { return NativeInvoke::Invoke<1527, std::to_underlying(NativeHashes::LOCATE_DEAD_CAR_3D), bool>(car, x, y, z, xa, ya, za, flag); }
    static inline auto LocateObject2d(Object obj, float x0, float y0, float x1, float y1, bool flag) { return NativeInvoke::Invoke<1528, std::to_underlying(NativeHashes::LOCATE_OBJECT_2D), bool>(obj, x0, y0, x1, y1, flag); }
    static inline auto LocateObject3d(Object obj, float x, float y, float z, float xr, float yr, float zr, bool flag) { return NativeInvoke::Invoke<1529, std::to_underlying(NativeHashes::LOCATE_OBJECT_3D), bool>(obj, x, y, z, xr, yr, zr, flag); }
    static inline auto LockCarDoors(Vehicle vehicle, uint32_t value) { return NativeInvoke::Invoke<1530, std::to_underlying(NativeHashes::LOCK_CAR_DOORS), void>(vehicle, value); }
    static inline auto LockLazlowStation() { return NativeInvoke::Invoke<1531, std::to_underlying(NativeHashes::LOCK_LAZLOW_STATION), void>(); }
    static inline auto LockPlayerSettingsGenreChange(int32_t lock_bit_mask) { return NativeInvoke::Invoke<1532, std::to_underlying(NativeHashes::LOCK_PLAYER_SETTINGS_GENRE_CHANGE), void>(lock_bit_mask); }
    static inline auto LookAtNearbyEntityWithSpecialAttribute(int a1, Vector3* a2, float* a3, Any* a4, Any* a5, Any* a6) { return NativeInvoke::Invoke<1533, std::to_underlying(NativeHashes::LOOK_AT_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE), bool>(a1, a2, a3, a4, a5, a6); }
    static inline auto LoopRaceTrack(bool loop) { return NativeInvoke::Invoke<1534, std::to_underlying(NativeHashes::LOOP_RACE_TRACK), void>(loop); }
    static inline auto MaintainFlashingStarAfterOffence(int32_t player, bool maintain) { return NativeInvoke::Invoke<1535, std::to_underlying(NativeHashes::MAINTAIN_FLASHING_STAR_AFTER_OFFENCE), void>(player, maintain); }
    static inline auto MakeObjectTargettable(Object obj, bool targettable) { return NativeInvoke::Invoke<1536, std::to_underlying(NativeHashes::MAKE_OBJECT_TARGETTABLE), void>(obj, targettable); }
    static inline auto MakePlayerFireProof(int32_t player, bool proof) { return NativeInvoke::Invoke<1537, std::to_underlying(NativeHashes::MAKE_PLAYER_FIRE_PROOF), void>(player, proof); }
    static inline auto MakePlayerGangDisappear() { return NativeInvoke::Invoke<1538, std::to_underlying(NativeHashes::MAKE_PLAYER_GANG_DISAPPEAR), void>(); }
    static inline auto MakePlayerGangReappear() { return NativeInvoke::Invoke<1539, std::to_underlying(NativeHashes::MAKE_PLAYER_GANG_REAPPEAR), void>(); }
    static inline auto MakePlayerSafeForCutscene(int32_t player) { return NativeInvoke::Invoke<1540, std::to_underlying(NativeHashes::MAKE_PLAYER_SAFE_FOR_CUTSCENE), void>(player); }
    static inline auto MakeRoomInPlayerGangForMissionPeds() { return NativeInvoke::Invoke<1541, std::to_underlying(NativeHashes::MAKE_ROOM_IN_PLAYER_GANG_FOR_MISSION_PEDS), Any>(); }
    static inline auto MarkCarAsConvoyCar(Vehicle vehicle, bool convoyCar) { return NativeInvoke::Invoke<1542, std::to_underlying(NativeHashes::MARK_CAR_AS_CONVOY_CAR), void>(vehicle, convoyCar); }
    static inline auto MarkCarAsNoLongerNeeded(Vehicle* pVehicle) { return NativeInvoke::Invoke<1543, std::to_underlying(NativeHashes::MARK_CAR_AS_NO_LONGER_NEEDED), void>(pVehicle); }
    static inline auto MarkCharAsNoLongerNeeded(Ped* pPed) { return NativeInvoke::Invoke<1544, std::to_underlying(NativeHashes::MARK_CHAR_AS_NO_LONGER_NEEDED), void>(pPed); }
    static inline auto MarkMissionTrainAsNoLongerNeeded(Train train) { return NativeInvoke::Invoke<1545, std::to_underlying(NativeHashes::MARK_MISSION_TRAIN_AS_NO_LONGER_NEEDED), void>(train); }
    static inline auto MarkMissionTrainsAsNoLongerNeeded() { return NativeInvoke::Invoke<1546, std::to_underlying(NativeHashes::MARK_MISSION_TRAINS_AS_NO_LONGER_NEEDED), void>(); }
    static inline auto MarkModelAsNoLongerNeeded(uint32_t model) { return NativeInvoke::Invoke<1547, std::to_underlying(NativeHashes::MARK_MODEL_AS_NO_LONGER_NEEDED), void>(model); }
    static inline auto MarkObjectAsNoLongerNeeded(Object* pObj) { return NativeInvoke::Invoke<1548, std::to_underlying(NativeHashes::MARK_OBJECT_AS_NO_LONGER_NEEDED), void>(pObj); }
    static inline auto MarkRoadNodeAsDontWander(float x, float y, float z) { return NativeInvoke::Invoke<1549, std::to_underlying(NativeHashes::MARK_ROAD_NODE_AS_DONT_WANDER), void>(x, y, z); }
    static inline auto MarkScriptAsNoLongerNeeded(char* scriptName) { return NativeInvoke::Invoke<1550, std::to_underlying(NativeHashes::MARK_SCRIPT_AS_NO_LONGER_NEEDED), void>(scriptName); }
    static inline auto MarkStreamedTxdAsNoLongerNeeded(char* txdName) { return NativeInvoke::Invoke<1551, std::to_underlying(NativeHashes::MARK_STREAMED_TXD_AS_NO_LONGER_NEEDED), void>(txdName); }
    static inline auto MissionAudioBankNoLongerNeeded() { return NativeInvoke::Invoke<1552, std::to_underlying(NativeHashes::MISSION_AUDIO_BANK_NO_LONGER_NEEDED), void>(); }
    static inline auto ModifyCharMoveBlendRatio(Ped ped, Any a2) { return NativeInvoke::Invoke<1553, std::to_underlying(NativeHashes::MODIFY_CHAR_MOVE_BLEND_RATIO), void>(ped, a2); }
    static inline auto ModifyCharMoveState(Ped ped, uint32_t state) { return NativeInvoke::Invoke<1554, std::to_underlying(NativeHashes::MODIFY_CHAR_MOVE_STATE), void>(ped, state); }
    static inline auto MpGetAmountOfAnchorPoints(Ped ped, int32_t id) { return NativeInvoke::Invoke<1555, std::to_underlying(NativeHashes::MP_GET_AMOUNT_OF_ANCHOR_POINTS), int32_t>(ped, id); }
    static inline auto MpGetAmountOfVariationComponent(Ped ped, int32_t componentid) { return NativeInvoke::Invoke<1556, std::to_underlying(NativeHashes::MP_GET_AMOUNT_OF_VARIATION_COMPONENT), int32_t>(ped, componentid); }
    static inline auto MpGetPreferenceValue(int32_t prefid) { return NativeInvoke::Invoke<1557, std::to_underlying(NativeHashes::MP_GET_PREFERENCE_VALUE), int32_t>(prefid); }
    static inline auto MpGetPropSetup(Ped ped, int a2, int a3, int a4, int a5) { return NativeInvoke::Invoke<1558, std::to_underlying(NativeHashes::MP_GET_PROP_SETUP), int32_t>(ped, a2, a3, a4, a5); }
    static inline auto MpGetVariationSetup(Ped ped, int a2, int a3, int a4, int a5) { return NativeInvoke::Invoke<1559, std::to_underlying(NativeHashes::MP_GET_VARIATION_SETUP), int32_t>(ped, a2, a3, a4, a5); }
    static inline auto MpSetPreferenceValue(int32_t prefid, int32_t value) { return NativeInvoke::Invoke<1560, std::to_underlying(NativeHashes::MP_SET_PREFERENCE_VALUE), void>(prefid, value); }
    static inline auto MuteGameworldAndPositionedRadioForTv(bool mute) { return NativeInvoke::Invoke<1561, std::to_underlying(NativeHashes::MUTE_GAMEWORLD_AND_POSITIONED_RADIO_FOR_TV), void>(mute); }
    static inline auto MuteGameworldAudio(bool mute) { return NativeInvoke::Invoke<1562, std::to_underlying(NativeHashes::MUTE_GAMEWORLD_AUDIO), void>(mute); }
    static inline auto MutePositionedRadio(bool mute) { return NativeInvoke::Invoke<1563, std::to_underlying(NativeHashes::MUTE_POSITIONED_RADIO), void>(mute); }
    static inline auto MuteStaticEmitter(int32_t StaticEmitterIndex, bool mute) { return NativeInvoke::Invoke<1564, std::to_underlying(NativeHashes::MUTE_STATIC_EMITTER), void>(StaticEmitterIndex, mute); }
    static inline auto NetworkAcceptInvite(Any a1) { return NativeInvoke::Invoke<1565, std::to_underlying(NativeHashes::NETWORK_ACCEPT_INVITE), Any>(a1); }
    static inline auto NetworkAdvertiseSession(Any a1) { return NativeInvoke::Invoke<1566, std::to_underlying(NativeHashes::NETWORK_ADVERTISE_SESSION), Any>(a1); }
    static inline auto NetworkAllPartyMembersPresent() { return NativeInvoke::Invoke<1567, std::to_underlying(NativeHashes::NETWORK_ALL_PARTY_MEMBERS_PRESENT), Any>(); }
    static inline auto NetworkAmIBlockedByPlayer(Any a1) { return NativeInvoke::Invoke<1568, std::to_underlying(NativeHashes::NETWORK_AM_I_BLOCKED_BY_PLAYER), Any>(a1); }
    static inline auto NetworkAmIMutedByPlayer(Any a1) { return NativeInvoke::Invoke<1569, std::to_underlying(NativeHashes::NETWORK_AM_I_MUTED_BY_PLAYER), Any>(a1); }
    static inline auto NetworkChangeExtendedGameConfig(Any a1) { return NativeInvoke::Invoke<1570, std::to_underlying(NativeHashes::NETWORK_CHANGE_EXTENDED_GAME_CONFIG), void>(a1); }
    static inline auto NetworkChangeGameMode(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<1571, std::to_underlying(NativeHashes::NETWORK_CHANGE_GAME_MODE), Any>(a1, a2, a3, a4); }
    static inline auto NetworkChangeGameModePending() { return NativeInvoke::Invoke<1572, std::to_underlying(NativeHashes::NETWORK_CHANGE_GAME_MODE_PENDING), bool>(); }
    static inline auto NetworkChangeGameModeSucceeded() { return NativeInvoke::Invoke<1573, std::to_underlying(NativeHashes::NETWORK_CHANGE_GAME_MODE_SUCCEEDED), Any>(); }
    static inline auto NetworkCheckInviteArrival() { return NativeInvoke::Invoke<1574, std::to_underlying(NativeHashes::NETWORK_CHECK_INVITE_ARRIVAL), Any>(); }
    static inline auto NetworkClearInviteArrival() { return NativeInvoke::Invoke<1575, std::to_underlying(NativeHashes::NETWORK_CLEAR_INVITE_ARRIVAL), void>(); }
    static inline auto NetworkClearSummons() { return NativeInvoke::Invoke<1576, std::to_underlying(NativeHashes::NETWORK_CLEAR_SUMMONS), Any>(); }
    static inline auto NetworkDidInviteFriend(Any a1) { return NativeInvoke::Invoke<1577, std::to_underlying(NativeHashes::NETWORK_DID_INVITE_FRIEND), Any>(a1); }
    static inline auto NetworkDisplayHostGamerCard() { return NativeInvoke::Invoke<1578, std::to_underlying(NativeHashes::NETWORK_DISPLAY_HOST_GAMER_CARD), Any>(); }
    static inline auto NetworkEndSession() { return NativeInvoke::Invoke<1579, std::to_underlying(NativeHashes::NETWORK_END_SESSION), Any>(); }
    static inline auto NetworkEndSessionPending() { return NativeInvoke::Invoke<1580, std::to_underlying(NativeHashes::NETWORK_END_SESSION_PENDING), Any>(); }
    static inline auto NetworkExpandTo32Players() { return NativeInvoke::Invoke<1581, std::to_underlying(NativeHashes::NETWORK_EXPAND_TO_32_PLAYERS), Any>(); }
    static inline auto NetworkFindGame(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<1582, std::to_underlying(NativeHashes::NETWORK_FIND_GAME), void>(a1, a2, a3, a4); }
    static inline auto NetworkFindGamePending() { return NativeInvoke::Invoke<1583, std::to_underlying(NativeHashes::NETWORK_FIND_GAME_PENDING), Any>(); }
    static inline auto NetworkFinishExtendedSearch() { return NativeInvoke::Invoke<1584, std::to_underlying(NativeHashes::NETWORK_FINISH_EXTENDED_SEARCH), void>(); }
    static inline auto NetworkGetFindResult(Any a1, Any a2) { return NativeInvoke::Invoke<1585, std::to_underlying(NativeHashes::NETWORK_GET_FIND_RESULT), void>(a1, a2); }
    static inline auto NetworkGetFriendCount() { return NativeInvoke::Invoke<1586, std::to_underlying(NativeHashes::NETWORK_GET_FRIEND_COUNT), Any>(); }
    static inline auto NetworkGetFriendName(Any a1) { return NativeInvoke::Invoke<1587, std::to_underlying(NativeHashes::NETWORK_GET_FRIEND_NAME), Any>(a1); }
    static inline auto NetworkGetFriendlyFireOption() { return NativeInvoke::Invoke<1588, std::to_underlying(NativeHashes::NETWORK_GET_FRIENDLY_FIRE_OPTION), Any>(); }
    static inline auto NetworkGetGameMode() { return NativeInvoke::Invoke<1589, std::to_underlying(NativeHashes::NETWORK_GET_GAME_MODE), Any>(); }
    static inline auto NetworkGetHealthReticuleOption() { return NativeInvoke::Invoke<1590, std::to_underlying(NativeHashes::NETWORK_GET_HEALTH_RETICULE_OPTION), Any>(); }
    static inline auto NetworkGetHostAverageRank(int32_t host) { return NativeInvoke::Invoke<1591, std::to_underlying(NativeHashes::NETWORK_GET_HOST_AVERAGE_RANK), int32_t>(host); }
    static inline auto NetworkGetHostLatency(int32_t host) { return NativeInvoke::Invoke<1592, std::to_underlying(NativeHashes::NETWORK_GET_HOST_LATENCY), int32_t>(host); }
    static inline auto NetworkGetHostMatchProgress(int32_t host) { return NativeInvoke::Invoke<1593, std::to_underlying(NativeHashes::NETWORK_GET_HOST_MATCH_PROGRESS), int32_t>(host); }
    static inline auto NetworkGetHostName() { return NativeInvoke::Invoke<1594, std::to_underlying(NativeHashes::NETWORK_GET_HOST_NAME), Any>(); }
    static inline auto NetworkGetHostServerName(int32_t host) { return NativeInvoke::Invoke<1595, std::to_underlying(NativeHashes::NETWORK_GET_HOST_SERVER_NAME), char*>(host); }
    static inline auto NetworkGetLanSession() { return NativeInvoke::Invoke<1596, std::to_underlying(NativeHashes::NETWORK_GET_LAN_SESSION), Any>(); }
    static inline auto NetworkGetMaxPrivateSlots() { return NativeInvoke::Invoke<1597, std::to_underlying(NativeHashes::NETWORK_GET_MAX_PRIVATE_SLOTS), Any>(); }
    static inline auto NetworkGetMaxSlots() { return NativeInvoke::Invoke<1598, std::to_underlying(NativeHashes::NETWORK_GET_MAX_SLOTS), Any>(); }
    static inline auto NetworkGetMetPlayerName(Any a1) { return NativeInvoke::Invoke<1599, std::to_underlying(NativeHashes::NETWORK_GET_MET_PLAYER_NAME), Any>(a1); }
    static inline auto NetworkGetNextTextChat() { return NativeInvoke::Invoke<1600, std::to_underlying(NativeHashes::NETWORK_GET_NEXT_TEXT_CHAT), Any>(); }
    static inline auto NetworkGetNumOpenPublicSlots() { return NativeInvoke::Invoke<1601, std::to_underlying(NativeHashes::NETWORK_GET_NUM_OPEN_PUBLIC_SLOTS), Any>(); }
    static inline auto NetworkGetNumPartyMembers() { return NativeInvoke::Invoke<1602, std::to_underlying(NativeHashes::NETWORK_GET_NUM_PARTY_MEMBERS), Any>(); }
    static inline auto NetworkGetNumPlayersMet() { return NativeInvoke::Invoke<1603, std::to_underlying(NativeHashes::NETWORK_GET_NUM_PLAYERS_MET), Any>(); }
    static inline auto NetworkGetNumUnacceptedInvites() { return NativeInvoke::Invoke<1604, std::to_underlying(NativeHashes::NETWORK_GET_NUM_UNACCEPTED_INVITES), Any>(); }
    static inline auto NetworkGetNumUnfilledReservations() { return NativeInvoke::Invoke<1605, std::to_underlying(NativeHashes::NETWORK_GET_NUM_UNFILLED_RESERVATIONS), Any>(); }
    static inline auto NetworkGetNumberOfGames() { return NativeInvoke::Invoke<1606, std::to_underlying(NativeHashes::NETWORK_GET_NUMBER_OF_GAMES), Any>(); }
    static inline auto NetworkGetPlayerIdOfNextTextChat() { return NativeInvoke::Invoke<1607, std::to_underlying(NativeHashes::NETWORK_GET_PLAYER_ID_OF_NEXT_TEXT_CHAT), Any>(); }
    static inline auto NetworkGetRendezvousHostPlayerId() { return NativeInvoke::Invoke<1608, std::to_underlying(NativeHashes::NETWORK_GET_RENDEZVOUS_HOST_PLAYER_ID), Any>(); }
    static inline auto NetworkGetServerName() { return NativeInvoke::Invoke<1609, std::to_underlying(NativeHashes::NETWORK_GET_SERVER_NAME), Any>(); }
    static inline auto NetworkGetTeamOption() { return NativeInvoke::Invoke<1610, std::to_underlying(NativeHashes::NETWORK_GET_TEAM_OPTION), Any>(); }
    static inline auto NetworkGetUnacceptedInviteEpisode(Any a1) { return NativeInvoke::Invoke<1611, std::to_underlying(NativeHashes::NETWORK_GET_UNACCEPTED_INVITE_EPISODE), Any>(a1); }
    static inline auto NetworkGetUnacceptedInviteGameMode(Any a1) { return NativeInvoke::Invoke<1612, std::to_underlying(NativeHashes::NETWORK_GET_UNACCEPTED_INVITE_GAME_MODE), Any>(a1); }
    static inline auto NetworkGetUnacceptedInviterName(Any a1) { return NativeInvoke::Invoke<1613, std::to_underlying(NativeHashes::NETWORK_GET_UNACCEPTED_INVITER_NAME), Any>(a1); }
    static inline auto NetworkHasStrictNat() { return NativeInvoke::Invoke<1614, std::to_underlying(NativeHashes::NETWORK_HAS_STRICT_NAT), Any>(); }
    static inline auto NetworkHaveAcceptedInvite() { return NativeInvoke::Invoke<1615, std::to_underlying(NativeHashes::NETWORK_HAVE_ACCEPTED_INVITE), Any>(); }
    static inline auto NetworkHaveOnlinePrivileges() { return NativeInvoke::Invoke<1616, std::to_underlying(NativeHashes::NETWORK_HAVE_ONLINE_PRIVILEGES), Any>(); }
    static inline auto NetworkHaveSummons() { return NativeInvoke::Invoke<1617, std::to_underlying(NativeHashes::NETWORK_HAVE_SUMMONS), Any>(); }
    static inline auto NetworkHostGameCnc() { return NativeInvoke::Invoke<1618, std::to_underlying(NativeHashes::NETWORK_HOST_GAME_CNC), Any>(); }
    static inline auto NetworkHostGameE1(Any a1, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<1619, std::to_underlying(NativeHashes::NETWORK_HOST_GAME_E1), Any>(a1, a2, a3, a4, a5, a6); }
    static inline auto NetworkHostGamePending() { return NativeInvoke::Invoke<1620, std::to_underlying(NativeHashes::NETWORK_HOST_GAME_PENDING), Any>(); }
    static inline auto NetworkHostGameSucceeded() { return NativeInvoke::Invoke<1621, std::to_underlying(NativeHashes::NETWORK_HOST_GAME_SUCCEEDED), Any>(); }
    static inline auto NetworkHostRendezvousE1(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<1622, std::to_underlying(NativeHashes::NETWORK_HOST_RENDEZVOUS_E1), Any>(a1, a2, a3); }
    static inline auto NetworkInviteFriend(Any a1, Any a2) { return NativeInvoke::Invoke<1623, std::to_underlying(NativeHashes::NETWORK_INVITE_FRIEND), Any>(a1, a2); }
    static inline auto NetworkIsBeingKicked() { return NativeInvoke::Invoke<1624, std::to_underlying(NativeHashes::NETWORK_IS_BEING_KICKED), Any>(); }
    static inline auto NetworkIsCommonEpisode(int32_t id) { return NativeInvoke::Invoke<1625, std::to_underlying(NativeHashes::NETWORK_IS_COMMON_EPISODE), bool>(id); }
    static inline auto NetworkIsFindResultUpdated(Any a1) { return NativeInvoke::Invoke<1626, std::to_underlying(NativeHashes::NETWORK_IS_FIND_RESULT_UPDATED), Any>(a1); }
    static inline auto NetworkIsFindResultValid(Any a1) { return NativeInvoke::Invoke<1627, std::to_underlying(NativeHashes::NETWORK_IS_FIND_RESULT_VALID), Any>(a1); }
    static inline auto NetworkIsFriendInSameTitle(Any a1) { return NativeInvoke::Invoke<1628, std::to_underlying(NativeHashes::NETWORK_IS_FRIEND_IN_SAME_TITLE), Any>(a1); }
    static inline auto NetworkIsFriendOnline(Any a1) { return NativeInvoke::Invoke<1629, std::to_underlying(NativeHashes::NETWORK_IS_FRIEND_ONLINE), Any>(a1); }
    static inline auto NetworkIsGameRanked() { return NativeInvoke::Invoke<1630, std::to_underlying(NativeHashes::NETWORK_IS_GAME_RANKED), bool>(); }
    static inline auto NetworkIsInviteeOnline() { return NativeInvoke::Invoke<1631, std::to_underlying(NativeHashes::NETWORK_IS_INVITEE_ONLINE), Any>(); }
    static inline auto NetworkIsLinkConnected() { return NativeInvoke::Invoke<1632, std::to_underlying(NativeHashes::NETWORK_IS_LINK_CONNECTED), Any>(); }
    static inline auto NetworkIsNetworkAvailable() { return NativeInvoke::Invoke<1633, std::to_underlying(NativeHashes::NETWORK_IS_NETWORK_AVAILABLE), Any>(); }
    static inline auto NetworkIsOperationPending() { return NativeInvoke::Invoke<1634, std::to_underlying(NativeHashes::NETWORK_IS_OPERATION_PENDING), Any>(); }
    static inline auto NetworkIsPlayerBlockedByMe(Any a1) { return NativeInvoke::Invoke<1635, std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_BLOCKED_BY_ME), Any>(a1); }
    static inline auto NetworkIsPlayerMutedByMe(Any a1) { return NativeInvoke::Invoke<1636, std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_MUTED_BY_ME), Any>(a1); }
    static inline auto NetworkIsPlayerTalking(Any a1) { return NativeInvoke::Invoke<1637, std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_TALKING), Any>(a1); }
    static inline auto NetworkIsPlayerTyping(Any a1) { return NativeInvoke::Invoke<1638, std::to_underlying(NativeHashes::NETWORK_IS_PLAYER_TYPING), Any>(a1); }
    static inline auto NetworkIsRendezvous() { return NativeInvoke::Invoke<1639, std::to_underlying(NativeHashes::NETWORK_IS_RENDEZVOUS), Any>(); }
    static inline auto NetworkIsRendezvousHost() { return NativeInvoke::Invoke<1640, std::to_underlying(NativeHashes::NETWORK_IS_RENDEZVOUS_HOST), Any>(); }
    static inline auto NetworkIsRockstartSessionIdValid() { return NativeInvoke::Invoke<1641, std::to_underlying(NativeHashes::NETWORK_IS_ROCKSTART_SESSION_ID_VALID), Any>(); }
    static inline auto NetworkIsSessionAdvertise() { return NativeInvoke::Invoke<1642, std::to_underlying(NativeHashes::NETWORK_IS_SESSION_ADVERTISE), Any>(); }
    static inline auto NetworkIsSessionInvitable() { return NativeInvoke::Invoke<1643, std::to_underlying(NativeHashes::NETWORK_IS_SESSION_INVITABLE), Any>(); }
    static inline auto NetworkIsSessionStarted() { return NativeInvoke::Invoke<1644, std::to_underlying(NativeHashes::NETWORK_IS_SESSION_STARTED), bool>(); }
    static inline auto NetworkIsTvt() { return NativeInvoke::Invoke<1645, std::to_underlying(NativeHashes::NETWORK_IS_TVT), Any>(); }
    static inline auto NetworkJoinGame(Any a1) { return NativeInvoke::Invoke<1646, std::to_underlying(NativeHashes::NETWORK_JOIN_GAME), Any>(a1); }
    static inline auto NetworkJoinGameCnc() { return NativeInvoke::Invoke<1647, std::to_underlying(NativeHashes::NETWORK_JOIN_GAME_CNC), Any>(); }
    static inline auto NetworkJoinGamePending() { return NativeInvoke::Invoke<1648, std::to_underlying(NativeHashes::NETWORK_JOIN_GAME_PENDING), Any>(); }
    static inline auto NetworkJoinGameSucceeded() { return NativeInvoke::Invoke<1649, std::to_underlying(NativeHashes::NETWORK_JOIN_GAME_SUCCEEDED), Any>(); }
    static inline auto NetworkJoinSummons() { return NativeInvoke::Invoke<1650, std::to_underlying(NativeHashes::NETWORK_JOIN_SUMMONS), bool>(); }
    static inline auto NetworkKickPlayer(Any a1, Any a2) { return NativeInvoke::Invoke<1651, std::to_underlying(NativeHashes::NETWORK_KICK_PLAYER), void>(a1, a2); }
    static inline auto NetworkLeaveGame() { return NativeInvoke::Invoke<1652, std::to_underlying(NativeHashes::NETWORK_LEAVE_GAME), Any>(); }
    static inline auto NetworkLeaveGamePending() { return NativeInvoke::Invoke<1653, std::to_underlying(NativeHashes::NETWORK_LEAVE_GAME_PENDING), Any>(); }
    static inline auto NetworkLimitTo16Players() { return NativeInvoke::Invoke<1654, std::to_underlying(NativeHashes::NETWORK_LIMIT_TO_16_PLAYERS), Any>(); }
    static inline auto NetworkPlayerHasCommPrivs() { return NativeInvoke::Invoke<1655, std::to_underlying(NativeHashes::NETWORK_PLAYER_HAS_COMM_PRIVS), Any>(); }
    static inline auto NetworkPlayerHasDiedRecently(Any a1) { return NativeInvoke::Invoke<1656, std::to_underlying(NativeHashes::NETWORK_PLAYER_HAS_DIED_RECENTLY), Any>(a1); }
    static inline auto NetworkPlayerHasHeadset(Any a1) { return NativeInvoke::Invoke<1657, std::to_underlying(NativeHashes::NETWORK_PLAYER_HAS_HEADSET), Any>(a1); }
    static inline auto NetworkPlayerHasKeyboard(Any a1) { return NativeInvoke::Invoke<1658, std::to_underlying(NativeHashes::NETWORK_PLAYER_HAS_KEYBOARD), Any>(a1); }
    static inline auto NetworkRestoreGameConfig(Any a1) { return NativeInvoke::Invoke<1659, std::to_underlying(NativeHashes::NETWORK_RESTORE_GAME_CONFIG), Any>(a1); }
    static inline auto NetworkResultMatchesSearchCriteria(Any a1) { return NativeInvoke::Invoke<1660, std::to_underlying(NativeHashes::NETWORK_RESULT_MATCHES_SEARCH_CRITERIA), Any>(a1); }
    static inline auto NetworkReturnToRendezvous() { return NativeInvoke::Invoke<1661, std::to_underlying(NativeHashes::NETWORK_RETURN_TO_RENDEZVOUS), Any>(); }
    static inline auto NetworkReturnToRendezvousPending() { return NativeInvoke::Invoke<1662, std::to_underlying(NativeHashes::NETWORK_RETURN_TO_RENDEZVOUS_PENDING), Any>(); }
    static inline auto NetworkReturnToRendezvousSucceeded() { return NativeInvoke::Invoke<1663, std::to_underlying(NativeHashes::NETWORK_RETURN_TO_RENDEZVOUS_SUCCEEDED), bool>(); }
    static inline auto NetworkSendTextChat(Any a1, Any a2) { return NativeInvoke::Invoke<1664, std::to_underlying(NativeHashes::NETWORK_SEND_TEXT_CHAT), Any>(a1, a2); }
    static inline auto NetworkSetFriendlyFireOption(Any a1) { return NativeInvoke::Invoke<1665, std::to_underlying(NativeHashes::NETWORK_SET_FRIENDLY_FIRE_OPTION), void>(a1); }
    static inline auto NetworkSetHealthReticuleOption(Any a1) { return NativeInvoke::Invoke<1666, std::to_underlying(NativeHashes::NETWORK_SET_HEALTH_RETICULE_OPTION), void>(a1); }
    static inline auto NetworkSetLanSession(Any a1) { return NativeInvoke::Invoke<1667, std::to_underlying(NativeHashes::NETWORK_SET_LAN_SESSION), void>(a1); }
    static inline auto NetworkSetLocalPlayerCanTalk() { return NativeInvoke::Invoke<1668, std::to_underlying(NativeHashes::NETWORK_SET_LOCAL_PLAYER_CAN_TALK), Any>(); }
    static inline auto NetworkSetLocalPlayerIsTyping(Any a1) { return NativeInvoke::Invoke<1669, std::to_underlying(NativeHashes::NETWORK_SET_LOCAL_PLAYER_IS_TYPING), Any>(a1); }
    static inline auto NetworkSetMatchProgress(Any a1) { return NativeInvoke::Invoke<1670, std::to_underlying(NativeHashes::NETWORK_SET_MATCH_PROGRESS), void>(a1); }
    static inline auto NetworkSetPlayerMuted(Any a1, Any a2) { return NativeInvoke::Invoke<1671, std::to_underlying(NativeHashes::NETWORK_SET_PLAYER_MUTED), Any>(a1, a2); }
    static inline auto NetworkSetScriptLobbyState(Any a1) { return NativeInvoke::Invoke<1672, std::to_underlying(NativeHashes::NETWORK_SET_SCRIPT_LOBBY_STATE), void>(a1); }
    static inline auto NetworkSetServerName(Any a1) { return NativeInvoke::Invoke<1673, std::to_underlying(NativeHashes::NETWORK_SET_SERVER_NAME), Any>(a1); }
    static inline auto NetworkSetSessionInvitable(Any a1) { return NativeInvoke::Invoke<1674, std::to_underlying(NativeHashes::NETWORK_SET_SESSION_INVITABLE), Any>(a1); }
    static inline auto NetworkSetTalkerFocus(Any a1) { return NativeInvoke::Invoke<1675, std::to_underlying(NativeHashes::NETWORK_SET_TALKER_FOCUS), void>(a1); }
    static inline auto NetworkSetTalkerProximity(Any a1) { return NativeInvoke::Invoke<1676, std::to_underlying(NativeHashes::NETWORK_SET_TALKER_PROXIMITY), void>(a1); }
    static inline auto NetworkSetTeamOnlyChat(Any a1) { return NativeInvoke::Invoke<1677, std::to_underlying(NativeHashes::NETWORK_SET_TEAM_ONLY_CHAT), void>(a1); }
    static inline auto NetworkSetTextChatRecipients(Any a1) { return NativeInvoke::Invoke<1678, std::to_underlying(NativeHashes::NETWORK_SET_TEXT_CHAT_RECIPIENTS), void>(a1); }
    static inline auto NetworkShowFriendProfileUi(Any a1) { return NativeInvoke::Invoke<1679, std::to_underlying(NativeHashes::NETWORK_SHOW_FRIEND_PROFILE_UI), void>(a1); }
    static inline auto NetworkShowMetPlayerFeedbackUi(Any a1) { return NativeInvoke::Invoke<1680, std::to_underlying(NativeHashes::NETWORK_SHOW_MET_PLAYER_FEEDBACK_UI), void>(a1); }
    static inline auto NetworkShowMetPlayerProfileUi(Any a1) { return NativeInvoke::Invoke<1681, std::to_underlying(NativeHashes::NETWORK_SHOW_MET_PLAYER_PROFILE_UI), void>(a1); }
    static inline auto NetworkShowPlayerFeedbackUi() { return NativeInvoke::Invoke<1682, std::to_underlying(NativeHashes::NETWORK_SHOW_PLAYER_FEEDBACK_UI), Any>(); }
    static inline auto NetworkShowPlayerProfileUi(Any a1) { return NativeInvoke::Invoke<1683, std::to_underlying(NativeHashes::NETWORK_SHOW_PLAYER_PROFILE_UI), void>(a1); }
    static inline auto NetworkStartExtendedSearch(Any a1) { return NativeInvoke::Invoke<1684, std::to_underlying(NativeHashes::NETWORK_START_EXTENDED_SEARCH), void>(a1); }
    static inline auto NetworkStartSession() { return NativeInvoke::Invoke<1685, std::to_underlying(NativeHashes::NETWORK_START_SESSION), Any>(); }
    static inline auto NetworkStartSessionPending() { return NativeInvoke::Invoke<1686, std::to_underlying(NativeHashes::NETWORK_START_SESSION_PENDING), Any>(); }
    static inline auto NetworkStartSessionSucceeded() { return NativeInvoke::Invoke<1687, std::to_underlying(NativeHashes::NETWORK_START_SESSION_SUCCEEDED), Any>(); }
    static inline auto NetworkStoreGameConfig(Any a1) { return NativeInvoke::Invoke<1688, std::to_underlying(NativeHashes::NETWORK_STORE_GAME_CONFIG), void>(a1); }
    static inline auto NetworkStoreSinglePlayerGame() { return NativeInvoke::Invoke<1689, std::to_underlying(NativeHashes::NETWORK_STORE_SINGLE_PLAYER_GAME), Any>(); }
    static inline auto NetworkStringVerifyPending() { return NativeInvoke::Invoke<1690, std::to_underlying(NativeHashes::NETWORK_STRING_VERIFY_PENDING), Any>(); }
    static inline auto NetworkStringVerifySucceeded() { return NativeInvoke::Invoke<1691, std::to_underlying(NativeHashes::NETWORK_STRING_VERIFY_SUCCEEDED), Any>(); }
    static inline auto NetworkVerifyUserString(Any a1) { return NativeInvoke::Invoke<1692, std::to_underlying(NativeHashes::NETWORK_VERIFY_USER_STRING), void>(a1); }
    static inline auto NewMobilePhoneCall() { return NativeInvoke::Invoke<1693, std::to_underlying(NativeHashes::NEW_MOBILE_PHONE_CALL), void>(); }
    static inline auto NewScriptedConversation() { return NativeInvoke::Invoke<1694, std::to_underlying(NativeHashes::NEW_SCRIPTED_CONVERSATION), void>(); }
    static inline auto ObfuscateInt(Any a1, Any a2) { return NativeInvoke::Invoke<1695, std::to_underlying(NativeHashes::OBFUSCATE_INT), void>(a1, a2); }
    static inline auto ObfuscateIntArray(Any a1, Any a2) { return NativeInvoke::Invoke<1696, std::to_underlying(NativeHashes::OBFUSCATE_INT_ARRAY), void>(a1, a2); }
    static inline auto ObfuscateString(char* str) { return NativeInvoke::Invoke<1697, std::to_underlying(NativeHashes::OBFUSCATE_STRING), char*>(str); }
    static inline auto OnFireScream(Ped ped) { return NativeInvoke::Invoke<1698, std::to_underlying(NativeHashes::ON_FIRE_SCREAM), void>(ped); }
    static inline auto OpenCarDoor(Vehicle vehicle, uint32_t door) { return NativeInvoke::Invoke<1699, std::to_underlying(NativeHashes::OPEN_CAR_DOOR), void>(vehicle, door); }
    static inline auto OpenDebugFile() { return NativeInvoke::Invoke<1700, std::to_underlying(NativeHashes::OPEN_DEBUG_FILE), void>(); }
    static inline auto OpenGarage(char* name) { return NativeInvoke::Invoke<1701, std::to_underlying(NativeHashes::OPEN_GARAGE), void>(name); }
    static inline auto OpenSequenceTask(TaskSequence* pTaskSequence) { return NativeInvoke::Invoke<1702, std::to_underlying(NativeHashes::OPEN_SEQUENCE_TASK), void>(pTaskSequence); }
    static inline auto OverrideFreezeFlags(bool a1) { return NativeInvoke::Invoke<1703, std::to_underlying(NativeHashes::OVERRIDE_FREEZE_FLAGS), void>(a1); }
    static inline auto OverrideNextRestart(float x, float y, float z, float heading) { return NativeInvoke::Invoke<1704, std::to_underlying(NativeHashes::OVERRIDE_NEXT_RESTART), void>(x, y, z, heading); }
    static inline auto OverrideNumberOfParkedCars(int32_t num) { return NativeInvoke::Invoke<1705, std::to_underlying(NativeHashes::OVERRIDE_NUMBER_OF_PARKED_CARS), void>(num); }
    static inline auto PanicScream(Ped ped) { return NativeInvoke::Invoke<1706, std::to_underlying(NativeHashes::PANIC_SCREAM), void>(ped); }
    static inline auto PauseGame() { return NativeInvoke::Invoke<1707, std::to_underlying(NativeHashes::PAUSE_GAME), void>(); }
    static inline auto PausePlaybackRecordedCar(Car car) { return NativeInvoke::Invoke<1708, std::to_underlying(NativeHashes::PAUSE_PLAYBACK_RECORDED_CAR), void>(car); }
    static inline auto PauseScriptedConversation(bool pause) { return NativeInvoke::Invoke<1709, std::to_underlying(NativeHashes::PAUSE_SCRIPTED_CONVERSATION), void>(pause); }
    static inline auto PedQueueConsiderPedsWithFlagFalse(int32_t flagid) { return NativeInvoke::Invoke<1710, std::to_underlying(NativeHashes::PED_QUEUE_CONSIDER_PEDS_WITH_FLAG_FALSE), void>(flagid); }
    static inline auto PedQueueConsiderPedsWithFlagTrue(int32_t flagid) { return NativeInvoke::Invoke<1711, std::to_underlying(NativeHashes::PED_QUEUE_CONSIDER_PEDS_WITH_FLAG_TRUE), void>(flagid); }
    static inline auto PedQueueRejectPedsWithFlagFalse(int32_t flagid) { return NativeInvoke::Invoke<1712, std::to_underlying(NativeHashes::PED_QUEUE_REJECT_PEDS_WITH_FLAG_FALSE), void>(flagid); }
    static inline auto PedQueueRejectPedsWithFlagTrue(int32_t flagid) { return NativeInvoke::Invoke<1713, std::to_underlying(NativeHashes::PED_QUEUE_REJECT_PEDS_WITH_FLAG_TRUE), void>(flagid); }
    static inline auto PickupsPassTime(uint32_t time) { return NativeInvoke::Invoke<1714, std::to_underlying(NativeHashes::PICKUPS_PASS_TIME), void>(time); }
    static inline auto PlaceObjectRelativeToCar(Object obj, Car car, float x, float y, float z) { return NativeInvoke::Invoke<1715, std::to_underlying(NativeHashes::PLACE_OBJECT_RELATIVE_TO_CAR), void>(obj, car, x, y, z); }
    static inline auto PlaneStartsInAir(Vehicle plain) { return NativeInvoke::Invoke<1716, std::to_underlying(NativeHashes::PLANE_STARTS_IN_AIR), void>(plain); }
    static inline auto PlayAudioEvent(char* name) { return NativeInvoke::Invoke<1717, std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT), void>(name); }
    static inline auto PlayAudioEventFromObject(char* EventName, Object obj) { return NativeInvoke::Invoke<1718, std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT_FROM_OBJECT), void>(EventName, obj); }
    static inline auto PlayAudioEventFromPed(char* name, Ped ped) { return NativeInvoke::Invoke<1719, std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT_FROM_PED), void>(name, ped); }
    static inline auto PlayAudioEventFromVehicle(char* name, Vehicle veh) { return NativeInvoke::Invoke<1720, std::to_underlying(NativeHashes::PLAY_AUDIO_EVENT_FROM_VEHICLE), void>(name, veh); }
    static inline auto PlayCarAnim(Car car, char* animname0, char* animname1, float a4, bool flag0, bool flag1) { return NativeInvoke::Invoke<1721, std::to_underlying(NativeHashes::PLAY_CAR_ANIM), bool>(car, animname0, animname1, a4, flag0, flag1); }
    static inline auto PlayFireSoundFromPosition(int32_t sound_id, float x, float y, float z) { return NativeInvoke::Invoke<1722, std::to_underlying(NativeHashes::PLAY_FIRE_SOUND_FROM_POSITION), void>(sound_id, x, y, z); }
    static inline auto PlayMovie() { return NativeInvoke::Invoke<1723, std::to_underlying(NativeHashes::PLAY_MOVIE), void>(); }
    static inline auto PlayObjectAnim(Object obj, char* animname0, char* animname1, float unk, bool flag0, bool flag1) { return NativeInvoke::Invoke<1724, std::to_underlying(NativeHashes::PLAY_OBJECT_ANIM), bool>(obj, animname0, animname1, unk, flag0, flag1); }
    static inline auto PlayScriptedConversationFrontend(bool play) { return NativeInvoke::Invoke<1725, std::to_underlying(NativeHashes::PLAY_SCRIPTED_CONVERSATION_FRONTEND), void>(play); }
    static inline auto PlaySound(int32_t SoundId, char* SoundName) { return NativeInvoke::Invoke<1726, std::to_underlying(NativeHashes::PLAY_SOUND), void>(SoundId, SoundName); }
    static inline auto PlaySoundFromObject(int32_t sound_id, char* name, Object obj) { return NativeInvoke::Invoke<1727, std::to_underlying(NativeHashes::PLAY_SOUND_FROM_OBJECT), void>(sound_id, name, obj); }
    static inline auto PlaySoundFromPed(int32_t SoundId, char* SoundName, Ped ped) { return NativeInvoke::Invoke<1728, std::to_underlying(NativeHashes::PLAY_SOUND_FROM_PED), void>(SoundId, SoundName, ped); }
    static inline auto PlaySoundFromPosition(int32_t sound_id, char* name, float x, float y, float z) { return NativeInvoke::Invoke<1729, std::to_underlying(NativeHashes::PLAY_SOUND_FROM_POSITION), void>(sound_id, name, x, y, z); }
    static inline auto PlaySoundFromVehicle(int32_t SoundId, char* SoundName, Vehicle veh) { return NativeInvoke::Invoke<1730, std::to_underlying(NativeHashes::PLAY_SOUND_FROM_VEHICLE), void>(SoundId, SoundName, veh); }
    static inline auto PlaySoundFrontend(uint32_t sound, char* soundName) { return NativeInvoke::Invoke<1731, std::to_underlying(NativeHashes::PLAY_SOUND_FRONTEND), void>(sound, soundName); }
    static inline auto PlayStreamFromObject(Object obj) { return NativeInvoke::Invoke<1732, std::to_underlying(NativeHashes::PLAY_STREAM_FROM_OBJECT), void>(obj); }
    static inline auto PlayStreamFromPed(Ped ped) { return NativeInvoke::Invoke<1733, std::to_underlying(NativeHashes::PLAY_STREAM_FROM_PED), void>(ped); }
    static inline auto PlayStreamFrontend() { return NativeInvoke::Invoke<1734, std::to_underlying(NativeHashes::PLAY_STREAM_FRONTEND), void>(); }
    static inline auto PlayerHasChar(Player playerIndex) { return NativeInvoke::Invoke<1735, std::to_underlying(NativeHashes::PLAYER_HAS_CHAR), bool>(playerIndex); }
    static inline auto PlayerHasFlashingStarAfterOffence() { return NativeInvoke::Invoke<1736, std::to_underlying(NativeHashes::PLAYER_HAS_FLASHING_STAR_AFTER_OFFENCE), Any>(); }
    static inline auto PlayerHasFlashingStarsAboutToDrop(Player playerIndex) { return NativeInvoke::Invoke<1737, std::to_underlying(NativeHashes::PLAYER_HAS_FLASHING_STARS_ABOUT_TO_DROP), bool>(playerIndex); }
    static inline auto PlayerHasGreyedOutStars(Player playerIndex) { return NativeInvoke::Invoke<1738, std::to_underlying(NativeHashes::PLAYER_HAS_GREYED_OUT_STARS), bool>(playerIndex); }
    static inline auto PlayerIsInteractingWithGarage() { return NativeInvoke::Invoke<1739, std::to_underlying(NativeHashes::PLAYER_IS_INTERACTING_WITH_GARAGE), bool>(); }
    static inline auto PlayerIsNearFirstPigeon(float x, float y, float z) { return NativeInvoke::Invoke<1740, std::to_underlying(NativeHashes::PLAYER_IS_NEAR_FIRST_PIGEON), bool>(x, y, z); }
    static inline auto PlayerIsPissedOff(int32_t player) { return NativeInvoke::Invoke<1741, std::to_underlying(NativeHashes::PLAYER_IS_PISSED_OFF), bool>(player); }
    static inline auto PlayerWantsToJoinNetworkGame(Any a1) { return NativeInvoke::Invoke<1742, std::to_underlying(NativeHashes::PLAYER_WANTS_TO_JOIN_NETWORK_GAME), Any>(a1); }
    static inline auto PlaystatsCheat(int32_t stat) { return NativeInvoke::Invoke<1743, std::to_underlying(NativeHashes::PLAYSTATS_CHEAT), void>(stat); }
    static inline auto PlaystatsFloat(int a1, float a2) { return NativeInvoke::Invoke<1744, std::to_underlying(NativeHashes::PLAYSTATS_FLOAT), void>(a1, a2); }
    static inline auto PlaystatsInt(Any a1, int a2) { return NativeInvoke::Invoke<1745, std::to_underlying(NativeHashes::PLAYSTATS_INT), void>(a1, a2); }
    static inline auto PlaystatsIntFloat(Any a1, int a2, float a3) { return NativeInvoke::Invoke<1746, std::to_underlying(NativeHashes::PLAYSTATS_INT_FLOAT), void>(a1, a2, a3); }
    static inline auto PlaystatsIntInt(Any a1, int a2, int a3) { return NativeInvoke::Invoke<1747, std::to_underlying(NativeHashes::PLAYSTATS_INT_INT), void>(a1, a2, a3); }
    static inline auto PlaystatsMissionCancelled(int a1) { return NativeInvoke::Invoke<1748, std::to_underlying(NativeHashes::PLAYSTATS_MISSION_CANCELLED), void>(a1); }
    static inline auto PlaystatsMissionFailed(int a1) { return NativeInvoke::Invoke<1749, std::to_underlying(NativeHashes::PLAYSTATS_MISSION_FAILED), void>(a1); }
    static inline auto PlaystatsMissionPassed(char* a1) { return NativeInvoke::Invoke<1750, std::to_underlying(NativeHashes::PLAYSTATS_MISSION_PASSED), void>(a1); }
    static inline auto PlaystatsMissionStarted(int a1) { return NativeInvoke::Invoke<1751, std::to_underlying(NativeHashes::PLAYSTATS_MISSION_STARTED), void>(a1); }
    static inline auto PointCamAtCam(int32_t cam, int32_t camnext) { return NativeInvoke::Invoke<1752, std::to_underlying(NativeHashes::POINT_CAM_AT_CAM), void>(cam, camnext); }
    static inline auto PointCamAtCoord(int32_t cam, float x, float y, float z) { return NativeInvoke::Invoke<1753, std::to_underlying(NativeHashes::POINT_CAM_AT_COORD), void>(cam, x, y, z); }
    static inline auto PointCamAtObject(int32_t cam, Object obj) { return NativeInvoke::Invoke<1754, std::to_underlying(NativeHashes::POINT_CAM_AT_OBJECT), void>(cam, obj); }
    static inline auto PointCamAtPed(int32_t cam, Ped ped) { return NativeInvoke::Invoke<1755, std::to_underlying(NativeHashes::POINT_CAM_AT_PED), void>(cam, ped); }
    static inline auto PointCamAtVehicle(int32_t cam, Vehicle veh) { return NativeInvoke::Invoke<1756, std::to_underlying(NativeHashes::POINT_CAM_AT_VEHICLE), void>(cam, veh); }
    static inline auto PointFixedCam(float x, float y, float z, int a4) { return NativeInvoke::Invoke<1757, std::to_underlying(NativeHashes::POINT_FIXED_CAM), void>(x, y, z, a4); }
    static inline auto PointFixedCamAtObj(Object obj, int32_t cam) { return NativeInvoke::Invoke<1758, std::to_underlying(NativeHashes::POINT_FIXED_CAM_AT_OBJ), void>(obj, cam); }
    static inline auto PointFixedCamAtPed(Ped ped, int32_t cam) { return NativeInvoke::Invoke<1759, std::to_underlying(NativeHashes::POINT_FIXED_CAM_AT_PED), void>(ped, cam); }
    static inline auto PointFixedCamAtPos(float x, float y, float z, int32_t cam) { return NativeInvoke::Invoke<1760, std::to_underlying(NativeHashes::POINT_FIXED_CAM_AT_POS), void>(x, y, z, cam); }
    static inline auto PointFixedCamAtVehicle(Vehicle veh, int32_t cam) { return NativeInvoke::Invoke<1761, std::to_underlying(NativeHashes::POINT_FIXED_CAM_AT_VEHICLE), void>(veh, cam); }
    static inline auto PopCarBoot(Vehicle vehicle) { return NativeInvoke::Invoke<1762, std::to_underlying(NativeHashes::POP_CAR_BOOT), void>(vehicle); }
    static inline auto PopulateNow() { return NativeInvoke::Invoke<1763, std::to_underlying(NativeHashes::POPULATE_NOW), void>(); }
    static inline auto Pow(float base, float power) { return NativeInvoke::Invoke<1764, std::to_underlying(NativeHashes::POW), float>(base, power); }
    static inline auto PreloadStream(char* name) { return NativeInvoke::Invoke<1765, std::to_underlying(NativeHashes::PRELOAD_STREAM), bool>(name); }
    static inline auto PreloadStreamWithStartOffset(char* StreamName, int32_t StartOffset) { return NativeInvoke::Invoke<1766, std::to_underlying(NativeHashes::PRELOAD_STREAM_WITH_START_OFFSET), bool>(StreamName, StartOffset); }
    static inline auto PreviewRingtone(int32_t RingtoneId) { return NativeInvoke::Invoke<1767, std::to_underlying(NativeHashes::PREVIEW_RINGTONE), void>(RingtoneId); }
    static inline auto Print(char* gxtName, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1768, std::to_underlying(NativeHashes::PRINT), void>(gxtName, timeMS, enable); }
    static inline auto PrintBig(char* gxtName, uint32_t timeMS, uint8_t style) { return NativeInvoke::Invoke<1769, std::to_underlying(NativeHashes::PRINT_BIG), void>(gxtName, timeMS, style); }
    static inline auto PrintBigQ(char* gxtentry, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1770, std::to_underlying(NativeHashes::PRINT_BIG_Q), void>(gxtentry, time, flag); }
    static inline auto PrintHelp(char* gxtName) { return NativeInvoke::Invoke<1771, std::to_underlying(NativeHashes::PRINT_HELP), void>(gxtName); }
    static inline auto PrintHelpForever(char* gxtName) { return NativeInvoke::Invoke<1772, std::to_underlying(NativeHashes::PRINT_HELP_FOREVER), void>(gxtName); }
    static inline auto PrintHelpForeverWithNumber(char* gxtName, int32_t value) { return NativeInvoke::Invoke<1773, std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_NUMBER), void>(gxtName, value); }
    static inline auto PrintHelpForeverWithString(char* gxtName, char* gxtText) { return NativeInvoke::Invoke<1774, std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_STRING), void>(gxtName, gxtText); }
    static inline auto PrintHelpForeverWithStringNoSound(char* gxtName, char* gxtText) { return NativeInvoke::Invoke<1775, std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND), void>(gxtName, gxtText); }
    static inline auto PrintHelpForeverWithTwoNumbers(char* gxtentry, int a2, int a3) { return NativeInvoke::Invoke<1776, std::to_underlying(NativeHashes::PRINT_HELP_FOREVER_WITH_TWO_NUMBERS), void>(gxtentry, a2, a3); }
    static inline auto PrintHelpOverFrontend(char* gxtentry) { return NativeInvoke::Invoke<1777, std::to_underlying(NativeHashes::PRINT_HELP_OVER_FRONTEND), void>(gxtentry); }
    static inline auto PrintHelpWithNumber(char* gxtName, int32_t value) { return NativeInvoke::Invoke<1778, std::to_underlying(NativeHashes::PRINT_HELP_WITH_NUMBER), void>(gxtName, value); }
    static inline auto PrintHelpWithString(char* gxtName, char* gxtText) { return NativeInvoke::Invoke<1779, std::to_underlying(NativeHashes::PRINT_HELP_WITH_STRING), void>(gxtName, gxtText); }
    static inline auto PrintHelpWithStringNoSound(char* gxtName, char* gxtText) { return NativeInvoke::Invoke<1780, std::to_underlying(NativeHashes::PRINT_HELP_WITH_STRING_NO_SOUND), void>(gxtName, gxtText); }
    static inline auto PrintHelpWithTwoNumbers(char* gxtentry, int a2, int a3) { return NativeInvoke::Invoke<1781, std::to_underlying(NativeHashes::PRINT_HELP_WITH_TWO_NUMBERS), void>(gxtentry, a2, a3); }
    static inline auto PrintMissionDescription() { return NativeInvoke::Invoke<1782, std::to_underlying(NativeHashes::PRINT_MISSION_DESCRIPTION), Any>(); }
    static inline auto PrintNow(char* gxtName, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1783, std::to_underlying(NativeHashes::PRINT_NOW), void>(gxtName, timeMS, enable); }
    static inline auto PrintStringInString(char* gxtName, char* gxtText, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1784, std::to_underlying(NativeHashes::PRINT_STRING_IN_STRING), void>(gxtName, gxtText, timeMS, enable); }
    static inline auto PrintStringInStringNow(char* gxtName, char* gxtText, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1785, std::to_underlying(NativeHashes::PRINT_STRING_IN_STRING_NOW), void>(gxtName, gxtText, timeMS, enable); }
    static inline auto PrintStringWithLiteralString(char* gxtentry, char* string, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1786, std::to_underlying(NativeHashes::PRINT_STRING_WITH_LITERAL_STRING), void>(gxtentry, string, time, flag); }
    static inline auto PrintStringWithLiteralStringNow(char* gxtName, void* text, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1787, std::to_underlying(NativeHashes::PRINT_STRING_WITH_LITERAL_STRING_NOW), void>(gxtName, text, timeMS, enable); }
    static inline auto PrintStringWithSubstringGivenHashKeyNow(char* gxtkey0, uint32_t gxtkey1, int32_t time, int32_t style) { return NativeInvoke::Invoke<1788, std::to_underlying(NativeHashes::PRINT_STRING_WITH_SUBSTRING_GIVEN_HASH_KEY_NOW), void>(gxtkey0, gxtkey1, time, style); }
    static inline auto PrintStringWithTwoLiteralStrings(char* gxtentry, char* string1, char* string2, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1789, std::to_underlying(NativeHashes::PRINT_STRING_WITH_TWO_LITERAL_STRINGS), void>(gxtentry, string1, string2, time, flag); }
    static inline auto PrintStringWithTwoLiteralStringsNow(char* gxtentry, char* string1, char* string2, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1790, std::to_underlying(NativeHashes::PRINT_STRING_WITH_TWO_LITERAL_STRINGS_NOW), void>(gxtentry, string1, string2, time, flag); }
    static inline auto PrintWith2Numbers(char* gxtName, int32_t value1, int32_t value2, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1791, std::to_underlying(NativeHashes::PRINT_WITH_2_NUMBERS), void>(gxtName, value1, value2, timeMS, enable); }
    static inline auto PrintWith2NumbersBig(char* gxtentry, int a2, int a3, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1792, std::to_underlying(NativeHashes::PRINT_WITH_2_NUMBERS_BIG), void>(gxtentry, a2, a3, time, flag); }
    static inline auto PrintWith2NumbersNow(char* gxtName, int32_t value1, int32_t value2, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1793, std::to_underlying(NativeHashes::PRINT_WITH_2_NUMBERS_NOW), void>(gxtName, value1, value2, timeMS, enable); }
    static inline auto PrintWith3Numbers(char* gxtentry, int a2, int a3, int a4, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1794, std::to_underlying(NativeHashes::PRINT_WITH_3_NUMBERS), void>(gxtentry, a2, a3, a4, time, flag); }
    static inline auto PrintWith3NumbersNow(char* gxtentry, int a2, int a3, int a4, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1795, std::to_underlying(NativeHashes::PRINT_WITH_3_NUMBERS_NOW), void>(gxtentry, a2, a3, a4, time, flag); }
    static inline auto PrintWith4Numbers(char* gxtentry, int a2, int a3, int a4, int a5, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1796, std::to_underlying(NativeHashes::PRINT_WITH_4_NUMBERS), void>(gxtentry, a2, a3, a4, a5, time, flag); }
    static inline auto PrintWith4NumbersNow(char* gxtentry, int a2, int a3, int a4, int a5, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1797, std::to_underlying(NativeHashes::PRINT_WITH_4_NUMBERS_NOW), void>(gxtentry, a2, a3, a4, a5, time, flag); }
    static inline auto PrintWith5Numbers(char* gxtentry, int a2, int a3, int a4, int a5, int a6, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1798, std::to_underlying(NativeHashes::PRINT_WITH_5_NUMBERS), void>(gxtentry, a2, a3, a4, a5, a6, time, flag); }
    static inline auto PrintWith5NumbersNow(char* gxtentry, int a2, int a3, int a4, int a5, int a6, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1799, std::to_underlying(NativeHashes::PRINT_WITH_5_NUMBERS_NOW), void>(gxtentry, a2, a3, a4, a5, a6, time, flag); }
    static inline auto PrintWith6Numbers(char* gxtentry, int a2, int a3, int a4, int a5, int a6, int a7, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1800, std::to_underlying(NativeHashes::PRINT_WITH_6_NUMBERS), void>(gxtentry, a2, a3, a4, a5, a6, a7, time, flag); }
    static inline auto PrintWith6NumbersNow(char* gxtentry, int a2, int a3, int a4, int a5, int a6, int a7, int32_t time, int32_t flag) { return NativeInvoke::Invoke<1801, std::to_underlying(NativeHashes::PRINT_WITH_6_NUMBERS_NOW), void>(gxtentry, a2, a3, a4, a5, a6, a7, time, flag); }
    static inline auto PrintWithNumber(char* gxtName, int32_t value, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1802, std::to_underlying(NativeHashes::PRINT_WITH_NUMBER), void>(gxtName, value, timeMS, enable); }
    static inline auto PrintWithNumberBig(char* gxtName, int32_t value, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1803, std::to_underlying(NativeHashes::PRINT_WITH_NUMBER_BIG), void>(gxtName, value, timeMS, enable); }
    static inline auto PrintWithNumberNow(char* gxtName, int32_t value, uint32_t timeMS, bool enable) { return NativeInvoke::Invoke<1804, std::to_underlying(NativeHashes::PRINT_WITH_NUMBER_NOW), void>(gxtName, value, timeMS, enable); }
    static inline auto Printfloat(float value) { return NativeInvoke::Invoke<1805, std::to_underlying(NativeHashes::PRINTFLOAT), void>(value); }
    static inline auto Printfloat2() { return NativeInvoke::Invoke<1806, std::to_underlying(NativeHashes::PRINTFLOAT2), Any>(); }
    static inline auto Printint(int32_t value) { return NativeInvoke::Invoke<1807, std::to_underlying(NativeHashes::PRINTINT), void>(value); }
    static inline auto Printint2() { return NativeInvoke::Invoke<1808, std::to_underlying(NativeHashes::PRINTINT2), Any>(); }
    static inline auto Printnl() { return NativeInvoke::Invoke<1809, std::to_underlying(NativeHashes::PRINTNL), void>(); }
    static inline auto Printstring(char* value) { return NativeInvoke::Invoke<1810, std::to_underlying(NativeHashes::PRINTSTRING), void>(value); }
    static inline auto Printvector(float x, float y, float z) { return NativeInvoke::Invoke<1811, std::to_underlying(NativeHashes::PRINTVECTOR), void>(x, y, z); }
    static inline auto PrioritizeStreamingRequest() { return NativeInvoke::Invoke<1812, std::to_underlying(NativeHashes::PRIORITIZE_STREAMING_REQUEST), void>(); }
    static inline auto ProcessMissionDeletionList() { return NativeInvoke::Invoke<1813, std::to_underlying(NativeHashes::PROCESS_MISSION_DELETION_LIST), void>(); }
    static inline auto ProstituteCamActivate(bool activate) { return NativeInvoke::Invoke<1814, std::to_underlying(NativeHashes::PROSTITUTE_CAM_ACTIVATE), void>(activate); }
    static inline auto RegisterBestPosition(int a1, int32_t position) { return NativeInvoke::Invoke<1815, std::to_underlying(NativeHashes::REGISTER_BEST_POSITION), void>(a1, position); }
    static inline auto RegisterTrackNumber(int32_t number) { return NativeInvoke::Invoke<1816, std::to_underlying(NativeHashes::REGISTER_TRACK_NUMBER), void>(number); }
    static inline auto ReadKillFrenzyStatus() { return NativeInvoke::Invoke<1817, std::to_underlying(NativeHashes::READ_KILL_FRENZY_STATUS), int32_t>(); }
    static inline auto ReadLobbyPreference() { return NativeInvoke::Invoke<1818, std::to_underlying(NativeHashes::READ_LOBBY_PREFERENCE), Any>(); }
    static inline auto RegisterClientBroadcastVariables(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<1819, std::to_underlying(NativeHashes::REGISTER_CLIENT_BROADCAST_VARIABLES), void>(a1, a2, a3); }
    static inline auto RegisterFloatStat(int32_t stat, float val) { return NativeInvoke::Invoke<1820, std::to_underlying(NativeHashes::REGISTER_FLOAT_STAT), void>(stat, val); }
    static inline auto RegisterHatedTargetsAroundPed(Ped ped, float radius) { return NativeInvoke::Invoke<1821, std::to_underlying(NativeHashes::REGISTER_HATED_TARGETS_AROUND_PED), void>(ped, radius); }
    static inline auto RegisterHatedTargetsInArea(Ped a1, float x, float y, float z, float radius) { return NativeInvoke::Invoke<1822, std::to_underlying(NativeHashes::REGISTER_HATED_TARGETS_IN_AREA), void>(a1, x, y, z, radius); }
    static inline auto RegisterHostBroadcastVariables(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<1823, std::to_underlying(NativeHashes::REGISTER_HOST_BROADCAST_VARIABLES), void>(a1, a2, a3); }
    static inline auto RegisterIntStat(int32_t stat, int32_t val) { return NativeInvoke::Invoke<1824, std::to_underlying(NativeHashes::REGISTER_INT_STAT), void>(stat, val); }
    static inline auto RegisterKillInMultiplayerGame(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<1825, std::to_underlying(NativeHashes::REGISTER_KILL_IN_MULTIPLAYER_GAME), void>(a1, a2, a3); }
    static inline auto RegisterMissionPassed(char* a1) { return NativeInvoke::Invoke<1826, std::to_underlying(NativeHashes::REGISTER_MISSION_PASSED), void>(a1); }
    static inline auto RegisterMod() { return NativeInvoke::Invoke<1827, std::to_underlying(NativeHashes::REGISTER_MOD), Any>(); }
    static inline auto RegisterModelForRankPoints() { return NativeInvoke::Invoke<1828, std::to_underlying(NativeHashes::REGISTER_MODEL_FOR_RANK_POINTS), Any>(); }
    static inline auto RegisterMultiplayerGameWin(Any a1, Any a2) { return NativeInvoke::Invoke<1829, std::to_underlying(NativeHashes::REGISTER_MULTIPLAYER_GAME_WIN), void>(a1, a2); }
    static inline auto RegisterNetworkBestGameScores(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<1830, std::to_underlying(NativeHashes::REGISTER_NETWORK_BEST_GAME_SCORES), void>(a1, a2, a3); }
    static inline auto RegisterOddjobMissionPassed() { return NativeInvoke::Invoke<1831, std::to_underlying(NativeHashes::REGISTER_ODDJOB_MISSION_PASSED), void>(); }
    static inline auto RegisterPlayerRespawnCoords(Player playerIndex, float x, float y, float z) { return NativeInvoke::Invoke<1832, std::to_underlying(NativeHashes::REGISTER_PLAYER_RESPAWN_COORDS), void>(playerIndex, x, y, z); }
    static inline auto RegisterSaveHouse(float x, float y, float z, float unkf, char* name, uint32_t unku) { return NativeInvoke::Invoke<1833, std::to_underlying(NativeHashes::REGISTER_SAVE_HOUSE), uint32_t>(x, y, z, unkf, name, unku); }
    static inline auto RegisterScriptWithAudio(bool reg) { return NativeInvoke::Invoke<1834, std::to_underlying(NativeHashes::REGISTER_SCRIPT_WITH_AUDIO), void>(reg); }
    static inline auto RegisterStringForFrontendStat(int32_t stat, char* str) { return NativeInvoke::Invoke<1835, std::to_underlying(NativeHashes::REGISTER_STRING_FOR_FRONTEND_STAT), void>(stat, str); }
    static inline auto RegisterTarget(Ped ped, Ped target) { return NativeInvoke::Invoke<1836, std::to_underlying(NativeHashes::REGISTER_TARGET), void>(ped, target); }
    static inline auto RegisterWorldPointScriptBrain(char* ScriptName, float radius) { return NativeInvoke::Invoke<1837, std::to_underlying(NativeHashes::REGISTER_WORLD_POINT_SCRIPT_BRAIN), void>(ScriptName, radius); }
    static inline auto ReleaseEntityFromRopeForObject() { return NativeInvoke::Invoke<1838, std::to_underlying(NativeHashes::RELEASE_ENTITY_FROM_ROPE_FOR_OBJECT), Any>(); }
    static inline auto ReleaseMovie() { return NativeInvoke::Invoke<1839, std::to_underlying(NativeHashes::RELEASE_MOVIE), void>(); }
    static inline auto ReleasePathNodes() { return NativeInvoke::Invoke<1840, std::to_underlying(NativeHashes::RELEASE_PATH_NODES), void>(); }
    static inline auto ReleaseScriptControlledMicrophone() { return NativeInvoke::Invoke<1841, std::to_underlying(NativeHashes::RELEASE_SCRIPT_CONTROLLED_MICROPHONE), void>(); }
    static inline auto ReleaseSoundId(uint32_t sound) { return NativeInvoke::Invoke<1842, std::to_underlying(NativeHashes::RELEASE_SOUND_ID), void>(sound); }
    static inline auto ReleaseTexture(Texture texture) { return NativeInvoke::Invoke<1843, std::to_underlying(NativeHashes::RELEASE_TEXTURE), void>(texture); }
    static inline auto ReleaseTimeOfDay() { return NativeInvoke::Invoke<1844, std::to_underlying(NativeHashes::RELEASE_TIME_OF_DAY), void>(); }
    static inline auto ReleaseTwoPlayerDistance() { return NativeInvoke::Invoke<1845, std::to_underlying(NativeHashes::RELEASE_TWO_PLAYER_DISTANCE), Any>(); }
    static inline auto ReleaseWeather() { return NativeInvoke::Invoke<1846, std::to_underlying(NativeHashes::RELEASE_WEATHER), void>(); }
    static inline auto ReloadWebPage(int32_t htmlviewport) { return NativeInvoke::Invoke<1847, std::to_underlying(NativeHashes::RELOAD_WEB_PAGE), void>(htmlviewport); }
    static inline auto RemoveAdditionalPopulationModel(uint32_t model) { return NativeInvoke::Invoke<1848, std::to_underlying(NativeHashes::REMOVE_ADDITIONAL_POPULATION_MODEL), void>(model); }
    static inline auto RemoveAllCharWeapons(Ped ped) { return NativeInvoke::Invoke<1849, std::to_underlying(NativeHashes::REMOVE_ALL_CHAR_WEAPONS), void>(ped); }
    static inline auto RemoveAllInactiveGroupsFromCleanupList() { return NativeInvoke::Invoke<1850, std::to_underlying(NativeHashes::REMOVE_ALL_INACTIVE_GROUPS_FROM_CLEANUP_LIST), void>(); }
    static inline auto RemoveAllNetworkRestartPoints() { return NativeInvoke::Invoke<1851, std::to_underlying(NativeHashes::REMOVE_ALL_NETWORK_RESTART_POINTS), Any>(); }
    static inline auto RemoveAllPickupsOfType(uint32_t type) { return NativeInvoke::Invoke<1852, std::to_underlying(NativeHashes::REMOVE_ALL_PICKUPS_OF_TYPE), void>(type); }
    static inline auto RemoveAllScriptFires() { return NativeInvoke::Invoke<1853, std::to_underlying(NativeHashes::REMOVE_ALL_SCRIPT_FIRES), Any>(); }
    static inline auto RemoveAnims(char* animName) { return NativeInvoke::Invoke<1854, std::to_underlying(NativeHashes::REMOVE_ANIMS), void>(animName); }
    static inline auto RemoveBlip(Blip blip) { return NativeInvoke::Invoke<1855, std::to_underlying(NativeHashes::REMOVE_BLIP), void>(blip); }
    static inline auto RemoveBlipAndClearIndex(int32_t blip) { return NativeInvoke::Invoke<1856, std::to_underlying(NativeHashes::REMOVE_BLIP_AND_CLEAR_INDEX), void>(blip); }
    static inline auto RemoveCarRecording(int32_t CarRec) { return NativeInvoke::Invoke<1857, std::to_underlying(NativeHashes::REMOVE_CAR_RECORDING), void>(CarRec); }
    static inline auto RemoveCarWindow(Car car, int32_t windnum) { return NativeInvoke::Invoke<1858, std::to_underlying(NativeHashes::REMOVE_CAR_WINDOW), void>(car, windnum); }
    static inline auto RemoveCarsFromGeneratorsInArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<1859, std::to_underlying(NativeHashes::REMOVE_CARS_FROM_GENERATORS_IN_AREA), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto RemoveCharDefensiveArea(Ped ped) { return NativeInvoke::Invoke<1860, std::to_underlying(NativeHashes::REMOVE_CHAR_DEFENSIVE_AREA), void>(ped); }
    static inline auto RemoveCharElegantly(Ped ped) { return NativeInvoke::Invoke<1861, std::to_underlying(NativeHashes::REMOVE_CHAR_ELEGANTLY), void>(ped); }
    static inline auto RemoveCharFromCarMaintainPosition(Ped ped, Car car) { return NativeInvoke::Invoke<1862, std::to_underlying(NativeHashes::REMOVE_CHAR_FROM_CAR_MAINTAIN_POSITION), void>(ped, car); }
    static inline auto RemoveCharFromGroup(Ped ped) { return NativeInvoke::Invoke<1863, std::to_underlying(NativeHashes::REMOVE_CHAR_FROM_GROUP), void>(ped); }
    static inline auto RemoveCloseMicPed(Ped ped) { return NativeInvoke::Invoke<1864, std::to_underlying(NativeHashes::REMOVE_CLOSE_MIC_PED), void>(ped); }
    static inline auto RemoveCoverPoint(CoverPoint coverPoint) { return NativeInvoke::Invoke<1865, std::to_underlying(NativeHashes::REMOVE_COVER_POINT), void>(coverPoint); }
    static inline auto RemoveDecisionMaker(DecisionMaker dm) { return NativeInvoke::Invoke<1866, std::to_underlying(NativeHashes::REMOVE_DECISION_MAKER), void>(dm); }
    static inline auto RemoveFakeNetworkNameFromPed(Ped ped) { return NativeInvoke::Invoke<1867, std::to_underlying(NativeHashes::REMOVE_FAKE_NETWORK_NAME_FROM_PED), void>(ped); }
    static inline auto RemoveGroup(Group group) { return NativeInvoke::Invoke<1868, std::to_underlying(NativeHashes::REMOVE_GROUP), void>(group); }
    static inline auto RemoveIpl(char* iplName) { return NativeInvoke::Invoke<1869, std::to_underlying(NativeHashes::REMOVE_IPL), void>(iplName); }
    static inline auto RemoveIplDiscreetly(char* iplname) { return NativeInvoke::Invoke<1870, std::to_underlying(NativeHashes::REMOVE_IPL_DISCREETLY), void>(iplname); }
    static inline auto RemoveNavmeshRequiredRegion(float a1, float a2) { return NativeInvoke::Invoke<1871, std::to_underlying(NativeHashes::REMOVE_NAVMESH_REQUIRED_REGION), bool>(a1, a2); }
    static inline auto RemovePedHelmet(Ped ped, bool removed) { return NativeInvoke::Invoke<1872, std::to_underlying(NativeHashes::REMOVE_PED_HELMET), void>(ped, removed); }
    static inline auto RemovePedQueue() { return NativeInvoke::Invoke<1873, std::to_underlying(NativeHashes::REMOVE_PED_QUEUE), Any>(); }
    static inline auto RemovePickup(Pickup pickup) { return NativeInvoke::Invoke<1874, std::to_underlying(NativeHashes::REMOVE_PICKUP), void>(pickup); }
    static inline auto RemovePlayerHelmet(Player playerIndex, bool remove) { return NativeInvoke::Invoke<1875, std::to_underlying(NativeHashes::REMOVE_PLAYER_HELMET), void>(playerIndex, remove); }
    static inline auto RemoveProjtexFromObject(Object obj) { return NativeInvoke::Invoke<1876, std::to_underlying(NativeHashes::REMOVE_PROJTEX_FROM_OBJECT), void>(obj); }
    static inline auto RemoveProjtexInRange(float x, float y, float z, float radius) { return NativeInvoke::Invoke<1877, std::to_underlying(NativeHashes::REMOVE_PROJTEX_IN_RANGE), void>(x, y, z, radius); }
    static inline auto RemovePtfx(uint32_t ptfx) { return NativeInvoke::Invoke<1878, std::to_underlying(NativeHashes::REMOVE_PTFX), void>(ptfx); }
    static inline auto RemovePtfxFromObject(Object obj) { return NativeInvoke::Invoke<1879, std::to_underlying(NativeHashes::REMOVE_PTFX_FROM_OBJECT), void>(obj); }
    static inline auto RemovePtfxFromPed(Ped ped) { return NativeInvoke::Invoke<1880, std::to_underlying(NativeHashes::REMOVE_PTFX_FROM_PED), void>(ped); }
    static inline auto RemovePtfxFromVehicle(Vehicle veh) { return NativeInvoke::Invoke<1881, std::to_underlying(NativeHashes::REMOVE_PTFX_FROM_VEHICLE), void>(veh); }
    static inline auto RemoveRcBuggy() { return NativeInvoke::Invoke<1882, std::to_underlying(NativeHashes::REMOVE_RC_BUGGY), Any>(); }
    static inline auto RemoveScriptFire(FireId fire) { return NativeInvoke::Invoke<1883, std::to_underlying(NativeHashes::REMOVE_SCRIPT_FIRE), void>(fire); }
    static inline auto RemoveScriptMic() { return NativeInvoke::Invoke<1884, std::to_underlying(NativeHashes::REMOVE_SCRIPT_MIC), void>(); }
    static inline auto RemoveSphere(uint32_t sphere) { return NativeInvoke::Invoke<1885, std::to_underlying(NativeHashes::REMOVE_SPHERE), void>(sphere); }
    static inline auto RemoveStuckCarCheck(Vehicle vehicle) { return NativeInvoke::Invoke<1886, std::to_underlying(NativeHashes::REMOVE_STUCK_CAR_CHECK), void>(vehicle); }
    static inline auto RemoveTemporaryRadarBlipsForPickups() { return NativeInvoke::Invoke<1887, std::to_underlying(NativeHashes::REMOVE_TEMPORARY_RADAR_BLIPS_FOR_PICKUPS), void>(); }
    static inline auto RemoveTxd(TextureDict txd) { return NativeInvoke::Invoke<1888, std::to_underlying(NativeHashes::REMOVE_TXD), void>(txd); }
    static inline auto RemoveUpsidedownCarCheck(Vehicle vehicle) { return NativeInvoke::Invoke<1889, std::to_underlying(NativeHashes::REMOVE_UPSIDEDOWN_CAR_CHECK), void>(vehicle); }
    static inline auto RemoveUser3dMarker(uint32_t marker) { return NativeInvoke::Invoke<1890, std::to_underlying(NativeHashes::REMOVE_USER_3D_MARKER), void>(marker); }
    static inline auto RemoveWeaponFromChar(Ped ped, uint32_t weapon) { return NativeInvoke::Invoke<1891, std::to_underlying(NativeHashes::REMOVE_WEAPON_FROM_CHAR), void>(ped, weapon); }
    static inline auto RenderLoadingClock() { return NativeInvoke::Invoke<1892, std::to_underlying(NativeHashes::RENDER_LOADING_CLOCK), Any>(); }
    static inline auto RenderRaceTrack(bool render) { return NativeInvoke::Invoke<1893, std::to_underlying(NativeHashes::RENDER_RACE_TRACK), void>(render); }
    static inline auto RenderRadiohudSpriteInLobby() { return NativeInvoke::Invoke<1894, std::to_underlying(NativeHashes::RENDER_RADIOHUD_SPRITE_IN_LOBBY), Any>(); }
    static inline auto RenderRadiohudSpriteInMobilePhone() { return NativeInvoke::Invoke<1895, std::to_underlying(NativeHashes::RENDER_RADIOHUD_SPRITE_IN_MOBILE_PHONE), Any>(); }
    static inline auto RenderWeaponPickupsBigger(bool value) { return NativeInvoke::Invoke<1896, std::to_underlying(NativeHashes::RENDER_WEAPON_PICKUPS_BIGGER), void>(value); }
    static inline auto ReportCrime(float x, float y, float z, char* name) { return NativeInvoke::Invoke<1897, std::to_underlying(NativeHashes::REPORT_CRIME), void>(x, y, z, name); }
    static inline auto ReportDispatch(int32_t id, float x, float y, float z) { return NativeInvoke::Invoke<1898, std::to_underlying(NativeHashes::REPORT_DISPATCH), void>(id, x, y, z); }
    static inline auto ReportPoliceSpottingSuspect(Vehicle veh) { return NativeInvoke::Invoke<1899, std::to_underlying(NativeHashes::REPORT_POLICE_SPOTTING_SUSPECT), void>(veh); }
    static inline auto ReportSuspectArrested() { return NativeInvoke::Invoke<1900, std::to_underlying(NativeHashes::REPORT_SUSPECT_ARRESTED), void>(); }
    static inline auto ReportSuspectDown() { return NativeInvoke::Invoke<1901, std::to_underlying(NativeHashes::REPORT_SUSPECT_DOWN), void>(); }
    static inline auto ReportTaggedRadioTrack(int32_t TrackTextId) { return NativeInvoke::Invoke<1902, std::to_underlying(NativeHashes::REPORT_TAGGED_RADIO_TRACK), void>(TrackTextId); }
    static inline auto RequestAdditionalText(char* textName, uint32_t textIndex) { return NativeInvoke::Invoke<1903, std::to_underlying(NativeHashes::REQUEST_ADDITIONAL_TEXT), void>(textName, textIndex); }
    static inline auto RequestAllSlodsInWorld() { return NativeInvoke::Invoke<1904, std::to_underlying(NativeHashes::REQUEST_ALL_SLODS_IN_WORLD), void>(); }
    static inline auto RequestAmbientAudioBank(char* name) { return NativeInvoke::Invoke<1905, std::to_underlying(NativeHashes::REQUEST_AMBIENT_AUDIO_BANK), bool>(name); }
    static inline auto RequestAnims(char* animName) { return NativeInvoke::Invoke<1906, std::to_underlying(NativeHashes::REQUEST_ANIMS), void>(animName); }
    static inline auto RequestCarRecording(int32_t CarRecId) { return NativeInvoke::Invoke<1907, std::to_underlying(NativeHashes::REQUEST_CAR_RECORDING), void>(CarRecId); }
    static inline auto RequestCollisionAtPosn(float x, float y, float z) { return NativeInvoke::Invoke<1908, std::to_underlying(NativeHashes::REQUEST_COLLISION_AT_POSN), void>(x, y, z); }
    static inline auto RequestCollisionForModel(uint32_t model) { return NativeInvoke::Invoke<1909, std::to_underlying(NativeHashes::REQUEST_COLLISION_FOR_MODEL), void>(model); }
    static inline auto RequestControlOfNetworkId(Any a1) { return NativeInvoke::Invoke<1910, std::to_underlying(NativeHashes::REQUEST_CONTROL_OF_NETWORK_ID), Any>(a1); }
    static inline auto RequestInteriorModels(uint32_t model, char* interiorName) { return NativeInvoke::Invoke<1911, std::to_underlying(NativeHashes::REQUEST_INTERIOR_MODELS), void>(model, interiorName); }
    static inline auto RequestIpl(char* iplName) { return NativeInvoke::Invoke<1912, std::to_underlying(NativeHashes::REQUEST_IPL), void>(iplName); }
    static inline auto RequestMissionAudioBank(char* name) { return NativeInvoke::Invoke<1913, std::to_underlying(NativeHashes::REQUEST_MISSION_AUDIO_BANK), bool>(name); }
    static inline auto RequestModel(uint32_t model) { return NativeInvoke::Invoke<1914, std::to_underlying(NativeHashes::REQUEST_MODEL), void>(model); }
    static inline auto RequestScript(char* scriptName) { return NativeInvoke::Invoke<1915, std::to_underlying(NativeHashes::REQUEST_SCRIPT), void>(scriptName); }
    static inline auto RequestStreamedTxd(char* txdName, bool unknown) { return NativeInvoke::Invoke<1916, std::to_underlying(NativeHashes::REQUEST_STREAMED_TXD), void>(txdName, unknown); }
    static inline auto ReserveNetworkMissionObjects(Any a1) { return NativeInvoke::Invoke<1917, std::to_underlying(NativeHashes::RESERVE_NETWORK_MISSION_OBJECTS), void>(a1); }
    static inline auto ReserveNetworkMissionObjectsForHost(Any a1) { return NativeInvoke::Invoke<1918, std::to_underlying(NativeHashes::RESERVE_NETWORK_MISSION_OBJECTS_FOR_HOST), void>(a1); }
    static inline auto ReserveNetworkMissionPeds(Any a1) { return NativeInvoke::Invoke<1919, std::to_underlying(NativeHashes::RESERVE_NETWORK_MISSION_PEDS), void>(a1); }
    static inline auto ReserveNetworkMissionPedsForHost(Any a1) { return NativeInvoke::Invoke<1920, std::to_underlying(NativeHashes::RESERVE_NETWORK_MISSION_PEDS_FOR_HOST), void>(a1); }
    static inline auto ReserveNetworkMissionVehicles(Any a1) { return NativeInvoke::Invoke<1921, std::to_underlying(NativeHashes::RESERVE_NETWORK_MISSION_VEHICLES), void>(a1); }
    static inline auto ReserveNetworkMissionVehiclesForHost(Any a1) { return NativeInvoke::Invoke<1922, std::to_underlying(NativeHashes::RESERVE_NETWORK_MISSION_VEHICLES_FOR_HOST), void>(a1); }
    static inline auto ResetAchievementsAward() { return NativeInvoke::Invoke<1923, std::to_underlying(NativeHashes::RESET_ACHIEVEMENTS_AWARD), void>(); }
    static inline auto ResetArmourPickupNetworkRegenTime() { return NativeInvoke::Invoke<1924, std::to_underlying(NativeHashes::RESET_ARMOUR_PICKUP_NETWORK_REGEN_TIME), Any>(); }
    static inline auto ResetCamInterpCustomSpeedGraph() { return NativeInvoke::Invoke<1925, std::to_underlying(NativeHashes::RESET_CAM_INTERP_CUSTOM_SPEED_GRAPH), void>(); }
    static inline auto ResetCamSplineCustomSpeedGraph() { return NativeInvoke::Invoke<1926, std::to_underlying(NativeHashes::RESET_CAM_SPLINE_CUSTOM_SPEED_GRAPH), void>(); }
    static inline auto ResetCarWheels(Car car, bool reset) { return NativeInvoke::Invoke<1927, std::to_underlying(NativeHashes::RESET_CAR_WHEELS), void>(car, reset); }
    static inline auto ResetConsoleCommand() { return NativeInvoke::Invoke<1928, std::to_underlying(NativeHashes::RESET_CONSOLE_COMMAND), Any>(); }
    static inline auto ResetHealthPickupNetworkRegenTime() { return NativeInvoke::Invoke<1929, std::to_underlying(NativeHashes::RESET_HEALTH_PICKUP_NETWORK_REGEN_TIME), Any>(); }
    static inline auto ResetLatestConsoleCommand() { return NativeInvoke::Invoke<1930, std::to_underlying(NativeHashes::RESET_LATEST_CONSOLE_COMMAND), Any>(); }
    static inline auto ResetLocalPlayerWeaponStat(int32_t wtype, int32_t wid) { return NativeInvoke::Invoke<1931, std::to_underlying(NativeHashes::RESET_LOCAL_PLAYER_WEAPON_STAT), void>(wtype, wid); }
    static inline auto ResetMoneyPickupNetworkRegenTime() { return NativeInvoke::Invoke<1932, std::to_underlying(NativeHashes::RESET_MONEY_PICKUP_NETWORK_REGEN_TIME), Any>(); }
    static inline auto ResetNetworkRestartNodeGroupMapping() { return NativeInvoke::Invoke<1933, std::to_underlying(NativeHashes::RESET_NETWORK_RESTART_NODE_GROUP_MAPPING), Any>(); }
    static inline auto ResetNoLawVehiclesDestroyedByLocalPlayer() { return NativeInvoke::Invoke<1934, std::to_underlying(NativeHashes::RESET_NO_LAW_VEHICLES_DESTROYED_BY_LOCAL_PLAYER), void>(); }
    static inline auto ResetNumOfModelsKilledByPlayer(uint32_t model) { return NativeInvoke::Invoke<1935, std::to_underlying(NativeHashes::RESET_NUM_OF_MODELS_KILLED_BY_PLAYER), void>(model); }
    static inline auto ResetStuckTimer(Car car, int32_t timer_num) { return NativeInvoke::Invoke<1936, std::to_underlying(NativeHashes::RESET_STUCK_TIMER), void>(car, timer_num); }
    static inline auto ResetVisiblePedDamage(Ped ped) { return NativeInvoke::Invoke<1937, std::to_underlying(NativeHashes::RESET_VISIBLE_PED_DAMAGE), void>(ped); }
    static inline auto ResetWeaponPickupNetworkRegenTime() { return NativeInvoke::Invoke<1938, std::to_underlying(NativeHashes::RESET_WEAPON_PICKUP_NETWORK_REGEN_TIME), Any>(); }
    static inline auto RestartScriptedConversation() { return NativeInvoke::Invoke<1939, std::to_underlying(NativeHashes::RESTART_SCRIPTED_CONVERSATION), void>(); }
    static inline auto RestoreScriptArrayFromScratchpad(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<1940, std::to_underlying(NativeHashes::RESTORE_SCRIPT_ARRAY_FROM_SCRATCHPAD), void>(a1, a2, a3, a4); }
    static inline auto RestoreScriptValuesForNetworkGame(Any a1) { return NativeInvoke::Invoke<1941, std::to_underlying(NativeHashes::RESTORE_SCRIPT_VALUES_FOR_NETWORK_GAME), Any>(a1); }
    static inline auto ResurrectNetworkPlayer(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<1942, std::to_underlying(NativeHashes::RESURRECT_NETWORK_PLAYER), void>(a1, a2, a3, a4, a5); }
    static inline auto RetuneRadioDown() { return NativeInvoke::Invoke<1943, std::to_underlying(NativeHashes::RETUNE_RADIO_DOWN), void>(); }
    static inline auto RetuneRadioToStationIndex(uint32_t radioStation) { return NativeInvoke::Invoke<1944, std::to_underlying(NativeHashes::RETUNE_RADIO_TO_STATION_INDEX), void>(radioStation); }
    static inline auto RetuneRadioToStationName(char* name) { return NativeInvoke::Invoke<1945, std::to_underlying(NativeHashes::RETUNE_RADIO_TO_STATION_NAME), void>(name); }
    static inline auto RetuneRadioUp() { return NativeInvoke::Invoke<1946, std::to_underlying(NativeHashes::RETUNE_RADIO_UP), void>(); }
    static inline auto ReviveInjuredPed(Ped ped) { return NativeInvoke::Invoke<1947, std::to_underlying(NativeHashes::REVIVE_INJURED_PED), void>(ped); }
    static inline auto RotateObject(Object obj, float x, float y, bool flag) { return NativeInvoke::Invoke<1948, std::to_underlying(NativeHashes::ROTATE_OBJECT), bool>(obj, x, y, flag); }
    static inline auto Round(float a1) { return NativeInvoke::Invoke<1949, std::to_underlying(NativeHashes::ROUND), int32_t>(a1); }
    static inline auto SetCameraState(int32_t cam, int32_t state) { return NativeInvoke::Invoke<1950, std::to_underlying(NativeHashes::SET_CAMERA_STATE), void>(cam, state); }
    static inline auto SetDefaultTargetScoringFunction(Ped ped, Any a2) { return NativeInvoke::Invoke<1951, std::to_underlying(NativeHashes::SET_DEFAULT_TARGET_SCORING_FUNCTION), void>(ped, a2); }
    static inline auto SetGroupDecisionMaker(Group group, DecisionMaker dm) { return NativeInvoke::Invoke<1952, std::to_underlying(NativeHashes::SET_GROUP_DECISION_MAKER), void>(group, dm); }
    static inline auto SetTextCentreWrapX(float wrapx) { return NativeInvoke::Invoke<1953, std::to_underlying(NativeHashes::SET_TEXT_CENTRE_WRAPX), void>(wrapx); }
    static inline auto SaveFloatToDebugFile(Any a1) { return NativeInvoke::Invoke<1954, std::to_underlying(NativeHashes::SAVE_FLOAT_TO_DEBUG_FILE), void>(a1); }
    static inline auto SaveIntToDebugFile(Any a1) { return NativeInvoke::Invoke<1955, std::to_underlying(NativeHashes::SAVE_INT_TO_DEBUG_FILE), void>(a1); }
    static inline auto SaveNewlineToDebugFile() { return NativeInvoke::Invoke<1956, std::to_underlying(NativeHashes::SAVE_NEWLINE_TO_DEBUG_FILE), void>(); }
    static inline auto SaveScriptArrayInScratchpad(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<1957, std::to_underlying(NativeHashes::SAVE_SCRIPT_ARRAY_IN_SCRATCHPAD), void>(a1, a2, a3, a4); }
    static inline auto SaveSettings() { return NativeInvoke::Invoke<1958, std::to_underlying(NativeHashes::SAVE_SETTINGS), void>(); }
    static inline auto SaveStringToDebugFile(Any a1) { return NativeInvoke::Invoke<1959, std::to_underlying(NativeHashes::SAVE_STRING_TO_DEBUG_FILE), void>(a1); }
    static inline auto SayAmbientSpeech(Ped ped, char* phraseName, bool flag0, bool flag1, int32_t style) { return NativeInvoke::Invoke<1960, std::to_underlying(NativeHashes::SAY_AMBIENT_SPEECH), void>(ped, phraseName, flag0, flag1, style); }
    static inline auto SayAmbientSpeechWithVoice(Ped ped, char* SpeechName, char* VoiceName, bool flag0, bool flag1, int32_t style) { return NativeInvoke::Invoke<1961, std::to_underlying(NativeHashes::SAY_AMBIENT_SPEECH_WITH_VOICE), void>(ped, SpeechName, VoiceName, flag0, flag1, style); }
    static inline auto ScriptAssert(Any a1) { return NativeInvoke::Invoke<1962, std::to_underlying(NativeHashes::SCRIPT_ASSERT), void>(a1); }
    static inline auto ScriptIsMovingMobilePhoneOffscreen(bool set) { return NativeInvoke::Invoke<1963, std::to_underlying(NativeHashes::SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN), void>(set); }
    static inline auto ScriptIsUsingMobilePhone(bool set) { return NativeInvoke::Invoke<1964, std::to_underlying(NativeHashes::SCRIPT_IS_USING_MOBILE_PHONE), void>(set); }
    static inline auto SearchCriteriaConsiderPedsWithFlagFalse(int32_t flagid) { return NativeInvoke::Invoke<1965, std::to_underlying(NativeHashes::SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_FALSE), void>(flagid); }
    static inline auto SearchCriteriaConsiderPedsWithFlagTrue(uint32_t flagId) { return NativeInvoke::Invoke<1966, std::to_underlying(NativeHashes::SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_TRUE), void>(flagId); }
    static inline auto SearchCriteriaRejectPedsWithFlagFalse(int32_t flagid) { return NativeInvoke::Invoke<1967, std::to_underlying(NativeHashes::SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_FALSE), void>(flagid); }
    static inline auto SearchCriteriaRejectPedsWithFlagTrue(uint32_t flagId) { return NativeInvoke::Invoke<1968, std::to_underlying(NativeHashes::SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_TRUE), void>(flagId); }
    static inline auto SecuromSpotCheck1() { return NativeInvoke::Invoke<1969, std::to_underlying(NativeHashes::SECUROM_SPOT_CHECK1), bool>(); }
    static inline auto SecuromSpotCheck2() { return NativeInvoke::Invoke<1970, std::to_underlying(NativeHashes::SECUROM_SPOT_CHECK2), bool>(); }
    static inline auto SecuromSpotCheck3() { return NativeInvoke::Invoke<1971, std::to_underlying(NativeHashes::SECUROM_SPOT_CHECK3), bool>(); }
    static inline auto SecuromSpotCheck4() { return NativeInvoke::Invoke<1972, std::to_underlying(NativeHashes::SECUROM_SPOT_CHECK4), bool>(); }
    static inline auto SelectWeaponsForVehicle(Vehicle veh, int32_t weapon) { return NativeInvoke::Invoke<1973, std::to_underlying(NativeHashes::SELECT_WEAPONS_FOR_VEHICLE), void>(veh, weapon); }
    static inline auto SendClientBroadcastVariablesNow() { return NativeInvoke::Invoke<1974, std::to_underlying(NativeHashes::SEND_CLIENT_BROADCAST_VARIABLES_NOW), void>(); }
    static inline auto SendHostBroadcastVariablesNow() { return NativeInvoke::Invoke<1975, std::to_underlying(NativeHashes::SEND_HOST_BROADCAST_VARIABLES_NOW), Any>(); }
    static inline auto SendNmMessage(Ped ped) { return NativeInvoke::Invoke<1976, std::to_underlying(NativeHashes::SEND_NM_MESSAGE), void>(ped); }
    static inline auto SetActivateObjectPhysicsAsSoonAsItIsUnfrozen(Object obj, bool set) { return NativeInvoke::Invoke<1977, std::to_underlying(NativeHashes::SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN), void>(obj, set); }
    static inline auto SetAdvancedBoolInDecisionMaker(int32_t dm, int a2, int a3, int a4, bool a5) { return NativeInvoke::Invoke<1978, std::to_underlying(NativeHashes::SET_ADVANCED_BOOL_IN_DECISION_MAKER), void>(dm, a2, a3, a4, a5); }
    static inline auto SetAllCarGeneratorsBackToActive() { return NativeInvoke::Invoke<1979, std::to_underlying(NativeHashes::SET_ALL_CAR_GENERATORS_BACK_TO_ACTIVE), void>(); }
    static inline auto SetAllCarsCanBeDamaged(bool set) { return NativeInvoke::Invoke<1980, std::to_underlying(NativeHashes::SET_ALL_CARS_CAN_BE_DAMAGED), void>(set); }
    static inline auto SetAllPedsSpawnedAreCops() { return NativeInvoke::Invoke<1981, std::to_underlying(NativeHashes::SET_ALL_PEDS_SPAWNED_ARE_COPS), Any>(); }
    static inline auto SetAllPickupsOfTypeCollectableByCar(int32_t pickuptype, bool set) { return NativeInvoke::Invoke<1982, std::to_underlying(NativeHashes::SET_ALL_PICKUPS_OF_TYPE_COLLECTABLE_BY_CAR), void>(pickuptype, set); }
    static inline auto SetAllRandomPedsFlee(int32_t player, bool set) { return NativeInvoke::Invoke<1983, std::to_underlying(NativeHashes::SET_ALL_RANDOM_PEDS_FLEE), void>(player, set); }
    static inline auto SetAllowDummyConversions(bool set) { return NativeInvoke::Invoke<1984, std::to_underlying(NativeHashes::SET_ALLOW_DUMMY_CONVERSIONS), void>(set); }
    static inline auto SetAlternativeHeadForPedQueue() { return NativeInvoke::Invoke<1985, std::to_underlying(NativeHashes::SET_ALTERNATIVE_HEAD_FOR_PED_QUEUE), Any>(); }
    static inline auto SetAlwaysDisplayWeaponPickupMessage(bool set) { return NativeInvoke::Invoke<1986, std::to_underlying(NativeHashes::SET_ALWAYS_DISPLAY_WEAPON_PICKUP_MESSAGE), void>(set); }
    static inline auto SetAmbientPlanesSpeedMultiplier(float multiplier) { return NativeInvoke::Invoke<1987, std::to_underlying(NativeHashes::SET_AMBIENT_PLANES_SPEED_MULTIPLIER), void>(multiplier); }
    static inline auto SetAmbientVoiceName(Ped ped, char* name) { return NativeInvoke::Invoke<1988, std::to_underlying(NativeHashes::SET_AMBIENT_VOICE_NAME), void>(ped, name); }
    static inline auto SetAmmoInClip(Ped ped, uint32_t weapon, uint32_t ammo) { return NativeInvoke::Invoke<1989, std::to_underlying(NativeHashes::SET_AMMO_IN_CLIP), Any>(ped, weapon, ammo); }
    static inline auto SetAnimGroupForChar(Ped ped, char* grname) { return NativeInvoke::Invoke<1990, std::to_underlying(NativeHashes::SET_ANIM_GROUP_FOR_CHAR), void>(ped, grname); }
    static inline auto SetAreaName() { return NativeInvoke::Invoke<1991, std::to_underlying(NativeHashes::SET_AREA_NAME), Any>(); }
    static inline auto SetArmourPickupNetworkRegenTime(Any a1) { return NativeInvoke::Invoke<1992, std::to_underlying(NativeHashes::SET_ARMOUR_PICKUP_NETWORK_REGEN_TIME), void>(a1); }
    static inline auto SetBikeRiderWillPutFootDownWhenStopped(Vehicle bike, bool set) { return NativeInvoke::Invoke<1993, std::to_underlying(NativeHashes::SET_BIKE_RIDER_WILL_PUT_FOOT_DOWN_WHEN_STOPPED), void>(bike, set); }
    static inline auto SetBit(int32_t* val, int32_t bit) { return NativeInvoke::Invoke<1994, std::to_underlying(NativeHashes::SET_BIT), void>(val, bit); }
    static inline auto SetBitsInRange(int32_t* a1, int32_t rangebegin, int32_t rangeend, int32_t val) { return NativeInvoke::Invoke<1995, std::to_underlying(NativeHashes::SET_BITS_IN_RANGE), void>(a1, rangebegin, rangeend, val); }
    static inline auto SetBlipAsFriendly(Blip blip, bool value) { return NativeInvoke::Invoke<1996, std::to_underlying(NativeHashes::SET_BLIP_AS_FRIENDLY), void>(blip, value); }
    static inline auto SetBlipAsShortRange(Blip blip, bool value) { return NativeInvoke::Invoke<1997, std::to_underlying(NativeHashes::SET_BLIP_AS_SHORT_RANGE), void>(blip, value); }
    static inline auto SetBlipCoordinates(int32_t blip, float x, float y, float z) { return NativeInvoke::Invoke<1998, std::to_underlying(NativeHashes::SET_BLIP_COORDINATES), void>(blip, x, y, z); }
    static inline auto SetBlipMarkerLongDistance(int32_t blip, bool set) { return NativeInvoke::Invoke<1999, std::to_underlying(NativeHashes::SET_BLIP_MARKER_LONG_DISTANCE), void>(blip, set); }
    static inline auto SetBlipThrottleRandomly(Vehicle veh, bool set) { return NativeInvoke::Invoke<2000, std::to_underlying(NativeHashes::SET_BLIP_THROTTLE_RANDOMLY), void>(veh, set); }
    static inline auto SetBlockCameraToggle(bool set) { return NativeInvoke::Invoke<2001, std::to_underlying(NativeHashes::SET_BLOCK_CAMERA_TOGGLE), void>(set); }
    static inline auto SetBlockingOfNonTemporaryEvents(Ped ped, bool value) { return NativeInvoke::Invoke<2002, std::to_underlying(NativeHashes::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS), void>(ped, value); }
    static inline auto SetBriansMood(int32_t mood) { return NativeInvoke::Invoke<2003, std::to_underlying(NativeHashes::SET_BRIANS_MOOD), void>(mood); }
    static inline auto SetCamActive(Camera camera, bool value) { return NativeInvoke::Invoke<2004, std::to_underlying(NativeHashes::SET_CAM_ACTIVE), void>(camera, value); }
    static inline auto SetCamAttachOffset(int32_t cam, float x, float y, float z) { return NativeInvoke::Invoke<2005, std::to_underlying(NativeHashes::SET_CAM_ATTACH_OFFSET), void>(cam, x, y, z); }
    static inline auto SetCamAttachOffsetIsRelative(int32_t cam, bool set) { return NativeInvoke::Invoke<2006, std::to_underlying(NativeHashes::SET_CAM_ATTACH_OFFSET_IS_RELATIVE), void>(cam, set); }
    static inline auto SetCamBehindPed(Ped ped) { return NativeInvoke::Invoke<2007, std::to_underlying(NativeHashes::SET_CAM_BEHIND_PED), void>(ped); }
    static inline auto SetCamComponentShake(int32_t cam, int32_t componentid, int a3, int32_t time, float x, float y, float z) { return NativeInvoke::Invoke<2008, std::to_underlying(NativeHashes::SET_CAM_COMPONENT_SHAKE), void>(cam, componentid, a3, time, x, y, z); }
    static inline auto SetCamDofFocuspoint(int32_t cam, float x, float y, float z, float a5) { return NativeInvoke::Invoke<2009, std::to_underlying(NativeHashes::SET_CAM_DOF_FOCUSPOINT), void>(cam, x, y, z, a5); }
    static inline auto SetCamFarClip(int32_t cam, float clip) { return NativeInvoke::Invoke<2010, std::to_underlying(NativeHashes::SET_CAM_FAR_CLIP), void>(cam, clip); }
    static inline auto SetCamFarDof(int32_t cam, float fardof) { return NativeInvoke::Invoke<2011, std::to_underlying(NativeHashes::SET_CAM_FAR_DOF), void>(cam, fardof); }
    static inline auto SetCamFov(Camera camera, float fov) { return NativeInvoke::Invoke<2012, std::to_underlying(NativeHashes::SET_CAM_FOV), void>(camera, fov); }
    static inline auto SetCamInFrontOfPed(Ped ped) { return NativeInvoke::Invoke<2013, std::to_underlying(NativeHashes::SET_CAM_IN_FRONT_OF_PED), void>(ped); }
    static inline auto SetCamInheritRollObject(int32_t cam, Object obj) { return NativeInvoke::Invoke<2014, std::to_underlying(NativeHashes::SET_CAM_INHERIT_ROLL_OBJECT), void>(cam, obj); }
    static inline auto SetCamInheritRollPed(int32_t cam, Ped ped) { return NativeInvoke::Invoke<2015, std::to_underlying(NativeHashes::SET_CAM_INHERIT_ROLL_PED), void>(cam, ped); }
    static inline auto SetCamInheritRollVehicle(int32_t cam, Vehicle veh) { return NativeInvoke::Invoke<2016, std::to_underlying(NativeHashes::SET_CAM_INHERIT_ROLL_VEHICLE), void>(cam, veh); }
    static inline auto SetCamInterpCustomSpeedGraph(float speed) { return NativeInvoke::Invoke<2017, std::to_underlying(NativeHashes::SET_CAM_INTERP_CUSTOM_SPEED_GRAPH), void>(speed); }
    static inline auto SetCamInterpDetailRotStyleAngles(int a1) { return NativeInvoke::Invoke<2018, std::to_underlying(NativeHashes::SET_CAM_INTERP_DETAIL_ROT_STYLE_ANGLES), void>(a1); }
    static inline auto SetCamInterpDetailRotStyleQuats(int a1) { return NativeInvoke::Invoke<2019, std::to_underlying(NativeHashes::SET_CAM_INTERP_DETAIL_ROT_STYLE_QUATS), void>(a1); }
    static inline auto SetCamInterpStyleCore(int32_t cam0, int32_t cam1, int32_t cam2, int32_t time, bool flag) { return NativeInvoke::Invoke<2020, std::to_underlying(NativeHashes::SET_CAM_INTERP_STYLE_CORE), void>(cam0, cam1, cam2, time, flag); }
    static inline auto SetCamInterpStyleDetailed(int32_t cam, bool a2, bool a3, bool a4, bool a5) { return NativeInvoke::Invoke<2021, std::to_underlying(NativeHashes::SET_CAM_INTERP_STYLE_DETAILED), void>(cam, a2, a3, a4, a5); }
    static inline auto SetCamMotionBlur(int32_t cam, float blur) { return NativeInvoke::Invoke<2022, std::to_underlying(NativeHashes::SET_CAM_MOTION_BLUR), void>(cam, blur); }
    static inline auto SetCamName(int32_t cam, char* camname) { return NativeInvoke::Invoke<2023, std::to_underlying(NativeHashes::SET_CAM_NAME), void>(cam, camname); }
    static inline auto SetCamNearClip(int32_t cam, float clip) { return NativeInvoke::Invoke<2024, std::to_underlying(NativeHashes::SET_CAM_NEAR_CLIP), void>(cam, clip); }
    static inline auto SetCamNearDof(int32_t cam, float dof) { return NativeInvoke::Invoke<2025, std::to_underlying(NativeHashes::SET_CAM_NEAR_DOF), void>(cam, dof); }
    static inline auto SetCamPointDampingParams(int32_t cam, float x, float y, float z) { return NativeInvoke::Invoke<2026, std::to_underlying(NativeHashes::SET_CAM_POINT_DAMPING_PARAMS), void>(cam, x, y, z); }
    static inline auto SetCamPointOffset(int32_t cam, float x, float y, float z) { return NativeInvoke::Invoke<2027, std::to_underlying(NativeHashes::SET_CAM_POINT_OFFSET), void>(cam, x, y, z); }
    static inline auto SetCamPointOffsetIsRelative(int32_t cam, bool set) { return NativeInvoke::Invoke<2028, std::to_underlying(NativeHashes::SET_CAM_POINT_OFFSET_IS_RELATIVE), void>(cam, set); }
    static inline auto SetCamPos(Camera camera, float pX, float pY, float pZ) { return NativeInvoke::Invoke<2029, std::to_underlying(NativeHashes::SET_CAM_POS), void>(camera, pX, pY, pZ); }
    static inline auto SetCamPropagate(Camera camera, bool value) { return NativeInvoke::Invoke<2030, std::to_underlying(NativeHashes::SET_CAM_PROPAGATE), void>(camera, value); }
    static inline auto SetCamRoll(int32_t cam, float roll) { return NativeInvoke::Invoke<2031, std::to_underlying(NativeHashes::SET_CAM_ROLL), void>(cam, roll); }
    static inline auto SetCamRot(Camera camera, float angleX, float angleY, float angleZ) { return NativeInvoke::Invoke<2032, std::to_underlying(NativeHashes::SET_CAM_ROT), void>(camera, angleX, angleY, angleZ); }
    static inline auto SetCamShake(int32_t cam, bool a2, int32_t shakeval) { return NativeInvoke::Invoke<2033, std::to_underlying(NativeHashes::SET_CAM_SHAKE), void>(cam, a2, shakeval); }
    static inline auto SetCamSplineCustomSpeedGraph(float speed) { return NativeInvoke::Invoke<2034, std::to_underlying(NativeHashes::SET_CAM_SPLINE_CUSTOM_SPEED_GRAPH), void>(speed); }
    static inline auto SetCamSplineDuration(int32_t cam, int32_t duration) { return NativeInvoke::Invoke<2035, std::to_underlying(NativeHashes::SET_CAM_SPLINE_DURATION), void>(cam, duration); }
    static inline auto SetCamSplineProgress(int32_t cam, float progress) { return NativeInvoke::Invoke<2036, std::to_underlying(NativeHashes::SET_CAM_SPLINE_PROGRESS), void>(cam, progress); }
    static inline auto SetCamSplineSpeedConstant(int32_t cam, bool set) { return NativeInvoke::Invoke<2037, std::to_underlying(NativeHashes::SET_CAM_SPLINE_SPEED_CONSTANT), void>(cam, set); }
    static inline auto SetCamSplineSpeedGraph(int32_t cam, int a2) { return NativeInvoke::Invoke<2038, std::to_underlying(NativeHashes::SET_CAM_SPLINE_SPEED_GRAPH), void>(cam, a2); }
    static inline auto SetCamTargetPed(Camera camera, Ped ped) { return NativeInvoke::Invoke<2039, std::to_underlying(NativeHashes::SET_CAM_TARGET_PED), void>(camera, ped); }
    static inline auto SetCameraAutoScriptActivation(bool set) { return NativeInvoke::Invoke<2040, std::to_underlying(NativeHashes::SET_CAMERA_AUTO_SCRIPT_ACTIVATION), void>(set); }
    static inline auto SetCameraBeginCamCommandsRequired(bool set) { return NativeInvoke::Invoke<2041, std::to_underlying(NativeHashes::SET_CAMERA_BEGIN_CAM_COMMANDS_REQUIRED), void>(set); }
    static inline auto SetCameraControlsDisabledWithPlayerControls(bool value) { return NativeInvoke::Invoke<2042, std::to_underlying(NativeHashes::SET_CAMERA_CONTROLS_DISABLED_WITH_PLAYER_CONTROLS), void>(value); }
    static inline auto SetCanBurstCarTyres(Car car, bool set) { return NativeInvoke::Invoke<2043, std::to_underlying(NativeHashes::SET_CAN_BURST_CAR_TYRES), void>(car, set); }
    static inline auto SetCanResprayCar(Car car, bool can) { return NativeInvoke::Invoke<2044, std::to_underlying(NativeHashes::SET_CAN_RESPRAY_CAR), void>(car, can); }
    static inline auto SetCanTargetCharWithoutLos(Ped ped, bool set) { return NativeInvoke::Invoke<2045, std::to_underlying(NativeHashes::SET_CAN_TARGET_CHAR_WITHOUT_LOS), void>(ped, set); }
    static inline auto SetCarAllowedToDrown(Car car, bool allowed) { return NativeInvoke::Invoke<2046, std::to_underlying(NativeHashes::SET_CAR_ALLOWED_TO_DROWN), void>(car, allowed); }
    static inline auto SetCarAlwaysCreateSkids(Car car, bool set) { return NativeInvoke::Invoke<2047, std::to_underlying(NativeHashes::SET_CAR_ALWAYS_CREATE_SKIDS), void>(car, set); }
    static inline auto SetCarAnimCurrentTime(Car car, char* animname0, char* animname1, float time) { return NativeInvoke::Invoke<2048, std::to_underlying(NativeHashes::SET_CAR_ANIM_CURRENT_TIME), void>(car, animname0, animname1, time); }
    static inline auto SetCarAnimSpeed(Car car, char* animname0, char* animname1, float speed) { return NativeInvoke::Invoke<2049, std::to_underlying(NativeHashes::SET_CAR_ANIM_SPEED), void>(car, animname0, animname1, speed); }
    static inline auto SetCarAsMissionCar(Car car) { return NativeInvoke::Invoke<2050, std::to_underlying(NativeHashes::SET_CAR_AS_MISSION_CAR), void>(car); }
    static inline auto SetCarCanBeDamaged(Vehicle vehicle, bool value) { return NativeInvoke::Invoke<2051, std::to_underlying(NativeHashes::SET_CAR_CAN_BE_DAMAGED), void>(vehicle, value); }
    static inline auto SetCarCanBeVisiblyDamaged(Vehicle vehicle, bool value) { return NativeInvoke::Invoke<2052, std::to_underlying(NativeHashes::SET_CAR_CAN_BE_VISIBLY_DAMAGED), void>(vehicle, value); }
    static inline auto SetCarCollision(Car car, bool set) { return NativeInvoke::Invoke<2053, std::to_underlying(NativeHashes::SET_CAR_COLLISION), void>(car, set); }
    static inline auto SetCarColourCombination(Car car, int32_t combination) { return NativeInvoke::Invoke<2054, std::to_underlying(NativeHashes::SET_CAR_COLOUR_COMBINATION), void>(car, combination); }
    static inline auto SetCarCoordinates(Vehicle vehicle, float pX, float pY, float pZ) { return NativeInvoke::Invoke<2055, std::to_underlying(NativeHashes::SET_CAR_COORDINATES), void>(vehicle, pX, pY, pZ); }
    static inline auto SetCarCoordinatesNoOffset(Car car, float x, float y, float z) { return NativeInvoke::Invoke<2056, std::to_underlying(NativeHashes::SET_CAR_COORDINATES_NO_OFFSET), void>(car, x, y, z); }
    static inline auto SetCarDensityMultiplier(float density) { return NativeInvoke::Invoke<2057, std::to_underlying(NativeHashes::SET_CAR_DENSITY_MULTIPLIER), void>(density); }
    static inline auto SetCarDistanceAheadMultiplier(Car car, float multiplier) { return NativeInvoke::Invoke<2058, std::to_underlying(NativeHashes::SET_CAR_DISTANCE_AHEAD_MULTIPLIER), void>(car, multiplier); }
    static inline auto SetCarDoorLatched(Car car, int32_t door, bool flag0, bool flag1) { return NativeInvoke::Invoke<2059, std::to_underlying(NativeHashes::SET_CAR_DOOR_LATCHED), void>(car, door, flag0, flag1); }
    static inline auto SetCarEngineOn(Car car, bool flag0, bool flag1) { return NativeInvoke::Invoke<2060, std::to_underlying(NativeHashes::SET_CAR_ENGINE_ON), void>(car, flag0, flag1); }
    static inline auto SetCarExistsOnAllMachines() { return NativeInvoke::Invoke<2061, std::to_underlying(NativeHashes::SET_CAR_EXISTS_ON_ALL_MACHINES), Any>(); }
    static inline auto SetCarForwardSpeed(Vehicle vehicle, float speed) { return NativeInvoke::Invoke<2062, std::to_underlying(NativeHashes::SET_CAR_FORWARD_SPEED), void>(vehicle, speed); }
    static inline auto SetCarFovFadeMult(float multiplier) { return NativeInvoke::Invoke<2063, std::to_underlying(NativeHashes::SET_CAR_FOV_FADE_MULT), void>(multiplier); }
    static inline auto SetCarFovMax(float maxfov) { return NativeInvoke::Invoke<2064, std::to_underlying(NativeHashes::SET_CAR_FOV_MAX), void>(maxfov); }
    static inline auto SetCarFovMin(float minfov) { return NativeInvoke::Invoke<2065, std::to_underlying(NativeHashes::SET_CAR_FOV_MIN), void>(minfov); }
    static inline auto SetCarFovRate(float rate) { return NativeInvoke::Invoke<2066, std::to_underlying(NativeHashes::SET_CAR_FOV_RATE), void>(rate); }
    static inline auto SetCarFovStartSpeed(float speed) { return NativeInvoke::Invoke<2067, std::to_underlying(NativeHashes::SET_CAR_FOV_START_SPEED), void>(speed); }
    static inline auto SetCarFovStartSpeedBoat(float speed) { return NativeInvoke::Invoke<2068, std::to_underlying(NativeHashes::SET_CAR_FOV_START_SPEED_BOAT), void>(speed); }
    static inline auto SetCarGeneratorsActiveInArea(float x0, float y0, float z0, float x1, float y1, float z1, bool set) { return NativeInvoke::Invoke<2069, std::to_underlying(NativeHashes::SET_CAR_GENERATORS_ACTIVE_IN_AREA), void>(x0, y0, z0, x1, y1, z1, set); }
    static inline auto SetCarHeading(Vehicle vehicle, float dir) { return NativeInvoke::Invoke<2070, std::to_underlying(NativeHashes::SET_CAR_HEADING), void>(vehicle, dir); }
    static inline auto SetCarHealth(Vehicle vehicle, uint32_t Value) { return NativeInvoke::Invoke<2071, std::to_underlying(NativeHashes::SET_CAR_HEALTH), void>(vehicle, Value); }
    static inline auto SetCarInCutscene(Car car, bool set) { return NativeInvoke::Invoke<2072, std::to_underlying(NativeHashes::SET_CAR_IN_CUTSCENE), void>(car, set); }
    static inline auto SetCarLaneShift(Car car, float shift) { return NativeInvoke::Invoke<2073, std::to_underlying(NativeHashes::SET_CAR_LANE_SHIFT), void>(car, shift); }
    static inline auto SetCarLightMultiplier(Car car, float multiplier) { return NativeInvoke::Invoke<2074, std::to_underlying(NativeHashes::SET_CAR_LIGHT_MULTIPLIER), void>(car, multiplier); }
    static inline auto SetCarLivery(Car car, int32_t livery) { return NativeInvoke::Invoke<2075, std::to_underlying(NativeHashes::SET_CAR_LIVERY), void>(car, livery); }
    static inline auto SetCarMotionBlurEffectBoat(float blur) { return NativeInvoke::Invoke<2076, std::to_underlying(NativeHashes::SET_CAR_MOTION_BLUR_EFFECT_BOAT), void>(blur); }
    static inline auto SetCarNotDamagedByRelationshipGroup(Car car, bool set, int32_t group) { return NativeInvoke::Invoke<2077, std::to_underlying(NativeHashes::SET_CAR_NOT_DAMAGED_BY_RELATIONSHIP_GROUP), void>(car, set, group); }
    static inline auto SetCarOnGroundProperly(Vehicle vehicle) { return NativeInvoke::Invoke<2078, std::to_underlying(NativeHashes::SET_CAR_ON_GROUND_PROPERLY), Any>(vehicle); }
    static inline auto SetCarOnlyDamagedByPlayer(Car car, bool set) { return NativeInvoke::Invoke<2079, std::to_underlying(NativeHashes::SET_CAR_ONLY_DAMAGED_BY_PLAYER), void>(car, set); }
    static inline auto SetCarOnlyDamagedByRelationshipGroup(Car car, bool set, int32_t group) { return NativeInvoke::Invoke<2080, std::to_underlying(NativeHashes::SET_CAR_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP), void>(car, set, group); }
    static inline auto SetCarProofs(Vehicle vehicle, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof) { return NativeInvoke::Invoke<2081, std::to_underlying(NativeHashes::SET_CAR_PROOFS), void>(vehicle, bulletProof, fireProof, explosionProof, collisionProof, meleeProof); }
    static inline auto SetCarRandomRouteSeed(Car car, int32_t seed) { return NativeInvoke::Invoke<2082, std::to_underlying(NativeHashes::SET_CAR_RANDOM_ROUTE_SEED), void>(car, seed); }
    static inline auto SetCarStayInFastLane(Car car, bool set) { return NativeInvoke::Invoke<2083, std::to_underlying(NativeHashes::SET_CAR_STAY_IN_FAST_LANE), void>(car, set); }
    static inline auto SetCarStayInSlowLane(Car car, bool set) { return NativeInvoke::Invoke<2084, std::to_underlying(NativeHashes::SET_CAR_STAY_IN_SLOW_LANE), void>(car, set); }
    static inline auto SetCarStopCloning() { return NativeInvoke::Invoke<2085, std::to_underlying(NativeHashes::SET_CAR_STOP_CLONING), Any>(); }
    static inline auto SetCarStrong(Vehicle vehicle, bool strong) { return NativeInvoke::Invoke<2086, std::to_underlying(NativeHashes::SET_CAR_STRONG), void>(vehicle, strong); }
    static inline auto SetCarTraction(Car car, float traction) { return NativeInvoke::Invoke<2087, std::to_underlying(NativeHashes::SET_CAR_TRACTION), void>(car, traction); }
    static inline auto SetCarVisible(Vehicle vehicle, bool value) { return NativeInvoke::Invoke<2088, std::to_underlying(NativeHashes::SET_CAR_VISIBLE), void>(vehicle, value); }
    static inline auto SetCarWatertight(Car car, bool set) { return NativeInvoke::Invoke<2089, std::to_underlying(NativeHashes::SET_CAR_WATERTIGHT), void>(car, set); }
    static inline auto SetCellphoneRanked(Any a1) { return NativeInvoke::Invoke<2090, std::to_underlying(NativeHashes::SET_CELLPHONE_RANKED), void>(a1); }
    static inline auto SetCharAccuracy(Ped ped, uint32_t value) { return NativeInvoke::Invoke<2091, std::to_underlying(NativeHashes::SET_CHAR_ACCURACY), void>(ped, value); }
    static inline auto SetCharAllAnimsSpeed(Ped ped, float speed) { return NativeInvoke::Invoke<2092, std::to_underlying(NativeHashes::SET_CHAR_ALL_ANIMS_SPEED), void>(ped, speed); }
    static inline auto SetCharAllowedToDuck(Ped ped, bool set) { return NativeInvoke::Invoke<2093, std::to_underlying(NativeHashes::SET_CHAR_ALLOWED_TO_DUCK), void>(ped, set); }
    static inline auto SetCharAllowedToRunOnBoats(Ped ped, bool set) { return NativeInvoke::Invoke<2094, std::to_underlying(NativeHashes::SET_CHAR_ALLOWED_TO_RUN_ON_BOATS), void>(ped, set); }
    static inline auto SetCharAmmo(Ped ped, uint32_t weapon, uint32_t ammo) { return NativeInvoke::Invoke<2095, std::to_underlying(NativeHashes::SET_CHAR_AMMO), void>(ped, weapon, ammo); }
    static inline auto SetCharAngledDefensiveArea(Ped ped, float x0, float y0, float z0, float x1, float y1, float z1, float angle) { return NativeInvoke::Invoke<2096, std::to_underlying(NativeHashes::SET_CHAR_ANGLED_DEFENSIVE_AREA), void>(ped, x0, y0, z0, x1, y1, z1, angle); }
    static inline auto SetCharAnimBlendOutDelta(Ped ped, char* AnimName0, char* AnimName1, float delta) { return NativeInvoke::Invoke<2097, std::to_underlying(NativeHashes::SET_CHAR_ANIM_BLEND_OUT_DELTA), void>(ped, AnimName0, AnimName1, delta); }
    static inline auto SetCharAnimCurrentTime(Ped ped, char* AnimName0, char* AnimName1, float time) { return NativeInvoke::Invoke<2098, std::to_underlying(NativeHashes::SET_CHAR_ANIM_CURRENT_TIME), void>(ped, AnimName0, AnimName1, time); }
    static inline auto SetCharAnimPlayingFlag(Ped ped, char* AnimName0, char* AnimName1, bool flag) { return NativeInvoke::Invoke<2099, std::to_underlying(NativeHashes::SET_CHAR_ANIM_PLAYING_FLAG), bool>(ped, AnimName0, AnimName1, flag); }
    static inline auto SetCharAnimSpeed(Ped ped, char* AnimName0, char* AnimName1, float speed) { return NativeInvoke::Invoke<2100, std::to_underlying(NativeHashes::SET_CHAR_ANIM_SPEED), void>(ped, AnimName0, AnimName1, speed); }
    static inline auto SetCharAsEnemy(Ped ped, bool value) { return NativeInvoke::Invoke<2101, std::to_underlying(NativeHashes::SET_CHAR_AS_ENEMY), void>(ped, value); }
    static inline auto SetCharAsMissionChar(Ped ped) { return NativeInvoke::Invoke<2102, std::to_underlying(NativeHashes::SET_CHAR_AS_MISSION_CHAR), void>(ped); }
    static inline auto SetCharBleeding(Ped ped, bool set) { return NativeInvoke::Invoke<2103, std::to_underlying(NativeHashes::SET_CHAR_BLEEDING), void>(ped, set); }
    static inline auto SetCharBulletproofVest(Ped ped, bool set) { return NativeInvoke::Invoke<2104, std::to_underlying(NativeHashes::SET_CHAR_BULLETPROOF_VEST), void>(ped, set); }
    static inline auto SetCharCanBeKnockedOffBike(Ped ped, bool value) { return NativeInvoke::Invoke<2105, std::to_underlying(NativeHashes::SET_CHAR_CAN_BE_KNOCKED_OFF_BIKE), void>(ped, value); }
    static inline auto SetCharCanBeShotInVehicle(Ped ped, bool enabled) { return NativeInvoke::Invoke<2106, std::to_underlying(NativeHashes::SET_CHAR_CAN_BE_SHOT_IN_VEHICLE), void>(ped, enabled); }
    static inline auto SetCharCanSmashGlass(Ped ped, bool set) { return NativeInvoke::Invoke<2107, std::to_underlying(NativeHashes::SET_CHAR_CAN_SMASH_GLASS), void>(ped, set); }
    static inline auto SetCharCantBeDraggedOut(Ped ped, bool enabled) { return NativeInvoke::Invoke<2108, std::to_underlying(NativeHashes::SET_CHAR_CANT_BE_DRAGGED_OUT), void>(ped, enabled); }
    static inline auto SetCharClimbAnimRate(Ped ped, float rate) { return NativeInvoke::Invoke<2109, std::to_underlying(NativeHashes::SET_CHAR_CLIMB_ANIM_RATE), void>(ped, rate); }
    static inline auto SetCharCollision(Ped ped, bool set) { return NativeInvoke::Invoke<2110, std::to_underlying(NativeHashes::SET_CHAR_COLLISION), void>(ped, set); }
    static inline auto SetCharComponentVariation(Ped ped, uint32_t component, uint32_t modelVariation, uint32_t textureVariation) { return NativeInvoke::Invoke<2111, std::to_underlying(NativeHashes::SET_CHAR_COMPONENT_VARIATION), void>(ped, component, modelVariation, textureVariation); }
    static inline auto SetCharCoordinates(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2112, std::to_underlying(NativeHashes::SET_CHAR_COORDINATES), void>(ped, x, y, z); }
    static inline auto SetCharCoordinatesDontClearPlayerTasks(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2113, std::to_underlying(NativeHashes::SET_CHAR_COORDINATES_DONT_CLEAR_PLAYER_TASKS), void>(ped, x, y, z); }
    static inline auto SetCharCoordinatesDontWarpGang(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2114, std::to_underlying(NativeHashes::SET_CHAR_COORDINATES_DONT_WARP_GANG), void>(ped, x, y, z); }
    static inline auto SetCharCoordinatesDontWarpGangNoOffset(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2115, std::to_underlying(NativeHashes::SET_CHAR_COORDINATES_DONT_WARP_GANG_NO_OFFSET), void>(ped, x, y, z); }
    static inline auto SetCharCoordinatesNoOffset(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2116, std::to_underlying(NativeHashes::SET_CHAR_COORDINATES_NO_OFFSET), void>(ped, x, y, z); }
    static inline auto SetCharCurrentWeaponVisible(Ped ped, bool visble) { return NativeInvoke::Invoke<2117, std::to_underlying(NativeHashes::SET_CHAR_CURRENT_WEAPON_VISIBLE), void>(ped, visble); }
    static inline auto SetCharDecisionMaker(Ped ped, DecisionMaker dm) { return NativeInvoke::Invoke<2118, std::to_underlying(NativeHashes::SET_CHAR_DECISION_MAKER), void>(ped, dm); }
    static inline auto SetCharDecisionMakerToDefault(Ped ped) { return NativeInvoke::Invoke<2119, std::to_underlying(NativeHashes::SET_CHAR_DECISION_MAKER_TO_DEFAULT), void>(ped); }
    static inline auto SetCharDefaultComponentVariation(Ped ped) { return NativeInvoke::Invoke<2120, std::to_underlying(NativeHashes::SET_CHAR_DEFAULT_COMPONENT_VARIATION), void>(ped); }
    static inline auto SetCharDefensiveAreaAttachedToCar() { return NativeInvoke::Invoke<2121, std::to_underlying(NativeHashes::SET_CHAR_DEFENSIVE_AREA_ATTACHED_TO_CAR), Any>(); }
    static inline auto SetCharDefensiveAreaAttachedToPed(Ped ped, Ped pednext, float x0, float y0, float z0, float x1, float y1, float z1, int a9, int a10) { return NativeInvoke::Invoke<2122, std::to_underlying(NativeHashes::SET_CHAR_DEFENSIVE_AREA_ATTACHED_TO_PED), void>(ped, pednext, x0, y0, z0, x1, y1, z1, a9, a10); }
    static inline auto SetCharDesiredHeading(Ped ped, float heading) { return NativeInvoke::Invoke<2123, std::to_underlying(NativeHashes::SET_CHAR_DESIRED_HEADING), void>(ped, heading); }
    static inline auto SetCharDiesInstantlyInWater(Ped ped, bool allow) { return NativeInvoke::Invoke<2124, std::to_underlying(NativeHashes::SET_CHAR_DIES_INSTANTLY_IN_WATER), void>(ped, allow); }
    static inline auto SetCharDropsWeaponsWhenDead(Ped ped, bool value) { return NativeInvoke::Invoke<2125, std::to_underlying(NativeHashes::SET_CHAR_DROPS_WEAPONS_WHEN_DEAD), void>(ped, value); }
    static inline auto SetCharDrownsInSinkingVehicle(Ped ped, bool set) { return NativeInvoke::Invoke<2126, std::to_underlying(NativeHashes::SET_CHAR_DROWNS_IN_SINKING_VEHICLE), void>(ped, set); }
    static inline auto SetCharDrownsInWater(Ped ped, bool set) { return NativeInvoke::Invoke<2127, std::to_underlying(NativeHashes::SET_CHAR_DROWNS_IN_WATER), void>(ped, set); }
    static inline auto SetCharDruggedUp(Ped ped, bool drugged) { return NativeInvoke::Invoke<2128, std::to_underlying(NativeHashes::SET_CHAR_DRUGGED_UP), void>(ped, drugged); }
    static inline auto SetCharDucking(Ped ped, bool set) { return NativeInvoke::Invoke<2129, std::to_underlying(NativeHashes::SET_CHAR_DUCKING), Any>(ped, set); }
    static inline auto SetCharDuckingTimed(Ped ped, int32_t timed) { return NativeInvoke::Invoke<2130, std::to_underlying(NativeHashes::SET_CHAR_DUCKING_TIMED), void>(ped, timed); }
    static inline auto SetCharFireDamageMultiplier(Ped ped, float multiplier) { return NativeInvoke::Invoke<2131, std::to_underlying(NativeHashes::SET_CHAR_FIRE_DAMAGE_MULTIPLIER), void>(ped, multiplier); }
    static inline auto SetCharForceDieInCar(Ped ped, bool set) { return NativeInvoke::Invoke<2132, std::to_underlying(NativeHashes::SET_CHAR_FORCE_DIE_IN_CAR), void>(ped, set); }
    static inline auto SetCharGestureGroup(Ped ped, char* AnimGroup) { return NativeInvoke::Invoke<2133, std::to_underlying(NativeHashes::SET_CHAR_GESTURE_GROUP), void>(ped, AnimGroup); }
    static inline auto SetCharGetOutUpsideDownCar(Ped ped, bool set) { return NativeInvoke::Invoke<2134, std::to_underlying(NativeHashes::SET_CHAR_GET_OUT_UPSIDE_DOWN_CAR), void>(ped, set); }
    static inline auto SetCharGravity(Ped ped, float value) { return NativeInvoke::Invoke<2135, std::to_underlying(NativeHashes::SET_CHAR_GRAVITY), void>(ped, value); }
    static inline auto SetCharHeading(Ped ped, float heading) { return NativeInvoke::Invoke<2136, std::to_underlying(NativeHashes::SET_CHAR_HEADING), void>(ped, heading); }
    static inline auto SetCharHealth(Ped ped, uint32_t health) { return NativeInvoke::Invoke<2137, std::to_underlying(NativeHashes::SET_CHAR_HEALTH), void>(ped, health); }
    static inline auto SetCharInCutscene(Ped ped, bool set) { return NativeInvoke::Invoke<2138, std::to_underlying(NativeHashes::SET_CHAR_IN_CUTSCENE), void>(ped, set); }
    static inline auto SetCharInvincible(Ped ped, bool enable) { return NativeInvoke::Invoke<2139, std::to_underlying(NativeHashes::SET_CHAR_INVINCIBLE), void>(ped, enable); }
    static inline auto SetCharIsTargetPriority(Ped ped, bool enable) { return NativeInvoke::Invoke<2140, std::to_underlying(NativeHashes::SET_CHAR_IS_TARGET_PRIORITY), void>(ped, enable); }
    static inline auto SetCharKeepTask(Ped ped, bool value) { return NativeInvoke::Invoke<2141, std::to_underlying(NativeHashes::SET_CHAR_KEEP_TASK), void>(ped, value); }
    static inline auto SetCharMaxHealth(Ped ped, uint32_t value) { return NativeInvoke::Invoke<2142, std::to_underlying(NativeHashes::SET_CHAR_MAX_HEALTH), void>(ped, value); }
    static inline auto SetCharMaxMoveBlendRatio(Ped ped, float ratio) { return NativeInvoke::Invoke<2143, std::to_underlying(NativeHashes::SET_CHAR_MAX_MOVE_BLEND_RATIO), void>(ped, ratio); }
    static inline auto SetCharMaxTimeInWater(Ped ped, float time) { return NativeInvoke::Invoke<2144, std::to_underlying(NativeHashes::SET_CHAR_MAX_TIME_IN_WATER), void>(ped, time); }
    static inline auto SetCharMaxTimeUnderwater(Ped ped, float time) { return NativeInvoke::Invoke<2145, std::to_underlying(NativeHashes::SET_CHAR_MAX_TIME_UNDERWATER), void>(ped, time); }
    static inline auto SetCharMeleeActionFlag0(Ped ped, bool set) { return NativeInvoke::Invoke<2146, std::to_underlying(NativeHashes::SET_CHAR_MELEE_ACTION_FLAG0), void>(ped, set); }
    static inline auto SetCharMeleeActionFlag1(Ped ped, bool set) { return NativeInvoke::Invoke<2147, std::to_underlying(NativeHashes::SET_CHAR_MELEE_ACTION_FLAG1), void>(ped, set); }
    static inline auto SetCharMeleeActionFlag2(Ped ped, bool set) { return NativeInvoke::Invoke<2148, std::to_underlying(NativeHashes::SET_CHAR_MELEE_ACTION_FLAG2), void>(ped, set); }
    static inline auto SetCharMeleeMovementConstaintBox(Ped ped, float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2149, std::to_underlying(NativeHashes::SET_CHAR_MELEE_MOVEMENT_CONSTAINT_BOX), void>(ped, x0, y0, z0, x1, y1, z1); }
    static inline auto SetCharMoney(Ped ped, uint32_t amount) { return NativeInvoke::Invoke<2150, std::to_underlying(NativeHashes::SET_CHAR_MONEY), void>(ped, amount); }
    static inline auto SetCharMoveAnimSpeedMultiplier(Ped ped, float multiplier) { return NativeInvoke::Invoke<2151, std::to_underlying(NativeHashes::SET_CHAR_MOVE_ANIM_SPEED_MULTIPLIER), void>(ped, multiplier); }
    static inline auto SetCharMovementAnimsBlocked(Ped ped, bool set) { return NativeInvoke::Invoke<2152, std::to_underlying(NativeHashes::SET_CHAR_MOVEMENT_ANIMS_BLOCKED), void>(ped, set); }
    static inline auto SetCharNameDebug() { return NativeInvoke::Invoke<2153, std::to_underlying(NativeHashes::SET_CHAR_NAME_DEBUG), Any>(); }
    static inline auto SetCharNeverLeavesGroup(Ped ped, bool value) { return NativeInvoke::Invoke<2154, std::to_underlying(NativeHashes::SET_CHAR_NEVER_LEAVES_GROUP), void>(ped, value); }
    static inline auto SetCharNeverTargetted(Ped ped, bool set) { return NativeInvoke::Invoke<2155, std::to_underlying(NativeHashes::SET_CHAR_NEVER_TARGETTED), void>(ped, set); }
    static inline auto SetCharNotDamagedByRelationshipGroup(Ped ped, uint32_t relationshipGroup, bool enable) { return NativeInvoke::Invoke<2156, std::to_underlying(NativeHashes::SET_CHAR_NOT_DAMAGED_BY_RELATIONSHIP_GROUP), void>(ped, relationshipGroup, enable); }
    static inline auto SetCharOnlyDamagedByPlayer(Ped ped, bool set) { return NativeInvoke::Invoke<2157, std::to_underlying(NativeHashes::SET_CHAR_ONLY_DAMAGED_BY_PLAYER), void>(ped, set); }
    static inline auto SetCharOnlyDamagedByRelationshipGroup(Ped ped, bool set, int32_t relgroup) { return NativeInvoke::Invoke<2158, std::to_underlying(NativeHashes::SET_CHAR_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP), void>(ped, set, relgroup); }
    static inline auto SetCharProofs(Ped ped, bool unknown0, bool fallingDamage, bool unknown1, bool unknown2, bool unknown3) { return NativeInvoke::Invoke<2159, std::to_underlying(NativeHashes::SET_CHAR_PROOFS), void>(ped, unknown0, fallingDamage, unknown1, unknown2, unknown3); }
    static inline auto SetCharPropIndex(Ped ped, uint32_t propType, uint32_t index) { return NativeInvoke::Invoke<2160, std::to_underlying(NativeHashes::SET_CHAR_PROP_INDEX), void>(ped, propType, index); }
    static inline auto SetCharPropIndexTexture(Ped ped, int a2, int a3, int a4) { return NativeInvoke::Invoke<2161, std::to_underlying(NativeHashes::SET_CHAR_PROP_INDEX_TEXTURE), void>(ped, a2, a3, a4); }
    static inline auto SetCharProvideCoveringFire(Ped ped, bool set) { return NativeInvoke::Invoke<2162, std::to_underlying(NativeHashes::SET_CHAR_PROVIDE_COVERING_FIRE), void>(ped, set); }
    static inline auto SetCharRandomComponentVariation(Ped ped) { return NativeInvoke::Invoke<2163, std::to_underlying(NativeHashes::SET_CHAR_RANDOM_COMPONENT_VARIATION), void>(ped); }
    static inline auto SetCharReadyToBeExecuted(Ped ped, bool set) { return NativeInvoke::Invoke<2164, std::to_underlying(NativeHashes::SET_CHAR_READY_TO_BE_EXECUTED), void>(ped, set); }
    static inline auto SetCharReadyToBeStunned(Ped ped, bool set) { return NativeInvoke::Invoke<2165, std::to_underlying(NativeHashes::SET_CHAR_READY_TO_BE_STUNNED), void>(ped, set); }
    static inline auto SetCharRelationship(Ped ped, uint32_t relationshipLevel, uint32_t relationshipGroup) { return NativeInvoke::Invoke<2166, std::to_underlying(NativeHashes::SET_CHAR_RELATIONSHIP), void>(ped, relationshipLevel, relationshipGroup); }
    static inline auto SetCharRelationshipGroup(Ped ped, uint32_t relationshipGroup) { return NativeInvoke::Invoke<2167, std::to_underlying(NativeHashes::SET_CHAR_RELATIONSHIP_GROUP), void>(ped, relationshipGroup); }
    static inline auto SetCharRotation(Ped ped, float xr, float yr, float zr) { return NativeInvoke::Invoke<2168, std::to_underlying(NativeHashes::SET_CHAR_ROTATION), void>(ped, xr, yr, zr); }
    static inline auto SetCharShootRate(Ped ped, int32_t rate) { return NativeInvoke::Invoke<2169, std::to_underlying(NativeHashes::SET_CHAR_SHOOT_RATE), void>(ped, rate); }
    static inline auto SetCharSignalAfterKill(Ped ped, bool set) { return NativeInvoke::Invoke<2170, std::to_underlying(NativeHashes::SET_CHAR_SIGNAL_AFTER_KILL), void>(ped, set); }
    static inline auto SetCharSphereDefensiveArea(Ped ped, float x, float y, float z, float radius) { return NativeInvoke::Invoke<2171, std::to_underlying(NativeHashes::SET_CHAR_SPHERE_DEFENSIVE_AREA), void>(ped, x, y, z, radius); }
    static inline auto SetCharStayInCarWhenJacked(Ped ped, bool set) { return NativeInvoke::Invoke<2172, std::to_underlying(NativeHashes::SET_CHAR_STAY_IN_CAR_WHEN_JACKED), void>(ped, set); }
    static inline auto SetCharSuffersCriticalHits(Ped ped, bool value) { return NativeInvoke::Invoke<2173, std::to_underlying(NativeHashes::SET_CHAR_SUFFERS_CRITICAL_HITS), void>(ped, value); }
    static inline auto SetCharUsesDeafultAnimGroupWhenFleeing(Ped ped, bool set) { return NativeInvoke::Invoke<2174, std::to_underlying(NativeHashes::SET_CHAR_USES_DEAFULT_ANIM_GROUP_WHEN_FLEEING), void>(ped, set); }
    static inline auto SetCharUsesUpperbodyDamageAnimsOnly(Ped ped, bool set) { return NativeInvoke::Invoke<2175, std::to_underlying(NativeHashes::SET_CHAR_USES_UPPERBODY_DAMAGE_ANIMS_ONLY), void>(ped, set); }
    static inline auto SetCharVelocity(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2176, std::to_underlying(NativeHashes::SET_CHAR_VELOCITY), void>(ped, x, y, z); }
    static inline auto SetCharVisible(Ped ped, bool value) { return NativeInvoke::Invoke<2177, std::to_underlying(NativeHashes::SET_CHAR_VISIBLE), void>(ped, value); }
    static inline auto SetCharWalkAlongsideLeaderWhenAppropriate(Ped ped, bool set) { return NativeInvoke::Invoke<2178, std::to_underlying(NativeHashes::SET_CHAR_WALK_ALONGSIDE_LEADER_WHEN_APPROPRIATE), void>(ped, set); }
    static inline auto SetCharWantedByPolice(Ped ped, bool wanted) { return NativeInvoke::Invoke<2179, std::to_underlying(NativeHashes::SET_CHAR_WANTED_BY_POLICE), void>(ped, wanted); }
    static inline auto SetCharWatchMelee(Ped ped, bool set) { return NativeInvoke::Invoke<2180, std::to_underlying(NativeHashes::SET_CHAR_WATCH_MELEE), void>(ped, set); }
    static inline auto SetCharWeaponSkill(Ped ped, int32_t skill) { return NativeInvoke::Invoke<2181, std::to_underlying(NativeHashes::SET_CHAR_WEAPON_SKILL), void>(ped, skill); }
    static inline auto SetCharWillCowerInsteadOfFleeing(Ped ped, bool set) { return NativeInvoke::Invoke<2182, std::to_underlying(NativeHashes::SET_CHAR_WILL_COWER_INSTEAD_OF_FLEEING), void>(ped, set); }
    static inline auto SetCharWillDoDrivebys(Ped ped, bool value) { return NativeInvoke::Invoke<2183, std::to_underlying(NativeHashes::SET_CHAR_WILL_DO_DRIVEBYS), void>(ped, value); }
    static inline auto SetCharWillFlyThroughWindscreen(Ped ped, bool value) { return NativeInvoke::Invoke<2184, std::to_underlying(NativeHashes::SET_CHAR_WILL_FLY_THROUGH_WINDSCREEN), void>(ped, value); }
    static inline auto SetCharWillLeaveCarInCombat(Ped ped, bool set) { return NativeInvoke::Invoke<2185, std::to_underlying(NativeHashes::SET_CHAR_WILL_LEAVE_CAR_IN_COMBAT), void>(ped, set); }
    static inline auto SetCharWillMoveWhenInjured(Ped ped, bool value) { return NativeInvoke::Invoke<2186, std::to_underlying(NativeHashes::SET_CHAR_WILL_MOVE_WHEN_INJURED), void>(ped, value); }
    static inline auto SetCharWillOnlyFireWithClearLos(Ped ped, bool set) { return NativeInvoke::Invoke<2187, std::to_underlying(NativeHashes::SET_CHAR_WILL_ONLY_FIRE_WITH_CLEAR_LOS), void>(ped, set); }
    static inline auto SetCharWillRemainOnBoatAfterMissionEnds(Ped ped, bool set) { return NativeInvoke::Invoke<2188, std::to_underlying(NativeHashes::SET_CHAR_WILL_REMAIN_ON_BOAT_AFTER_MISSION_ENDS), void>(ped, set); }
    static inline auto SetCharWillTryToLeaveBoatAfterLeader(Ped ped, bool set) { return NativeInvoke::Invoke<2189, std::to_underlying(NativeHashes::SET_CHAR_WILL_TRY_TO_LEAVE_BOAT_AFTER_LEADER), void>(ped, set); }
    static inline auto SetCharWillTryToLeaveWater(Ped ped, bool set) { return NativeInvoke::Invoke<2190, std::to_underlying(NativeHashes::SET_CHAR_WILL_TRY_TO_LEAVE_WATER), void>(ped, set); }
    static inline auto SetCharWillUseCarsInCombat(Ped ped, bool value) { return NativeInvoke::Invoke<2191, std::to_underlying(NativeHashes::SET_CHAR_WILL_USE_CARS_IN_COMBAT), void>(ped, value); }
    static inline auto SetCharWillUseCover(Ped ped, bool value) { return NativeInvoke::Invoke<2192, std::to_underlying(NativeHashes::SET_CHAR_WILL_USE_COVER), void>(ped, value); }
    static inline auto SetCinematicButtonEnabled(bool set) { return NativeInvoke::Invoke<2193, std::to_underlying(NativeHashes::SET_CINEMATIC_BUTTON_ENABLED), void>(set); }
    static inline auto SetClearHelpInMissionCleanup(bool set) { return NativeInvoke::Invoke<2194, std::to_underlying(NativeHashes::SET_CLEAR_HELP_IN_MISSION_CLEANUP), void>(set); }
    static inline auto SetClearManifolds(bool set) { return NativeInvoke::Invoke<2195, std::to_underlying(NativeHashes::SET_CLEAR_MANIFOLDS), void>(set); }
    static inline auto SetCollectable1Total(int32_t total) { return NativeInvoke::Invoke<2196, std::to_underlying(NativeHashes::SET_COLLECTABLE1_TOTAL), void>(total); }
    static inline auto SetCollideWithPeds(bool set) { return NativeInvoke::Invoke<2197, std::to_underlying(NativeHashes::SET_COLLIDE_WITH_PEDS), void>(set); }
    static inline auto SetCombatDecisionMaker(Ped ped, DecisionMaker dm) { return NativeInvoke::Invoke<2198, std::to_underlying(NativeHashes::SET_COMBAT_DECISION_MAKER), void>(ped, dm); }
    static inline auto SetContentsOfTextWidget(Any a1, Any a2) { return NativeInvoke::Invoke<2199, std::to_underlying(NativeHashes::SET_CONTENTS_OF_TEXT_WIDGET), void>(a1, a2); }
    static inline auto SetConvertibleRoof(Car car, bool set) { return NativeInvoke::Invoke<2200, std::to_underlying(NativeHashes::SET_CONVERTIBLE_ROOF), void>(car, set); }
    static inline auto SetCreateRandomCops(bool set) { return NativeInvoke::Invoke<2201, std::to_underlying(NativeHashes::SET_CREATE_RANDOM_COPS), void>(set); }
    static inline auto SetCreditsToRenderBeforeFade(bool set) { return NativeInvoke::Invoke<2202, std::to_underlying(NativeHashes::SET_CREDITS_TO_RENDER_BEFORE_FADE), void>(set); }
    static inline auto SetCurrentCharWeapon(Ped ped, uint32_t w, bool unknownTrue) { return NativeInvoke::Invoke<2203, std::to_underlying(NativeHashes::SET_CURRENT_CHAR_WEAPON), void>(ped, w, unknownTrue); }
    static inline auto SetCurrentMovie(char* filename) { return NativeInvoke::Invoke<2204, std::to_underlying(NativeHashes::SET_CURRENT_MOVIE), void>(filename); }
    static inline auto SetCutsceneExtraRoomPos(float x, float y, float z) { return NativeInvoke::Invoke<2205, std::to_underlying(NativeHashes::SET_CUTSCENE_EXTRA_ROOM_POS), void>(x, y, z); }
    static inline auto SetDanceShakeActiveThisUpdate(float shake) { return NativeInvoke::Invoke<2206, std::to_underlying(NativeHashes::SET_DANCE_SHAKE_ACTIVE_THIS_UPDATE), void>(shake); }
    static inline auto SetDanceShakeInactiveImmediately() { return NativeInvoke::Invoke<2207, std::to_underlying(NativeHashes::SET_DANCE_SHAKE_INACTIVE_IMMEDIATELY), void>(); }
    static inline auto SetDeadCharCoordinates(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2208, std::to_underlying(NativeHashes::SET_DEAD_CHAR_COORDINATES), void>(ped, x, y, z); }
    static inline auto SetDeadPedsDropWeapons(bool set) { return NativeInvoke::Invoke<2209, std::to_underlying(NativeHashes::SET_DEAD_PEDS_DROP_WEAPONS), void>(set); }
    static inline auto SetDeathWeaponsPersist(Ped ped, bool set) { return NativeInvoke::Invoke<2210, std::to_underlying(NativeHashes::SET_DEATH_WEAPONS_PERSIST), void>(ped, set); }
    static inline auto SetDebugTextVisible(Any a1) { return NativeInvoke::Invoke<2211, std::to_underlying(NativeHashes::SET_DEBUG_TEXT_VISIBLE), void>(a1); }
    static inline auto SetDecisionMakerAttributeCanChangeTarget(DecisionMaker dm, bool value) { return NativeInvoke::Invoke<2212, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_CAN_CHANGE_TARGET), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeCaution(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2213, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_CAUTION), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeFireRate(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2214, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_FIRE_RATE), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeLowHealth(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2215, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_LOW_HEALTH), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeMovementStyle(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2216, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_MOVEMENT_STYLE), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeNavigationStyle(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2217, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_NAVIGATION_STYLE), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeRetreatingBehaviour(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2218, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_RETREATING_BEHAVIOUR), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeSightRange(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2219, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_SIGHT_RANGE), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeStandingStyle(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2220, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_STANDING_STYLE), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeTargetInjuredReaction(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2221, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_TARGET_INJURED_REACTION), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeTargetLossResponse(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2222, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_TARGET_LOSS_RESPONSE), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeTeamwork(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2223, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_TEAMWORK), void>(dm, value); }
    static inline auto SetDecisionMakerAttributeWeaponAccuracy(DecisionMaker dm, uint32_t value) { return NativeInvoke::Invoke<2224, std::to_underlying(NativeHashes::SET_DECISION_MAKER_ATTRIBUTE_WEAPON_ACCURACY), void>(dm, value); }
    static inline auto SetDefaultGlobalInstancePriority() { return NativeInvoke::Invoke<2225, std::to_underlying(NativeHashes::SET_DEFAULT_GLOBAL_INSTANCE_PRIORITY), void>(); }
    static inline auto SetDisablePlayerShoveAnimation(Ped ped, bool disable) { return NativeInvoke::Invoke<2226, std::to_underlying(NativeHashes::SET_DISABLE_PLAYER_SHOVE_ANIMATION), void>(ped, disable); }
    static inline auto SetDisplayPlayerNameAndIcon(Any a1, Any a2) { return NativeInvoke::Invoke<2227, std::to_underlying(NativeHashes::SET_DISPLAY_PLAYER_NAME_AND_ICON), void>(a1, a2); }
    static inline auto SetDitchPoliceModels(bool set) { return NativeInvoke::Invoke<2228, std::to_underlying(NativeHashes::SET_DITCH_POLICE_MODELS), void>(set); }
    static inline auto SetDoNotSpawnParkedCarsOnTop(int32_t pickup, bool set) { return NativeInvoke::Invoke<2229, std::to_underlying(NativeHashes::SET_DO_NOT_SPAWN_PARKED_CARS_ON_TOP), void>(pickup, set); }
    static inline auto SetDontActivateRagdollFromPlayerImpact(Ped ped, bool set) { return NativeInvoke::Invoke<2230, std::to_underlying(NativeHashes::SET_DONT_ACTIVATE_RAGDOLL_FROM_PLAYER_IMPACT), void>(ped, set); }
    static inline auto SetDoorState(Object door, bool flag, float a3) { return NativeInvoke::Invoke<2231, std::to_underlying(NativeHashes::SET_DOOR_STATE), void>(door, flag, a3); }
    static inline auto SetDrawPlayerComponent(int32_t component, bool set) { return NativeInvoke::Invoke<2232, std::to_underlying(NativeHashes::SET_DRAW_PLAYER_COMPONENT), void>(component, set); }
    static inline auto SetDriveTaskCruiseSpeed(Ped ped, float speed) { return NativeInvoke::Invoke<2233, std::to_underlying(NativeHashes::SET_DRIVE_TASK_CRUISE_SPEED), void>(ped, speed); }
    static inline auto SetDrunkCam(Cam cam, float val, int32_t time) { return NativeInvoke::Invoke<2234, std::to_underlying(NativeHashes::SET_DRUNK_CAM), void>(cam, val, time); }
    static inline auto SetEnableNearClipScan(bool set) { return NativeInvoke::Invoke<2235, std::to_underlying(NativeHashes::SET_ENABLE_NEAR_CLIP_SCAN), void>(set); }
    static inline auto SetEnableRcDetonate(bool set) { return NativeInvoke::Invoke<2236, std::to_underlying(NativeHashes::SET_ENABLE_RC_DETONATE), void>(set); }
    static inline auto SetEnableRcDetonateOnContact(bool set) { return NativeInvoke::Invoke<2237, std::to_underlying(NativeHashes::SET_ENABLE_RC_DETONATE_ON_CONTACT), void>(set); }
    static inline auto SetEngineHealth(Vehicle vehicle, float health) { return NativeInvoke::Invoke<2238, std::to_underlying(NativeHashes::SET_ENGINE_HEALTH), void>(vehicle, health); }
    static inline auto SetEventPrecedence() { return NativeInvoke::Invoke<2239, std::to_underlying(NativeHashes::SET_EVENT_PRECEDENCE), Any>(); }
    static inline auto SetEveryoneIgnorePlayer(Player playerIndex, bool value) { return NativeInvoke::Invoke<2240, std::to_underlying(NativeHashes::SET_EVERYONE_IGNORE_PLAYER), void>(playerIndex, value); }
    static inline auto SetExtraCarColours(Vehicle vehicle, ColourIndex colour1, ColourIndex colour2) { return NativeInvoke::Invoke<2241, std::to_underlying(NativeHashes::SET_EXTRA_CAR_COLOURS), void>(vehicle, colour1, colour2); }
    static inline auto SetExtraHospitalRestartPoint(float x, float y, float z, float a4, float a5) { return NativeInvoke::Invoke<2242, std::to_underlying(NativeHashes::SET_EXTRA_HOSPITAL_RESTART_POINT), void>(x, y, z, a4, a5); }
    static inline auto SetExtraPoliceStationRestartPoint(float x, float y, float z, float a4, float a5) { return NativeInvoke::Invoke<2243, std::to_underlying(NativeHashes::SET_EXTRA_POLICE_STATION_RESTART_POINT), void>(x, y, z, a4, a5); }
    static inline auto SetFadeInAfterLoad(bool set) { return NativeInvoke::Invoke<2244, std::to_underlying(NativeHashes::SET_FADE_IN_AFTER_LOAD), void>(set); }
    static inline auto SetFakeWantedCircle(float x, float y, float radius) { return NativeInvoke::Invoke<2245, std::to_underlying(NativeHashes::SET_FAKE_WANTED_CIRCLE), void>(x, y, radius); }
    static inline auto SetFakeWantedLevel(int32_t lvl) { return NativeInvoke::Invoke<2246, std::to_underlying(NativeHashes::SET_FAKE_WANTED_LEVEL), void>(lvl); }
    static inline auto SetFilterMenuOn(Any a1) { return NativeInvoke::Invoke<2247, std::to_underlying(NativeHashes::SET_FILTER_MENU_ON), void>(a1); }
    static inline auto SetFilterSaveSetting(int32_t filterid, int32_t setting) { return NativeInvoke::Invoke<2248, std::to_underlying(NativeHashes::SET_FILTER_SAVE_SETTING), void>(filterid, setting); }
    static inline auto SetFixedCamPos(float x, float y, float z) { return NativeInvoke::Invoke<2249, std::to_underlying(NativeHashes::SET_FIXED_CAM_POS), void>(x, y, z); }
    static inline auto SetFloatStat(uint32_t stat, float value) { return NativeInvoke::Invoke<2250, std::to_underlying(NativeHashes::SET_FLOAT_STAT), void>(stat, value); }
    static inline auto SetFollowPedPitchLimitDown(float pitchdownlim) { return NativeInvoke::Invoke<2251, std::to_underlying(NativeHashes::SET_FOLLOW_PED_PITCH_LIMIT_DOWN), void>(pitchdownlim); }
    static inline auto SetFollowPedPitchLimitUp(float pitchuplim) { return NativeInvoke::Invoke<2252, std::to_underlying(NativeHashes::SET_FOLLOW_PED_PITCH_LIMIT_UP), void>(pitchuplim); }
    static inline auto SetFollowVehicleCamOffset(bool a1, float x, float y, float z) { return NativeInvoke::Invoke<2253, std::to_underlying(NativeHashes::SET_FOLLOW_VEHICLE_CAM_OFFSET), void>(a1, x, y, z); }
    static inline auto SetFollowVehicleCamSubmode(int32_t mode) { return NativeInvoke::Invoke<2254, std::to_underlying(NativeHashes::SET_FOLLOW_VEHICLE_CAM_SUBMODE), void>(mode); }
    static inline auto SetFollowVehiclePitchLimitDown(float pitchdownlim) { return NativeInvoke::Invoke<2255, std::to_underlying(NativeHashes::SET_FOLLOW_VEHICLE_PITCH_LIMIT_DOWN), void>(pitchdownlim); }
    static inline auto SetFollowVehiclePitchLimitUp(float pitchuplim) { return NativeInvoke::Invoke<2256, std::to_underlying(NativeHashes::SET_FOLLOW_VEHICLE_PITCH_LIMIT_UP), void>(pitchuplim); }
    static inline auto SetForceLookBehind(bool set) { return NativeInvoke::Invoke<2257, std::to_underlying(NativeHashes::SET_FORCE_LOOK_BEHIND), void>(set); }
    static inline auto SetForcePlayerToEnterThroughDirectDoor(Ped ped, bool set) { return NativeInvoke::Invoke<2258, std::to_underlying(NativeHashes::SET_FORCE_PLAYER_TO_ENTER_THROUGH_DIRECT_DOOR), void>(ped, set); }
    static inline auto SetFovChannelScript(bool set) { return NativeInvoke::Invoke<2259, std::to_underlying(NativeHashes::SET_FOV_CHANNEL_SCRIPT), void>(set); }
    static inline auto SetFreeHealthCare(int32_t player, bool set) { return NativeInvoke::Invoke<2260, std::to_underlying(NativeHashes::SET_FREE_HEALTH_CARE), void>(player, set); }
    static inline auto SetFreeResprays(bool set) { return NativeInvoke::Invoke<2261, std::to_underlying(NativeHashes::SET_FREE_RESPRAYS), void>(set); }
    static inline auto SetFreebiesInVehicle(Vehicle veh, bool set) { return NativeInvoke::Invoke<2262, std::to_underlying(NativeHashes::SET_FREEBIES_IN_VEHICLE), void>(veh, set); }
    static inline auto SetGameCamHeading(float heading) { return NativeInvoke::Invoke<2263, std::to_underlying(NativeHashes::SET_GAME_CAM_HEADING), void>(heading); }
    static inline auto SetGameCamPitch(float pitch) { return NativeInvoke::Invoke<2264, std::to_underlying(NativeHashes::SET_GAME_CAM_PITCH), void>(pitch); }
    static inline auto SetGameCameraControlsActive(bool active) { return NativeInvoke::Invoke<2265, std::to_underlying(NativeHashes::SET_GAME_CAMERA_CONTROLS_ACTIVE), void>(active); }
    static inline auto SetGangCar(Car car, bool set) { return NativeInvoke::Invoke<2266, std::to_underlying(NativeHashes::SET_GANG_CAR), void>(car, set); }
    static inline auto SetGarageLeaveCameraAlone(int32_t garage, bool set) { return NativeInvoke::Invoke<2267, std::to_underlying(NativeHashes::SET_GARAGE_LEAVE_CAMERA_ALONE), void>(garage, set); }
    static inline auto SetGfwlHasSafeHouse(Any a1) { return NativeInvoke::Invoke<2268, std::to_underlying(NativeHashes::SET_GFWL_HAS_SAFE_HOUSE), void>(a1); }
    static inline auto SetGfwlIsReturningToSinglePlayer(Any a1) { return NativeInvoke::Invoke<2269, std::to_underlying(NativeHashes::SET_GFWL_IS_RETURNING_TO_SINGLE_PLAYER), void>(a1); }
    static inline auto SetGlobalInstancePriority(int32_t priority) { return NativeInvoke::Invoke<2270, std::to_underlying(NativeHashes::SET_GLOBAL_INSTANCE_PRIORITY), void>(priority); }
    static inline auto SetGlobalRenderFlags(bool a1, bool a2, bool a3, bool a4) { return NativeInvoke::Invoke<2271, std::to_underlying(NativeHashes::SET_GLOBAL_RENDER_FLAGS), void>(a1, a2, a3, a4); }
    static inline auto SetGpsRemainsWhenTargetReachedFlag(bool set) { return NativeInvoke::Invoke<2272, std::to_underlying(NativeHashes::SET_GPS_REMAINS_WHEN_TARGET_REACHED_FLAG), void>(set); }
    static inline auto SetGpsTestIn3dFlag(bool set) { return NativeInvoke::Invoke<2273, std::to_underlying(NativeHashes::SET_GPS_TEST_IN_3D_FLAG), void>(set); }
    static inline auto SetGpsVoiceForVehicle(Vehicle veh, int32_t VoiceId) { return NativeInvoke::Invoke<2274, std::to_underlying(NativeHashes::SET_GPS_VOICE_FOR_VEHICLE), void>(veh, VoiceId); }
    static inline auto SetGravityOff(bool set) { return NativeInvoke::Invoke<2275, std::to_underlying(NativeHashes::SET_GRAVITY_OFF), void>(set); }
    static inline auto SetGroupCharDecisionMaker(Group group, DecisionMaker dm) { return NativeInvoke::Invoke<2276, std::to_underlying(NativeHashes::SET_GROUP_CHAR_DECISION_MAKER), void>(group, dm); }
    static inline auto SetGroupCharDucksWhenAimedAt(Ped ped, bool value) { return NativeInvoke::Invoke<2277, std::to_underlying(NativeHashes::SET_GROUP_CHAR_DUCKS_WHEN_AIMED_AT), void>(ped, value); }
    static inline auto SetGroupCombatDecisionMaker(Group group, DecisionMaker dm) { return NativeInvoke::Invoke<2278, std::to_underlying(NativeHashes::SET_GROUP_COMBAT_DECISION_MAKER), void>(group, dm); }
    static inline auto SetGroupFollowStatus(Group group, uint32_t status) { return NativeInvoke::Invoke<2279, std::to_underlying(NativeHashes::SET_GROUP_FOLLOW_STATUS), void>(group, status); }
    static inline auto SetGroupFormation(Group group, uint32_t formation) { return NativeInvoke::Invoke<2280, std::to_underlying(NativeHashes::SET_GROUP_FORMATION), void>(group, formation); }
    static inline auto SetGroupFormationSpacing(Group group, float space) { return NativeInvoke::Invoke<2281, std::to_underlying(NativeHashes::SET_GROUP_FORMATION_SPACING), void>(group, space); }
    static inline auto SetGroupLeader(Group group, Ped leader) { return NativeInvoke::Invoke<2282, std::to_underlying(NativeHashes::SET_GROUP_LEADER), void>(group, leader); }
    static inline auto SetGroupMember(Group group, Ped member) { return NativeInvoke::Invoke<2283, std::to_underlying(NativeHashes::SET_GROUP_MEMBER), void>(group, member); }
    static inline auto SetGroupSeparationRange(Group group, float seperation) { return NativeInvoke::Invoke<2284, std::to_underlying(NativeHashes::SET_GROUP_SEPARATION_RANGE), void>(group, seperation); }
    static inline auto SetGunshotSenseRangeForRiot2(float range) { return NativeInvoke::Invoke<2285, std::to_underlying(NativeHashes::SET_GUNSHOT_SENSE_RANGE_FOR_RIOT2), void>(range); }
    static inline auto SetHasBeenOwnedByPlayer(Car car, bool set) { return NativeInvoke::Invoke<2286, std::to_underlying(NativeHashes::SET_HAS_BEEN_OWNED_BY_PLAYER), void>(car, set); }
    static inline auto SetHasBeenOwnedForCarGenerator(int32_t CarGen, bool set) { return NativeInvoke::Invoke<2287, std::to_underlying(NativeHashes::SET_HAS_BEEN_OWNED_FOR_CAR_GENERATOR), void>(CarGen, set); }
    static inline auto SetHeadingForAttachedPlayer() { return NativeInvoke::Invoke<2288, std::to_underlying(NativeHashes::SET_HEADING_FOR_ATTACHED_PLAYER), Any>(); }
    static inline auto SetHeadingLimitForAttachedPed(Ped ped, float heading0, float heading1) { return NativeInvoke::Invoke<2289, std::to_underlying(NativeHashes::SET_HEADING_LIMIT_FOR_ATTACHED_PED), void>(ped, heading0, heading1); }
    static inline auto SetHeadingOfClosestObjectOfType(float x, float y, float z, float radius, uint32_t type_or_model, float heading) { return NativeInvoke::Invoke<2290, std::to_underlying(NativeHashes::SET_HEADING_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, type_or_model, heading); }
    static inline auto SetHealthPickupNetworkRegenTime(Any a1) { return NativeInvoke::Invoke<2291, std::to_underlying(NativeHashes::SET_HEALTH_PICKUP_NETWORK_REGEN_TIME), void>(a1); }
    static inline auto SetHeliBladesFullSpeed(Vehicle heli) { return NativeInvoke::Invoke<2292, std::to_underlying(NativeHashes::SET_HELI_BLADES_FULL_SPEED), void>(heli); }
    static inline auto SetHeliForceEngineOn(Vehicle heli, bool set) { return NativeInvoke::Invoke<2293, std::to_underlying(NativeHashes::SET_HELI_FORCE_ENGINE_ON), int32_t>(heli, set); }
    static inline auto SetHeliStabiliser(Vehicle heli, bool set) { return NativeInvoke::Invoke<2294, std::to_underlying(NativeHashes::SET_HELI_STABILISER), void>(heli, set); }
    static inline auto SetHelpMessageBoxSize(float a1) { return NativeInvoke::Invoke<2295, std::to_underlying(NativeHashes::SET_HELP_MESSAGE_BOX_SIZE), void>(a1); }
    static inline auto SetHelpMessageBoxSizeF(float size) { return NativeInvoke::Invoke<2296, std::to_underlying(NativeHashes::SET_HELP_MESSAGE_BOX_SIZE_F), void>(size); }
    static inline auto SetHideWeaponIcon(bool set) { return NativeInvoke::Invoke<2297, std::to_underlying(NativeHashes::SET_HIDE_WEAPON_ICON), void>(set); }
    static inline auto SetHintAdvancedParams(float a1, float a2, float a3, float a4, bool a5) { return NativeInvoke::Invoke<2298, std::to_underlying(NativeHashes::SET_HINT_ADVANCED_PARAMS), void>(a1, a2, a3, a4, a5); }
    static inline auto SetHintFov(float fov) { return NativeInvoke::Invoke<2299, std::to_underlying(NativeHashes::SET_HINT_FOV), void>(fov); }
    static inline auto SetHintMoveInDist(float dist) { return NativeInvoke::Invoke<2300, std::to_underlying(NativeHashes::SET_HINT_MOVE_IN_DIST), void>(dist); }
    static inline auto SetHintMoveInDistDefault() { return NativeInvoke::Invoke<2301, std::to_underlying(NativeHashes::SET_HINT_MOVE_IN_DIST_DEFAULT), void>(); }
    static inline auto SetHintTimes(float a1, float a2, float a3) { return NativeInvoke::Invoke<2302, std::to_underlying(NativeHashes::SET_HINT_TIMES), void>(a1, a2, a3); }
    static inline auto SetHintTimesDefault() { return NativeInvoke::Invoke<2303, std::to_underlying(NativeHashes::SET_HINT_TIMES_DEFAULT), void>(); }
    static inline auto SetHostMatchOn(Any a1) { return NativeInvoke::Invoke<2304, std::to_underlying(NativeHashes::SET_HOST_MATCH_ON), void>(a1); }
    static inline auto SetHotWeaponSwap(bool set) { return NativeInvoke::Invoke<2305, std::to_underlying(NativeHashes::SET_HOT_WEAPON_SWAP), void>(set); }
    static inline auto SetIgnoreLowPriorityShockingEvents(Ped ped, bool value) { return NativeInvoke::Invoke<2306, std::to_underlying(NativeHashes::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS), void>(ped, value); }
    static inline auto SetIgnoreNoGpsFlag(bool set) { return NativeInvoke::Invoke<2307, std::to_underlying(NativeHashes::SET_IGNORE_NO_GPS_FLAG), void>(set); }
    static inline auto SetIgnoreServerUpdate() { return NativeInvoke::Invoke<2308, std::to_underlying(NativeHashes::SET_IGNORE_SERVER_UPDATE), Any>(); }
    static inline auto SetIkDisabledForNetworkPlayer(Any a1, Any a2) { return NativeInvoke::Invoke<2309, std::to_underlying(NativeHashes::SET_IK_DISABLED_FOR_NETWORK_PLAYER), void>(a1, a2); }
    static inline auto SetInMpTutorial(Any a1) { return NativeInvoke::Invoke<2310, std::to_underlying(NativeHashes::SET_IN_MP_TUTORIAL), void>(a1); }
    static inline auto SetInSpectatorMode(Any a1) { return NativeInvoke::Invoke<2311, std::to_underlying(NativeHashes::SET_IN_SPECTATOR_MODE), void>(a1); }
    static inline auto SetInformRespectedFriends(Ped ped, int a2, int a3) { return NativeInvoke::Invoke<2312, std::to_underlying(NativeHashes::SET_INFORM_RESPECTED_FRIENDS), void>(ped, a2, a3); }
    static inline auto SetInstantWidescreenBorders(bool set) { return NativeInvoke::Invoke<2313, std::to_underlying(NativeHashes::SET_INSTANT_WIDESCREEN_BORDERS), void>(set); }
    static inline auto SetIntStat(uint32_t stat, uint32_t value) { return NativeInvoke::Invoke<2314, std::to_underlying(NativeHashes::SET_INT_STAT), void>(stat, value); }
    static inline auto SetInterpFromGameToScript(bool a1, int a2) { return NativeInvoke::Invoke<2315, std::to_underlying(NativeHashes::SET_INTERP_FROM_GAME_TO_SCRIPT), void>(a1, a2); }
    static inline auto SetInterpFromScriptToGame(bool a1, int a2) { return NativeInvoke::Invoke<2316, std::to_underlying(NativeHashes::SET_INTERP_FROM_SCRIPT_TO_GAME), void>(a1, a2); }
    static inline auto SetInterpInOutVehicleEnabledThisFrame(bool set) { return NativeInvoke::Invoke<2317, std::to_underlying(NativeHashes::SET_INTERP_IN_OUT_VEHICLE_ENABLED_THIS_FRAME), void>(set); }
    static inline auto SetInvincibilityTimerDuration() { return NativeInvoke::Invoke<2318, std::to_underlying(NativeHashes::SET_INVINCIBILITY_TIMER_DURATION), Any>(); }
    static inline auto SetKillstreak() { return NativeInvoke::Invoke<2319, std::to_underlying(NativeHashes::SET_KILLSTREAK), void>(); }
    static inline auto SetLcpdCopScore() { return NativeInvoke::Invoke<2320, std::to_underlying(NativeHashes::SET_LCPD_COP_SCORE), Any>(); }
    static inline auto SetLcpdCriminalScore() { return NativeInvoke::Invoke<2321, std::to_underlying(NativeHashes::SET_LCPD_CRIMINAL_SCORE), Any>(); }
    static inline auto SetLoadCollisionForCarFlag(Car car, bool set) { return NativeInvoke::Invoke<2322, std::to_underlying(NativeHashes::SET_LOAD_COLLISION_FOR_CAR_FLAG), void>(car, set); }
    static inline auto SetLoadCollisionForCharFlag(Ped ped, bool set) { return NativeInvoke::Invoke<2323, std::to_underlying(NativeHashes::SET_LOAD_COLLISION_FOR_CHAR_FLAG), void>(ped, set); }
    static inline auto SetLoadCollisionForObjectFlag(Object obj, bool set) { return NativeInvoke::Invoke<2324, std::to_underlying(NativeHashes::SET_LOAD_COLLISION_FOR_OBJECT_FLAG), void>(obj, set); }
    static inline auto SetLobbyMuteOverride(bool set) { return NativeInvoke::Invoke<2325, std::to_underlying(NativeHashes::SET_LOBBY_MUTE_OVERRIDE), void>(set); }
    static inline auto SetLocalPlayerPainVoice(char* name) { return NativeInvoke::Invoke<2326, std::to_underlying(NativeHashes::SET_LOCAL_PLAYER_PAIN_VOICE), void>(name); }
    static inline auto SetLocalPlayerVoice(char* name) { return NativeInvoke::Invoke<2327, std::to_underlying(NativeHashes::SET_LOCAL_PLAYER_VOICE), void>(name); }
    static inline auto SetLoudVehicleRadio(Vehicle veh, bool set) { return NativeInvoke::Invoke<2328, std::to_underlying(NativeHashes::SET_LOUD_VEHICLE_RADIO), void>(veh, set); }
    static inline auto SetMask(float a1, float a2, float a3, float a4) { return NativeInvoke::Invoke<2329, std::to_underlying(NativeHashes::SET_MASK), void>(a1, a2, a3, a4); }
    static inline auto SetMaxFireGenerations(int32_t max) { return NativeInvoke::Invoke<2330, std::to_underlying(NativeHashes::SET_MAX_FIRE_GENERATIONS), void>(max); }
    static inline auto SetMaxWantedLevel(uint32_t lvl) { return NativeInvoke::Invoke<2331, std::to_underlying(NativeHashes::SET_MAX_WANTED_LEVEL), void>(lvl); }
    static inline auto SetMenuColumn(int32_t menuid, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12, Any a13, Any a14, Any a15) { return NativeInvoke::Invoke<2332, std::to_underlying(NativeHashes::SET_MENU_COLUMN), void>(menuid, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15); }
    static inline auto SetMenuColumnOrientation(int32_t menuid, int32_t column, int32_t orientation) { return NativeInvoke::Invoke<2333, std::to_underlying(NativeHashes::SET_MENU_COLUMN_ORIENTATION), void>(menuid, column, orientation); }
    static inline auto SetMenuColumnWidth(int32_t menuid, int32_t column, float width) { return NativeInvoke::Invoke<2334, std::to_underlying(NativeHashes::SET_MENU_COLUMN_WIDTH), void>(menuid, column, width); }
    static inline auto SetMenuItemWith2Numbers(int32_t menuid, int32_t item, int a3, char* gxtkey, int32_t number0, int32_t number1) { return NativeInvoke::Invoke<2335, std::to_underlying(NativeHashes::SET_MENU_ITEM_WITH_2_NUMBERS), void>(menuid, item, a3, gxtkey, number0, number1); }
    static inline auto SetMenuItemWithNumber(int32_t menuid, int32_t item, int a3, char* gxtkey, int32_t number) { return NativeInvoke::Invoke<2336, std::to_underlying(NativeHashes::SET_MENU_ITEM_WITH_NUMBER), void>(menuid, item, a3, gxtkey, number); }
    static inline auto SetMessageFormatting(bool a1, int a2, int a3) { return NativeInvoke::Invoke<2337, std::to_underlying(NativeHashes::SET_MESSAGE_FORMATTING), void>(a1, a2, a3); }
    static inline auto SetMessagesWaiting(bool set) { return NativeInvoke::Invoke<2338, std::to_underlying(NativeHashes::SET_MESSAGES_WAITING), void>(set); }
    static inline auto SetMinMaxPedAccuracy(Ped ped, float min, float max) { return NativeInvoke::Invoke<2339, std::to_underlying(NativeHashes::SET_MIN_MAX_PED_ACCURACY), void>(ped, min, max); }
    static inline auto SetMinigameInProgress(bool set) { return NativeInvoke::Invoke<2340, std::to_underlying(NativeHashes::SET_MINIGAME_IN_PROGRESS), void>(set); }
    static inline auto SetMissionFlag(bool isMission) { return NativeInvoke::Invoke<2341, std::to_underlying(NativeHashes::SET_MISSION_FLAG), void>(isMission); }
    static inline auto SetMissionPassedCash(bool add, int32_t cash, int a3) { return NativeInvoke::Invoke<2342, std::to_underlying(NativeHashes::SET_MISSION_PASSED_CASH), void>(add, cash, a3); }
    static inline auto SetMissionPickupSound(uint32_t model, char* SoundName) { return NativeInvoke::Invoke<2343, std::to_underlying(NativeHashes::SET_MISSION_PICKUP_SOUND), void>(model, SoundName); }
    static inline auto SetMissionRespectTotal(float respect) { return NativeInvoke::Invoke<2344, std::to_underlying(NativeHashes::SET_MISSION_RESPECT_TOTAL), void>(respect); }
    static inline auto SetMissionTrainCoordinates(Vehicle train, float x, float y, float z) { return NativeInvoke::Invoke<2345, std::to_underlying(NativeHashes::SET_MISSION_TRAIN_COORDINATES), void>(train, x, y, z); }
    static inline auto SetMobilePhonePosition(float x, float y, float z) { return NativeInvoke::Invoke<2346, std::to_underlying(NativeHashes::SET_MOBILE_PHONE_POSITION), void>(x, y, z); }
    static inline auto SetMobilePhoneRadioState(bool state) { return NativeInvoke::Invoke<2347, std::to_underlying(NativeHashes::SET_MOBILE_PHONE_RADIO_STATE), void>(state); }
    static inline auto SetMobilePhoneRotation(float x, float y, float z) { return NativeInvoke::Invoke<2348, std::to_underlying(NativeHashes::SET_MOBILE_PHONE_ROTATION), void>(x, y, z); }
    static inline auto SetMobilePhoneScale(float scale) { return NativeInvoke::Invoke<2349, std::to_underlying(NativeHashes::SET_MOBILE_PHONE_SCALE), void>(scale); }
    static inline auto SetMobileRadioEnabledDuringGameplay(bool set) { return NativeInvoke::Invoke<2350, std::to_underlying(NativeHashes::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY), void>(set); }
    static inline auto SetMobileRingType(int32_t type) { return NativeInvoke::Invoke<2351, std::to_underlying(NativeHashes::SET_MOBILE_RING_TYPE), void>(type); }
    static inline auto SetMoneyCarriedByAllNewPeds(int32_t money) { return NativeInvoke::Invoke<2352, std::to_underlying(NativeHashes::SET_MONEY_CARRIED_BY_ALL_NEW_PEDS), void>(money); }
    static inline auto SetMoneyCarriedByPedWithModel(uint32_t model, int32_t m0, int32_t m1) { return NativeInvoke::Invoke<2353, std::to_underlying(NativeHashes::SET_MONEY_CARRIED_BY_PED_WITH_MODEL), void>(model, m0, m1); }
    static inline auto SetMoneyPickupNetworkRegenTime() { return NativeInvoke::Invoke<2354, std::to_underlying(NativeHashes::SET_MONEY_PICKUP_NETWORK_REGEN_TIME), Any>(); }
    static inline auto SetMovieTime(float time) { return NativeInvoke::Invoke<2355, std::to_underlying(NativeHashes::SET_MOVIE_TIME), void>(time); }
    static inline auto SetMovieVolume(float volume) { return NativeInvoke::Invoke<2356, std::to_underlying(NativeHashes::SET_MOVIE_VOLUME), void>(volume); }
    static inline auto SetMsgForLoadingScreen(Any a1) { return NativeInvoke::Invoke<2357, std::to_underlying(NativeHashes::SET_MSG_FOR_LOADING_SCREEN), void>(a1); }
    static inline auto SetMultiplayerBrief() { return NativeInvoke::Invoke<2358, std::to_underlying(NativeHashes::SET_MULTIPLAYER_BRIEF), Any>(); }
    static inline auto SetMultiplayerHudCash(uint32_t cash) { return NativeInvoke::Invoke<2359, std::to_underlying(NativeHashes::SET_MULTIPLAYER_HUD_CASH), void>(cash); }
    static inline auto SetMultiplayerHudTime(char* str) { return NativeInvoke::Invoke<2360, std::to_underlying(NativeHashes::SET_MULTIPLAYER_HUD_TIME), void>(str); }
    static inline auto SetNeedsToBeHotwired(Vehicle veh, bool set) { return NativeInvoke::Invoke<2361, std::to_underlying(NativeHashes::SET_NEEDS_TO_BE_HOTWIRED), void>(veh, set); }
    static inline auto SetNetworkIdCanMigrate(Any a1, Any a2) { return NativeInvoke::Invoke<2362, std::to_underlying(NativeHashes::SET_NETWORK_ID_CAN_MIGRATE), void>(a1, a2); }
    static inline auto SetNetworkIdExistsOnAllMachines(Any a1, Any a2) { return NativeInvoke::Invoke<2363, std::to_underlying(NativeHashes::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES), void>(a1, a2); }
    static inline auto SetNetworkIdStopCloning(Any a1, Any a2) { return NativeInvoke::Invoke<2364, std::to_underlying(NativeHashes::SET_NETWORK_ID_STOP_CLONING), void>(a1, a2); }
    static inline auto SetNetworkIdStopCloningForEnemies() { return NativeInvoke::Invoke<2365, std::to_underlying(NativeHashes::SET_NETWORK_ID_STOP_CLONING_FOR_ENEMIES), Any>(); }
    static inline auto SetNetworkJoinFail(Any a1) { return NativeInvoke::Invoke<2366, std::to_underlying(NativeHashes::SET_NETWORK_JOIN_FAIL), void>(a1); }
    static inline auto SetNetworkPedUsingParachute(Any a1) { return NativeInvoke::Invoke<2367, std::to_underlying(NativeHashes::SET_NETWORK_PED_USING_PARACHUTE), void>(a1); }
    static inline auto SetNetworkPlayerAsVip(Any a1, Any a2) { return NativeInvoke::Invoke<2368, std::to_underlying(NativeHashes::SET_NETWORK_PLAYER_AS_VIP), void>(a1, a2); }
    static inline auto SetNetworkVehicleRespotTimer(Any a1, Any a2) { return NativeInvoke::Invoke<2369, std::to_underlying(NativeHashes::SET_NETWORK_VEHICLE_RESPOT_TIMER), void>(a1, a2); }
    static inline auto SetNetworkVisibility() { return NativeInvoke::Invoke<2370, std::to_underlying(NativeHashes::SET_NETWORK_VISIBILITY), Any>(); }
    static inline auto SetNextDesiredMoveState(int32_t state) { return NativeInvoke::Invoke<2371, std::to_underlying(NativeHashes::SET_NEXT_DESIRED_MOVE_STATE), void>(state); }
    static inline auto SetNmAnimPose(Ped ped, char* AnimName0, char* AnimName1, float pose) { return NativeInvoke::Invoke<2372, std::to_underlying(NativeHashes::SET_NM_ANIM_POSE), void>(ped, AnimName0, AnimName1, pose); }
    static inline auto SetNmMessageBool(int32_t id, bool value) { return NativeInvoke::Invoke<2373, std::to_underlying(NativeHashes::SET_NM_MESSAGE_BOOL), void>(id, value); }
    static inline auto SetNmMessageFloat(int32_t id, float value) { return NativeInvoke::Invoke<2374, std::to_underlying(NativeHashes::SET_NM_MESSAGE_FLOAT), void>(id, value); }
    static inline auto SetNmMessageInstanceIndex(int32_t id, Ped ped, Car car, Object obj) { return NativeInvoke::Invoke<2375, std::to_underlying(NativeHashes::SET_NM_MESSAGE_INSTANCE_INDEX), void>(id, ped, car, obj); }
    static inline auto SetNmMessageInt(int32_t id, int32_t value) { return NativeInvoke::Invoke<2376, std::to_underlying(NativeHashes::SET_NM_MESSAGE_INT), void>(id, value); }
    static inline auto SetNmMessageString(int32_t id, char* string) { return NativeInvoke::Invoke<2377, std::to_underlying(NativeHashes::SET_NM_MESSAGE_STRING), void>(id, string); }
    static inline auto SetNmMessageVec3(int32_t id, float x, float y, float z) { return NativeInvoke::Invoke<2378, std::to_underlying(NativeHashes::SET_NM_MESSAGE_VEC3), void>(id, x, y, z); }
    static inline auto SetNoResprays(bool set) { return NativeInvoke::Invoke<2379, std::to_underlying(NativeHashes::SET_NO_RESPRAYS), void>(set); }
    static inline auto SetObjectAlpha(Object obj, int32_t alpha) { return NativeInvoke::Invoke<2380, std::to_underlying(NativeHashes::SET_OBJECT_ALPHA), void>(obj, alpha); }
    static inline auto SetObjectAnimCurrentTime(Object obj, char* animname0, char* animname1, float time) { return NativeInvoke::Invoke<2381, std::to_underlying(NativeHashes::SET_OBJECT_ANIM_CURRENT_TIME), void>(obj, animname0, animname1, time); }
    static inline auto SetObjectAnimPlayingFlag(Object obj, char* animname0, char* animname1, bool flag) { return NativeInvoke::Invoke<2382, std::to_underlying(NativeHashes::SET_OBJECT_ANIM_PLAYING_FLAG), void>(obj, animname0, animname1, flag); }
    static inline auto SetObjectAnimSpeed(Object obj, char* animname0, char* animname1, float speed) { return NativeInvoke::Invoke<2383, std::to_underlying(NativeHashes::SET_OBJECT_ANIM_SPEED), void>(obj, animname0, animname1, speed); }
    static inline auto SetObjectAsStealable(Object obj, bool set) { return NativeInvoke::Invoke<2384, std::to_underlying(NativeHashes::SET_OBJECT_AS_STEALABLE), void>(obj, set); }
    static inline auto SetObjectCcd(Object obj, bool set) { return NativeInvoke::Invoke<2385, std::to_underlying(NativeHashes::SET_OBJECT_CCD), void>(obj, set); }
    static inline auto SetObjectCollision(Object obj, bool value) { return NativeInvoke::Invoke<2386, std::to_underlying(NativeHashes::SET_OBJECT_COLLISION), void>(obj, value); }
    static inline auto SetObjectCoordinates(Object obj, float pX, float pY, float pZ) { return NativeInvoke::Invoke<2387, std::to_underlying(NativeHashes::SET_OBJECT_COORDINATES), void>(obj, pX, pY, pZ); }
    static inline auto SetObjectDrawLast(Object obj, bool set) { return NativeInvoke::Invoke<2388, std::to_underlying(NativeHashes::SET_OBJECT_DRAW_LAST), void>(obj, set); }
    static inline auto SetObjectDynamic(Object obj, bool set) { return NativeInvoke::Invoke<2389, std::to_underlying(NativeHashes::SET_OBJECT_DYNAMIC), void>(obj, set); }
    static inline auto SetObjectExistsOnAllMachines() { return NativeInvoke::Invoke<2390, std::to_underlying(NativeHashes::SET_OBJECT_EXISTS_ON_ALL_MACHINES), Any>(); }
    static inline auto SetObjectHeading(Object obj, float value) { return NativeInvoke::Invoke<2391, std::to_underlying(NativeHashes::SET_OBJECT_HEADING), void>(obj, value); }
    static inline auto SetObjectHealth(Object obj, float health) { return NativeInvoke::Invoke<2392, std::to_underlying(NativeHashes::SET_OBJECT_HEALTH), void>(obj, health); }
    static inline auto SetObjectInitialRotationVelocity(Object obj, float x, float y, float z) { return NativeInvoke::Invoke<2393, std::to_underlying(NativeHashes::SET_OBJECT_INITIAL_ROTATION_VELOCITY), void>(obj, x, y, z); }
    static inline auto SetObjectInitialVelocity(Object obj, float x, float y, float z) { return NativeInvoke::Invoke<2394, std::to_underlying(NativeHashes::SET_OBJECT_INITIAL_VELOCITY), void>(obj, x, y, z); }
    static inline auto SetObjectInvincible(Object obj, bool set) { return NativeInvoke::Invoke<2395, std::to_underlying(NativeHashes::SET_OBJECT_INVINCIBLE), void>(obj, set); }
    static inline auto SetObjectLights(Object obj, bool lights) { return NativeInvoke::Invoke<2396, std::to_underlying(NativeHashes::SET_OBJECT_LIGHTS), void>(obj, lights); }
    static inline auto SetObjectOnlyDamagedByPlayer(Object obj, bool set) { return NativeInvoke::Invoke<2397, std::to_underlying(NativeHashes::SET_OBJECT_ONLY_DAMAGED_BY_PLAYER), void>(obj, set); }
    static inline auto SetObjectPhysicsParams(Object obj, float a2, float a3, float v0x00000000, float v0y, float v0z, float v1x, float v1y, float v1z, uint32_t flag0, uint32_t flag1) { return NativeInvoke::Invoke<2398, std::to_underlying(NativeHashes::SET_OBJECT_PHYSICS_PARAMS), void>(obj, a2, a3, v0x00000000, v0y, v0z, v1x, v1y, v1z, flag0, flag1); }
    static inline auto SetObjectProofs(Object obj, bool unknown0, bool fallingDamage, bool unknown1, bool unknown2, bool unknown3) { return NativeInvoke::Invoke<2399, std::to_underlying(NativeHashes::SET_OBJECT_PROOFS), void>(obj, unknown0, fallingDamage, unknown1, unknown2, unknown3); }
    static inline auto SetObjectQuaternion(Object obj, float a2, float a3, float a4, float a5) { return NativeInvoke::Invoke<2400, std::to_underlying(NativeHashes::SET_OBJECT_QUATERNION), void>(obj, a2, a3, a4, a5); }
    static inline auto SetObjectRecordsCollisions(Object obj, bool set) { return NativeInvoke::Invoke<2401, std::to_underlying(NativeHashes::SET_OBJECT_RECORDS_COLLISIONS), void>(obj, set); }
    static inline auto SetObjectRenderScorched(Object obj, bool set) { return NativeInvoke::Invoke<2402, std::to_underlying(NativeHashes::SET_OBJECT_RENDER_SCORCHED), void>(obj, set); }
    static inline auto SetObjectRotation(Object obj, float x, float y, float z) { return NativeInvoke::Invoke<2403, std::to_underlying(NativeHashes::SET_OBJECT_ROTATION), void>(obj, x, y, z); }
    static inline auto SetObjectScale(Object obj, float scale) { return NativeInvoke::Invoke<2404, std::to_underlying(NativeHashes::SET_OBJECT_SCALE), void>(obj, scale); }
    static inline auto SetObjectStopCloning() { return NativeInvoke::Invoke<2405, std::to_underlying(NativeHashes::SET_OBJECT_STOP_CLONING), Any>(); }
    static inline auto SetObjectUsedInPoolGame(Object obj, bool set) { return NativeInvoke::Invoke<2406, std::to_underlying(NativeHashes::SET_OBJECT_USED_IN_POOL_GAME), void>(obj, set); }
    static inline auto SetObjectVisible(Object obj, bool value) { return NativeInvoke::Invoke<2407, std::to_underlying(NativeHashes::SET_OBJECT_VISIBLE), void>(obj, value); }
    static inline auto SetOnlineLan(Any a1) { return NativeInvoke::Invoke<2408, std::to_underlying(NativeHashes::SET_ONLINE_LAN), void>(a1); }
    static inline auto SetOnlineScore(Any a1, Any a2) { return NativeInvoke::Invoke<2409, std::to_underlying(NativeHashes::SET_ONLINE_SCORE), void>(a1, a2); }
    static inline auto SetOnscreenCounterFlashWhenFirstDisplayed(int32_t counterid, bool flash) { return NativeInvoke::Invoke<2410, std::to_underlying(NativeHashes::SET_ONSCREEN_COUNTER_FLASH_WHEN_FIRST_DISPLAYED), void>(counterid, flash); }
    static inline auto SetOverrideNoSprintingOnPhoneInMultiplayer(Any a1) { return NativeInvoke::Invoke<2411, std::to_underlying(NativeHashes::SET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER), void>(a1); }
    static inline auto SetParkedCarDensityMultiplier(float multiplier) { return NativeInvoke::Invoke<2412, std::to_underlying(NativeHashes::SET_PARKED_CAR_DENSITY_MULTIPLIER), void>(multiplier); }
    static inline auto SetPedAllowMissionOnlyDrivebyUse(Ped ped, bool set) { return NativeInvoke::Invoke<2413, std::to_underlying(NativeHashes::SET_PED_ALLOW_MISSION_ONLY_DRIVEBY_USE), void>(ped, set); }
    static inline auto SetPedAlpha(Ped ped, int32_t alpha) { return NativeInvoke::Invoke<2414, std::to_underlying(NativeHashes::SET_PED_ALPHA), void>(ped, alpha); }
    static inline auto SetPedComponentsToNetworkPlayersettingsModel(Ped ped) { return NativeInvoke::Invoke<2415, std::to_underlying(NativeHashes::SET_PED_COMPONENTS_TO_NETWORK_PLAYERSETTINGS_MODEL), void>(ped); }
    static inline auto SetPedDensityMultiplier(float density) { return NativeInvoke::Invoke<2416, std::to_underlying(NativeHashes::SET_PED_DENSITY_MULTIPLIER), void>(density); }
    static inline auto SetPedDiesWhenInjured(Ped ped, bool value) { return NativeInvoke::Invoke<2417, std::to_underlying(NativeHashes::SET_PED_DIES_WHEN_INJURED), void>(ped, value); }
    static inline auto SetPedDontDoEvasiveDives(Ped ped, bool value) { return NativeInvoke::Invoke<2418, std::to_underlying(NativeHashes::SET_PED_DONT_DO_EVASIVE_DIVES), void>(ped, value); }
    static inline auto SetPedDontUseVehicleSpecificAnims(Ped ped, bool set) { return NativeInvoke::Invoke<2419, std::to_underlying(NativeHashes::SET_PED_DONT_USE_VEHICLE_SPECIFIC_ANIMS), void>(ped, set); }
    static inline auto SetPedEnableLegIk(Ped ped, bool set) { return NativeInvoke::Invoke<2420, std::to_underlying(NativeHashes::SET_PED_ENABLE_LEG_IK), void>(ped, set); }
    static inline auto SetPedExistsOnAllMachines(Ped ped, bool exists) { return NativeInvoke::Invoke<2421, std::to_underlying(NativeHashes::SET_PED_EXISTS_ON_ALL_MACHINES), void>(ped, exists); }
    static inline auto SetPedFallOffBikesWhenShot(Ped ped, bool set) { return NativeInvoke::Invoke<2422, std::to_underlying(NativeHashes::SET_PED_FALL_OFF_BIKES_WHEN_SHOT), void>(ped, set); }
    static inline auto SetPedFireFxLodScaler(float scale) { return NativeInvoke::Invoke<2423, std::to_underlying(NativeHashes::SET_PED_FIRE_FX_LOD_SCALER), void>(scale); }
    static inline auto SetPedForceFlyThroughWindscreen(Ped ped, bool set) { return NativeInvoke::Invoke<2424, std::to_underlying(NativeHashes::SET_PED_FORCE_FLY_THROUGH_WINDSCREEN), void>(ped, set); }
    static inline auto SetPedForceVisualiseHeadDamageFromBullets(Ped ped, bool set) { return NativeInvoke::Invoke<2425, std::to_underlying(NativeHashes::SET_PED_FORCE_VISUALISE_HEAD_DAMAGE_FROM_BULLETS), void>(ped, set); }
    static inline auto SetPedGeneratesDeadBodyEvents(Ped ped, bool set) { return NativeInvoke::Invoke<2426, std::to_underlying(NativeHashes::SET_PED_GENERATES_DEAD_BODY_EVENTS), void>(ped, set); }
    static inline auto SetPedHeedsTheEveryoneIgnorePlayerFlag(Ped ped, bool set) { return NativeInvoke::Invoke<2427, std::to_underlying(NativeHashes::SET_PED_HEEDS_THE_EVERYONE_IGNORE_PLAYER_FLAG), void>(ped, set); }
    static inline auto SetPedHeliPilotRespectsMinimummHeight(Ped ped, bool set) { return NativeInvoke::Invoke<2428, std::to_underlying(NativeHashes::SET_PED_HELI_PILOT_RESPECTS_MINIMUMM_HEIGHT), void>(ped, set); }
    static inline auto SetPedHelmetTextureIndex(Ped ped, int32_t index) { return NativeInvoke::Invoke<2429, std::to_underlying(NativeHashes::SET_PED_HELMET_TEXTURE_INDEX), void>(ped, index); }
    static inline auto SetPedInstantBlendsWeaponAnims(Ped ped, bool set) { return NativeInvoke::Invoke<2430, std::to_underlying(NativeHashes::SET_PED_INSTANT_BLENDS_WEAPON_ANIMS), void>(ped, set); }
    static inline auto SetPedIsBlindRaging(Ped ped, bool value) { return NativeInvoke::Invoke<2431, std::to_underlying(NativeHashes::SET_PED_IS_BLIND_RAGING), void>(ped, value); }
    static inline auto SetPedIsDrunk(Ped ped, bool value) { return NativeInvoke::Invoke<2432, std::to_underlying(NativeHashes::SET_PED_IS_DRUNK), void>(ped, value); }
    static inline auto SetPedMobileRingType(Ped ped, int32_t RingtoneId) { return NativeInvoke::Invoke<2433, std::to_underlying(NativeHashes::SET_PED_MOBILE_RING_TYPE), void>(ped, RingtoneId); }
    static inline auto SetPedMotionBlur(Ped ped, bool set) { return NativeInvoke::Invoke<2434, std::to_underlying(NativeHashes::SET_PED_MOTION_BLUR), void>(ped, set); }
    static inline auto SetPedNonCreationArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2435, std::to_underlying(NativeHashes::SET_PED_NON_CREATION_AREA), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SetPedNonRemovalArea(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2436, std::to_underlying(NativeHashes::SET_PED_NON_REMOVAL_AREA), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SetPedPathMayDropFromHeight(Ped ped, bool value) { return NativeInvoke::Invoke<2437, std::to_underlying(NativeHashes::SET_PED_PATH_MAY_DROP_FROM_HEIGHT), void>(ped, value); }
    static inline auto SetPedPathMayUseClimbovers(Ped ped, bool value) { return NativeInvoke::Invoke<2438, std::to_underlying(NativeHashes::SET_PED_PATH_MAY_USE_CLIMBOVERS), void>(ped, value); }
    static inline auto SetPedPathMayUseLadders(Ped ped, bool value) { return NativeInvoke::Invoke<2439, std::to_underlying(NativeHashes::SET_PED_PATH_MAY_USE_LADDERS), void>(ped, value); }
    static inline auto SetPedPathWillAvoidDynamicObjects(Ped ped, bool set) { return NativeInvoke::Invoke<2440, std::to_underlying(NativeHashes::SET_PED_PATH_WILL_AVOID_DYNAMIC_OBJECTS), void>(ped, set); }
    static inline auto SetPedQueueMembershipList() { return NativeInvoke::Invoke<2441, std::to_underlying(NativeHashes::SET_PED_QUEUE_MEMBERSHIP_LIST), Any>(); }
    static inline auto SetPedSkipsComplexCoverCollisionChecks(Ped ped, bool set) { return NativeInvoke::Invoke<2442, std::to_underlying(NativeHashes::SET_PED_SKIPS_COMPLEX_COVER_COLLISION_CHECKS), void>(ped, set); }
    static inline auto SetPedSteersAroundObjects(Ped ped, bool set) { return NativeInvoke::Invoke<2443, std::to_underlying(NativeHashes::SET_PED_STEERS_AROUND_OBJECTS), void>(ped, set); }
    static inline auto SetPedSteersAroundPeds(Ped ped, bool set) { return NativeInvoke::Invoke<2444, std::to_underlying(NativeHashes::SET_PED_STEERS_AROUND_PEDS), void>(ped, set); }
    static inline auto SetPedStopCloning() { return NativeInvoke::Invoke<2445, std::to_underlying(NativeHashes::SET_PED_STOP_CLONING), Any>(); }
    static inline auto SetPedWindyClothingScale(Ped ped, float scale) { return NativeInvoke::Invoke<2446, std::to_underlying(NativeHashes::SET_PED_WINDY_CLOTHING_SCALE), void>(ped, scale); }
    static inline auto SetPedWithBrainCanBeConvertedToDummyPed(Ped ped, bool set) { return NativeInvoke::Invoke<2447, std::to_underlying(NativeHashes::SET_PED_WITH_BRAIN_CAN_BE_CONVERTED_TO_DUMMY_PED), void>(ped, set); }
    static inline auto SetPedWontAttackPlayerWithoutWantedLevel(Ped ped, bool set) { return NativeInvoke::Invoke<2448, std::to_underlying(NativeHashes::SET_PED_WONT_ATTACK_PLAYER_WITHOUT_WANTED_LEVEL), void>(ped, set); }
    static inline auto SetPetrolTankHealth(Vehicle vehicle, float value) { return NativeInvoke::Invoke<2449, std::to_underlying(NativeHashes::SET_PETROL_TANK_HEALTH), void>(vehicle, value); }
    static inline auto SetPetrolTankWeakpoint(Car car, bool set) { return NativeInvoke::Invoke<2450, std::to_underlying(NativeHashes::SET_PETROL_TANK_WEAKPOINT), void>(car, set); }
    static inline auto SetPhoneHudItem(int32_t id, char* gxttext, int a3) { return NativeInvoke::Invoke<2451, std::to_underlying(NativeHashes::SET_PHONE_HUD_ITEM), void>(id, gxttext, a3); }
    static inline auto SetPhysCcdHandlesRotation(bool set) { return NativeInvoke::Invoke<2452, std::to_underlying(NativeHashes::SET_PHYS_CCD_HANDLES_ROTATION), void>(set); }
    static inline auto SetPickupCollectableByCar(Object pickup, bool set) { return NativeInvoke::Invoke<2453, std::to_underlying(NativeHashes::SET_PICKUP_COLLECTABLE_BY_CAR), void>(pickup, set); }
    static inline auto SetPickupsFixCars(bool set) { return NativeInvoke::Invoke<2454, std::to_underlying(NativeHashes::SET_PICKUPS_FIX_CARS), void>(set); }
    static inline auto SetPlaneThrottle(Vehicle plane, float throttle) { return NativeInvoke::Invoke<2455, std::to_underlying(NativeHashes::SET_PLANE_THROTTLE), void>(plane, throttle); }
    static inline auto SetPlaneUndercarriageUp(Vehicle plain, bool set) { return NativeInvoke::Invoke<2456, std::to_underlying(NativeHashes::SET_PLANE_UNDERCARRIAGE_UP), void>(plain, set); }
    static inline auto SetPlaybackSpeed(Car car, float speed) { return NativeInvoke::Invoke<2457, std::to_underlying(NativeHashes::SET_PLAYBACK_SPEED), void>(car, speed); }
    static inline auto SetPlayerAsCop(int32_t player, bool set) { return NativeInvoke::Invoke<2458, std::to_underlying(NativeHashes::SET_PLAYER_AS_COP), void>(player, set); }
    static inline auto SetPlayerAsDamagedPlayer(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2459, std::to_underlying(NativeHashes::SET_PLAYER_AS_DAMAGED_PLAYER), void>(a1, a2, a3); }
    static inline auto SetPlayerCanBeHassledByGangs(Player playerIndex, bool value) { return NativeInvoke::Invoke<2460, std::to_underlying(NativeHashes::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS), void>(playerIndex, value); }
    static inline auto SetPlayerCanDoDriveBy(Player playerIndex, bool value) { return NativeInvoke::Invoke<2461, std::to_underlying(NativeHashes::SET_PLAYER_CAN_DO_DRIVE_BY), void>(playerIndex, value); }
    static inline auto SetPlayerCanDropWeaponsInCar(bool set) { return NativeInvoke::Invoke<2462, std::to_underlying(NativeHashes::SET_PLAYER_CAN_DROP_WEAPONS_IN_CAR), void>(set); }
    static inline auto SetPlayerCanUseCover(Player playerIndex, bool value) { return NativeInvoke::Invoke<2463, std::to_underlying(NativeHashes::SET_PLAYER_CAN_USE_COVER), void>(playerIndex, value); }
    static inline auto SetPlayerColour() { return NativeInvoke::Invoke<2464, std::to_underlying(NativeHashes::SET_PLAYER_COLOUR), Any>(); }
    static inline auto SetPlayerControl(Player playerIndex, bool value) { return NativeInvoke::Invoke<2465, std::to_underlying(NativeHashes::SET_PLAYER_CONTROL), void>(playerIndex, value); }
    static inline auto SetPlayerControlAdvanced(Player playerIndex, bool unknown1, bool unknown2, bool unknown3) { return NativeInvoke::Invoke<2466, std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_ADVANCED), void>(playerIndex, unknown1, unknown2, unknown3); }
    static inline auto SetPlayerControlForAmbientScript(int32_t player, bool flag0, bool flag1) { return NativeInvoke::Invoke<2467, std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_FOR_AMBIENT_SCRIPT), void>(player, flag0, flag1); }
    static inline auto SetPlayerControlForNetwork(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2468, std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_FOR_NETWORK), void>(a1, a2, a3); }
    static inline auto SetPlayerControlForTextChat(int32_t player, bool set) { return NativeInvoke::Invoke<2469, std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_FOR_TEXT_CHAT), void>(player, set); }
    static inline auto SetPlayerControlOnInMissionCleanup(bool set) { return NativeInvoke::Invoke<2470, std::to_underlying(NativeHashes::SET_PLAYER_CONTROL_ON_IN_MISSION_CLEANUP), void>(set); }
    static inline auto SetPlayerDisableCrouch(int32_t player, bool set) { return NativeInvoke::Invoke<2471, std::to_underlying(NativeHashes::SET_PLAYER_DISABLE_CROUCH), void>(player, set); }
    static inline auto SetPlayerDisableJump(int32_t player, bool set) { return NativeInvoke::Invoke<2472, std::to_underlying(NativeHashes::SET_PLAYER_DISABLE_JUMP), void>(player, set); }
    static inline auto SetPlayerFastReload(Player playerIndex, bool value) { return NativeInvoke::Invoke<2473, std::to_underlying(NativeHashes::SET_PLAYER_FAST_RELOAD), void>(playerIndex, value); }
    static inline auto SetPlayerForcedAim(int32_t player, bool set) { return NativeInvoke::Invoke<2474, std::to_underlying(NativeHashes::SET_PLAYER_FORCED_AIM), void>(player, set); }
    static inline auto SetPlayerGroupRecruitment(int32_t player, bool set) { return NativeInvoke::Invoke<2475, std::to_underlying(NativeHashes::SET_PLAYER_GROUP_RECRUITMENT), void>(player, set); }
    static inline auto SetPlayerGroupToFollowAlways(Player playerIndex, bool value) { return NativeInvoke::Invoke<2476, std::to_underlying(NativeHashes::SET_PLAYER_GROUP_TO_FOLLOW_ALWAYS), void>(playerIndex, value); }
    static inline auto SetPlayerGroupToFollowNever(int32_t player, bool set) { return NativeInvoke::Invoke<2477, std::to_underlying(NativeHashes::SET_PLAYER_GROUP_TO_FOLLOW_NEVER), void>(player, set); }
    static inline auto SetPlayerIconColour(int32_t colour) { return NativeInvoke::Invoke<2478, std::to_underlying(NativeHashes::SET_PLAYER_ICON_COLOUR), void>(colour); }
    static inline auto SetPlayerInvincible(Player playerIndex, bool value) { return NativeInvoke::Invoke<2479, std::to_underlying(NativeHashes::SET_PLAYER_INVINCIBLE), void>(playerIndex, value); }
    static inline auto SetPlayerInvisibleToAi(bool set) { return NativeInvoke::Invoke<2480, std::to_underlying(NativeHashes::SET_PLAYER_INVISIBLE_TO_AI), void>(set); }
    static inline auto SetPlayerIsInStadium(bool set) { return NativeInvoke::Invoke<2481, std::to_underlying(NativeHashes::SET_PLAYER_IS_IN_STADIUM), void>(set); }
    static inline auto SetPlayerKeepsWeaponsWhenRespawned(bool set) { return NativeInvoke::Invoke<2482, std::to_underlying(NativeHashes::SET_PLAYER_KEEPS_WEAPONS_WHEN_RESPAWNED), void>(set); }
    static inline auto SetPlayerMayOnlyEnterThisVehicle(int32_t player, Vehicle veh) { return NativeInvoke::Invoke<2483, std::to_underlying(NativeHashes::SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE), void>(player, veh); }
    static inline auto SetPlayerMoodNormal(Player playerIndex) { return NativeInvoke::Invoke<2484, std::to_underlying(NativeHashes::SET_PLAYER_MOOD_NORMAL), void>(playerIndex); }
    static inline auto SetPlayerMoodPissedOff(Player playerIndex, uint32_t unknown150) { return NativeInvoke::Invoke<2485, std::to_underlying(NativeHashes::SET_PLAYER_MOOD_PISSED_OFF), void>(playerIndex, unknown150); }
    static inline auto SetPlayerMpModifier(int32_t player, int a2, float modifier) { return NativeInvoke::Invoke<2486, std::to_underlying(NativeHashes::SET_PLAYER_MP_MODIFIER), void>(player, a2, modifier); }
    static inline auto SetPlayerNeverGetsTired(Player playerIndex, bool value) { return NativeInvoke::Invoke<2487, std::to_underlying(NativeHashes::SET_PLAYER_NEVER_GETS_TIRED), void>(playerIndex, value); }
    static inline auto SetPlayerPainRootBankName(char* name) { return NativeInvoke::Invoke<2488, std::to_underlying(NativeHashes::SET_PLAYER_PAIN_ROOT_BANK_NAME), void>(name); }
    static inline auto SetPlayerPlayerTargetting(bool set) { return NativeInvoke::Invoke<2489, std::to_underlying(NativeHashes::SET_PLAYER_PLAYER_TARGETTING), void>(set); }
    static inline auto SetPlayerSettingsGenre(Ped ped) { return NativeInvoke::Invoke<2490, std::to_underlying(NativeHashes::SET_PLAYER_SETTINGS_GENRE), void>(ped); }
    static inline auto SetPlayerTeam(int32_t Player, int a2) { return NativeInvoke::Invoke<2491, std::to_underlying(NativeHashes::SET_PLAYER_TEAM), void>(Player, a2); }
    static inline auto SetPlayersCanBeInSeparateCars() { return NativeInvoke::Invoke<2492, std::to_underlying(NativeHashes::SET_PLAYERS_CAN_BE_IN_SEPARATE_CARS), Any>(); }
    static inline auto SetPlayersDropMoneyInNetworkGame(Any a1) { return NativeInvoke::Invoke<2493, std::to_underlying(NativeHashes::SET_PLAYERS_DROP_MONEY_IN_NETWORK_GAME), void>(a1); }
    static inline auto SetPlayersettingsModelVariationsChoice(Player playerIndex) { return NativeInvoke::Invoke<2494, std::to_underlying(NativeHashes::SET_PLAYERSETTINGS_MODEL_VARIATIONS_CHOICE), void>(playerIndex); }
    static inline auto SetPoliceFocusWillTrackCar(Car car, bool set) { return NativeInvoke::Invoke<2495, std::to_underlying(NativeHashes::SET_POLICE_FOCUS_WILL_TRACK_CAR), void>(car, set); }
    static inline auto SetPoliceIgnorePlayer(Player playerIndex, bool value) { return NativeInvoke::Invoke<2496, std::to_underlying(NativeHashes::SET_POLICE_IGNORE_PLAYER), void>(playerIndex, value); }
    static inline auto SetPoliceRadarBlips(bool set) { return NativeInvoke::Invoke<2497, std::to_underlying(NativeHashes::SET_POLICE_RADAR_BLIPS), void>(set); }
    static inline auto SetPtfxCamInsideVehicle(bool set) { return NativeInvoke::Invoke<2498, std::to_underlying(NativeHashes::SET_PTFX_CAM_INSIDE_VEHICLE), void>(set); }
    static inline auto SetRadarAsInteriorThisFrame() { return NativeInvoke::Invoke<2499, std::to_underlying(NativeHashes::SET_RADAR_AS_INTERIOR_THIS_FRAME), void>(); }
    static inline auto SetRadarScale(float scale) { return NativeInvoke::Invoke<2500, std::to_underlying(NativeHashes::SET_RADAR_SCALE), void>(scale); }
    static inline auto SetRadarZoom(float zoom) { return NativeInvoke::Invoke<2501, std::to_underlying(NativeHashes::SET_RADAR_ZOOM), void>(zoom); }
    static inline auto SetRailtrackResistanceMult(float resistance) { return NativeInvoke::Invoke<2502, std::to_underlying(NativeHashes::SET_RAILTRACK_RESISTANCE_MULT), void>(resistance); }
    static inline auto SetRandomCarDensityMultiplier(float density) { return NativeInvoke::Invoke<2503, std::to_underlying(NativeHashes::SET_RANDOM_CAR_DENSITY_MULTIPLIER), void>(density); }
    static inline auto SetRandomSeed(int32_t seed) { return NativeInvoke::Invoke<2504, std::to_underlying(NativeHashes::SET_RANDOM_SEED), void>(seed); }
    static inline auto SetRecordingToPointNearestToCoors(Car cat, float x, float y, float z) { return NativeInvoke::Invoke<2505, std::to_underlying(NativeHashes::SET_RECORDING_TO_POINT_NEAREST_TO_COORS), void>(cat, x, y, z); }
    static inline auto SetReducePedModelBudget(bool set) { return NativeInvoke::Invoke<2506, std::to_underlying(NativeHashes::SET_REDUCE_PED_MODEL_BUDGET), void>(set); }
    static inline auto SetReduceVehicleModelBudget(bool set) { return NativeInvoke::Invoke<2507, std::to_underlying(NativeHashes::SET_REDUCE_VEHICLE_MODEL_BUDGET), void>(set); }
    static inline auto SetRelationship(uint32_t relationshipLevel, uint32_t relationshipGroup1, uint32_t relationshipGroup2) { return NativeInvoke::Invoke<2508, std::to_underlying(NativeHashes::SET_RELATIONSHIP), void>(relationshipLevel, relationshipGroup1, relationshipGroup2); }
    static inline auto SetRenderTrainAsDerailed(Vehicle train, bool set) { return NativeInvoke::Invoke<2509, std::to_underlying(NativeHashes::SET_RENDER_TRAIN_AS_DERAILED), void>(train, set); }
    static inline auto SetReturnToFilterMenu(Any a1) { return NativeInvoke::Invoke<2510, std::to_underlying(NativeHashes::SET_RETURN_TO_FILTER_MENU), void>(a1); }
    static inline auto SetRichPresence(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2511, std::to_underlying(NativeHashes::SET_RICH_PRESENCE), void>(a1, a2, a3, a4, a5); }
    static inline auto SetRichPresenceTemplatefilter() { return NativeInvoke::Invoke<2512, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEFILTER), void>(); }
    static inline auto SetRichPresenceTemplatelobby(Any a1) { return NativeInvoke::Invoke<2513, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATELOBBY), void>(a1); }
    static inline auto SetRichPresenceTemplatemp1(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2514, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEMP1), void>(a1, a2, a3, a4); }
    static inline auto SetRichPresenceTemplatemp2(Any a1) { return NativeInvoke::Invoke<2515, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEMP2), void>(a1); }
    static inline auto SetRichPresenceTemplatemp3(int a1, int a2) { return NativeInvoke::Invoke<2516, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEMP3), void>(a1, a2); }
    static inline auto SetRichPresenceTemplatemp4(Any a1, Any a2) { return NativeInvoke::Invoke<2517, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEMP4), void>(a1, a2); }
    static inline auto SetRichPresenceTemplatemp5(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2518, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEMP5), void>(a1, a2, a3); }
    static inline auto SetRichPresenceTemplatemp6(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2519, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEMP6), void>(a1, a2, a3); }
    static inline auto SetRichPresenceTemplateparty() { return NativeInvoke::Invoke<2520, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATEPARTY), void>(); }
    static inline auto SetRichPresenceTemplatesp1(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2521, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATESP1), void>(a1, a2, a3); }
    static inline auto SetRichPresenceTemplatesp2(int a1) { return NativeInvoke::Invoke<2522, std::to_underlying(NativeHashes::SET_RICH_PRESENCE_TEMPLATESP2), void>(a1); }
    static inline auto SetRocketLauncherFreebieInHeli(bool set) { return NativeInvoke::Invoke<2523, std::to_underlying(NativeHashes::SET_ROCKET_LAUNCHER_FREEBIE_IN_HELI), void>(set); }
    static inline auto SetRomansMood(int32_t moood) { return NativeInvoke::Invoke<2524, std::to_underlying(NativeHashes::SET_ROMANS_MOOD), void>(moood); }
    static inline auto SetRoomForCarByKey(Car car, uint32_t roomkey) { return NativeInvoke::Invoke<2525, std::to_underlying(NativeHashes::SET_ROOM_FOR_CAR_BY_KEY), void>(car, roomkey); }
    static inline auto SetRoomForCarByName(Car car, char* roomname) { return NativeInvoke::Invoke<2526, std::to_underlying(NativeHashes::SET_ROOM_FOR_CAR_BY_NAME), void>(car, roomname); }
    static inline auto SetRoomForCharByKey(Ped ped, uint32_t key) { return NativeInvoke::Invoke<2527, std::to_underlying(NativeHashes::SET_ROOM_FOR_CHAR_BY_KEY), void>(ped, key); }
    static inline auto SetRoomForCharByName(Ped ped, char* roomname) { return NativeInvoke::Invoke<2528, std::to_underlying(NativeHashes::SET_ROOM_FOR_CHAR_BY_NAME), void>(ped, roomname); }
    static inline auto SetRoomForDummyCharByKey(Ped dummy, int32_t key) { return NativeInvoke::Invoke<2529, std::to_underlying(NativeHashes::SET_ROOM_FOR_DUMMY_CHAR_BY_KEY), void>(dummy, key); }
    static inline auto SetRoomForDummyCharByName(Ped ped, char* roomname) { return NativeInvoke::Invoke<2530, std::to_underlying(NativeHashes::SET_ROOM_FOR_DUMMY_CHAR_BY_NAME), void>(ped, roomname); }
    static inline auto SetRoomForViewportByKey(int32_t viewportid, uint32_t roomkey) { return NativeInvoke::Invoke<2531, std::to_underlying(NativeHashes::SET_ROOM_FOR_VIEWPORT_BY_KEY), void>(viewportid, roomkey); }
    static inline auto SetRoomForViewportByName(int32_t viewportid, char* roomname) { return NativeInvoke::Invoke<2532, std::to_underlying(NativeHashes::SET_ROOM_FOR_VIEWPORT_BY_NAME), void>(viewportid, roomname); }
    static inline auto SetRopeHeightForObject() { return NativeInvoke::Invoke<2533, std::to_underlying(NativeHashes::SET_ROPE_HEIGHT_FOR_OBJECT), Any>(); }
    static inline auto SetRotOrder(int32_t order) { return NativeInvoke::Invoke<2534, std::to_underlying(NativeHashes::SET_ROT_ORDER), void>(order); }
    static inline auto SetRotationForAttachedPed(Ped ped, float xr, float yr, float zr) { return NativeInvoke::Invoke<2535, std::to_underlying(NativeHashes::SET_ROTATION_FOR_ATTACHED_PED), void>(ped, xr, yr, zr); }
    static inline auto SetRoute(Blip blip, bool value) { return NativeInvoke::Invoke<2536, std::to_underlying(NativeHashes::SET_ROUTE), void>(blip, value); }
    static inline auto SetScenarioPedDensityMultiplier(float density, float densitynext) { return NativeInvoke::Invoke<2537, std::to_underlying(NativeHashes::SET_SCENARIO_PED_DENSITY_MULTIPLIER), void>(density, densitynext); }
    static inline auto SetScreenFade(int32_t viewportid, int a2, int a3, bool a4, int32_t r, int32_t g, int32_t b, int32_t a, int a9, float a10, float a11) { return NativeInvoke::Invoke<2538, std::to_underlying(NativeHashes::SET_SCREEN_FADE), void>(viewportid, a2, a3, a4, r, g, b, a, a9, a10, a11); }
    static inline auto SetScriptFireAudio() { return NativeInvoke::Invoke<2539, std::to_underlying(NativeHashes::SET_SCRIPT_FIRE_AUDIO), Any>(); }
    static inline auto SetScriptLimitToGangSize(int32_t size) { return NativeInvoke::Invoke<2540, std::to_underlying(NativeHashes::SET_SCRIPT_LIMIT_TO_GANG_SIZE), void>(size); }
    static inline auto SetScriptMicLookAt(float x, float y, float z) { return NativeInvoke::Invoke<2541, std::to_underlying(NativeHashes::SET_SCRIPT_MIC_LOOK_AT), void>(x, y, z); }
    static inline auto SetScriptMicPosition(float x, float y, float z) { return NativeInvoke::Invoke<2542, std::to_underlying(NativeHashes::SET_SCRIPT_MIC_POSITION), void>(x, y, z); }
    static inline auto SetScriptedAnimSeatOffset(Ped ped, float offset) { return NativeInvoke::Invoke<2543, std::to_underlying(NativeHashes::SET_SCRIPTED_ANIM_SEAT_OFFSET), void>(ped, offset); }
    static inline auto SetScriptedConversionCentre(float x, float y, float z) { return NativeInvoke::Invoke<2544, std::to_underlying(NativeHashes::SET_SCRIPTED_CONVERSION_CENTRE), void>(x, y, z); }
    static inline auto SetSelectedMenuItem(int32_t menuid, int32_t item) { return NativeInvoke::Invoke<2545, std::to_underlying(NativeHashes::SET_SELECTED_MENU_ITEM), void>(menuid, item); }
    static inline auto SetSenseRange(Ped ped, float value) { return NativeInvoke::Invoke<2546, std::to_underlying(NativeHashes::SET_SENSE_RANGE), void>(ped, value); }
    static inline auto SetSequenceToRepeat(int32_t seq, int32_t repeat) { return NativeInvoke::Invoke<2547, std::to_underlying(NativeHashes::SET_SEQUENCE_TO_REPEAT), void>(seq, repeat); }
    static inline auto SetServerId(Any a1) { return NativeInvoke::Invoke<2548, std::to_underlying(NativeHashes::SET_SERVER_ID), void>(a1); }
    static inline auto SetSirenWithNoDriver(Car car, bool set) { return NativeInvoke::Invoke<2549, std::to_underlying(NativeHashes::SET_SIREN_WITH_NO_DRIVER), void>(car, set); }
    static inline auto SetSleepModeActive(bool set) { return NativeInvoke::Invoke<2550, std::to_underlying(NativeHashes::SET_SLEEP_MODE_ACTIVE), void>(set); }
    static inline auto SetSniperZoomFactor(float factor) { return NativeInvoke::Invoke<2551, std::to_underlying(NativeHashes::SET_SNIPER_ZOOM_FACTOR), void>(factor); }
    static inline auto SetSpecificPassengerIndexToUseInGroups(Ped ped, int32_t index) { return NativeInvoke::Invoke<2552, std::to_underlying(NativeHashes::SET_SPECIFIC_PASSENGER_INDEX_TO_USE_IN_GROUPS), void>(ped, index); }
    static inline auto SetSpriteHdrMultiplier(float multiplier) { return NativeInvoke::Invoke<2553, std::to_underlying(NativeHashes::SET_SPRITE_HDR_MULTIPLIER), void>(multiplier); }
    static inline auto SetSpritesDrawBeforeFade(bool set) { return NativeInvoke::Invoke<2554, std::to_underlying(NativeHashes::SET_SPRITES_DRAW_BEFORE_FADE), void>(set); }
    static inline auto SetStartFromFilterMenu(Any a1) { return NativeInvoke::Invoke<2555, std::to_underlying(NativeHashes::SET_START_FROM_FILTER_MENU), void>(a1); }
    static inline auto SetStatFrontendAlwaysVisible(bool set) { return NativeInvoke::Invoke<2556, std::to_underlying(NativeHashes::SET_STAT_FRONTEND_ALWAYS_VISIBLE), void>(set); }
    static inline auto SetStatFrontendDisplayType(int32_t stat, int32_t type) { return NativeInvoke::Invoke<2557, std::to_underlying(NativeHashes::SET_STAT_FRONTEND_DISPLAY_TYPE), void>(stat, type); }
    static inline auto SetStatFrontendNeverVisible(int32_t stat) { return NativeInvoke::Invoke<2558, std::to_underlying(NativeHashes::SET_STAT_FRONTEND_NEVER_VISIBLE), void>(stat); }
    static inline auto SetStatFrontendVisibility(int32_t stat, bool set) { return NativeInvoke::Invoke<2559, std::to_underlying(NativeHashes::SET_STAT_FRONTEND_VISIBILITY), void>(stat, set); }
    static inline auto SetStatFrontendVisibleAfterIncremented(int32_t stat) { return NativeInvoke::Invoke<2560, std::to_underlying(NativeHashes::SET_STAT_FRONTEND_VISIBLE_AFTER_INCREMENTED), void>(stat); }
    static inline auto SetStateOfClosestDoorOfType(uint32_t model, float x, float y, float z, int32_t state, float a6) { return NativeInvoke::Invoke<2561, std::to_underlying(NativeHashes::SET_STATE_OF_CLOSEST_DOOR_OF_TYPE), void>(model, x, y, z, state, a6); }
    static inline auto SetStreamParams(float rolloff, int32_t UnkTime) { return NativeInvoke::Invoke<2562, std::to_underlying(NativeHashes::SET_STREAM_PARAMS), void>(rolloff, UnkTime); }
    static inline auto SetStreamingRequestListTime(int32_t time) { return NativeInvoke::Invoke<2563, std::to_underlying(NativeHashes::SET_STREAMING_REQUEST_LIST_TIME), void>(time); }
    static inline auto SetSuppressHeadlightSwitch(bool set) { return NativeInvoke::Invoke<2564, std::to_underlying(NativeHashes::SET_SUPPRESS_HEADLIGHT_SWITCH), void>(set); }
    static inline auto SetSwimSpeed(Ped ped, float speed) { return NativeInvoke::Invoke<2565, std::to_underlying(NativeHashes::SET_SWIM_SPEED), void>(ped, speed); }
    static inline auto SetSyncWeatherAndGameTime(Any a1) { return NativeInvoke::Invoke<2566, std::to_underlying(NativeHashes::SET_SYNC_WEATHER_AND_GAME_TIME), void>(a1); }
    static inline auto SetTargetCarForMissionGarage(int32_t garage, Car car) { return NativeInvoke::Invoke<2567, std::to_underlying(NativeHashes::SET_TARGET_CAR_FOR_MISSION_GARAGE), void>(garage, car); }
    static inline auto SetTaxiGarageRadioState(bool radiostate) { return NativeInvoke::Invoke<2568, std::to_underlying(NativeHashes::SET_TAXI_GARAGE_RADIO_STATE), void>(radiostate); }
    static inline auto SetTaxiLights(Car car, bool set) { return NativeInvoke::Invoke<2569, std::to_underlying(NativeHashes::SET_TAXI_LIGHTS), void>(car, set); }
    static inline auto SetTeamColour() { return NativeInvoke::Invoke<2570, std::to_underlying(NativeHashes::SET_TEAM_COLOUR), Any>(); }
    static inline auto SetTelescopeCamAngleLimits(float a1, float a2, float a3, float a4, float a5, float a6) { return NativeInvoke::Invoke<2571, std::to_underlying(NativeHashes::SET_TELESCOPE_CAM_ANGLE_LIMITS), void>(a1, a2, a3, a4, a5, a6); }
    static inline auto SetTextBackground(bool value) { return NativeInvoke::Invoke<2572, std::to_underlying(NativeHashes::SET_TEXT_BACKGROUND), void>(value); }
    static inline auto SetTextCentre(bool value) { return NativeInvoke::Invoke<2573, std::to_underlying(NativeHashes::SET_TEXT_CENTRE), void>(value); }
    static inline auto SetTextColour(uint32_t r, uint32_t g, uint32_t b, uint32_t a) { return NativeInvoke::Invoke<2574, std::to_underlying(NativeHashes::SET_TEXT_COLOUR), void>(r, g, b, a); }
    static inline auto SetTextDrawBeforeFade(bool value) { return NativeInvoke::Invoke<2575, std::to_underlying(NativeHashes::SET_TEXT_DRAW_BEFORE_FADE), void>(value); }
    static inline auto SetTextDropshadow(bool displayShadow, uint32_t r, uint32_t g, uint32_t b, uint32_t a) { return NativeInvoke::Invoke<2576, std::to_underlying(NativeHashes::SET_TEXT_DROPSHADOW), void>(displayShadow, r, g, b, a); }
    static inline auto SetTextEdge(bool displayEdge, uint32_t r, uint32_t g, uint32_t b, uint32_t a) { return NativeInvoke::Invoke<2577, std::to_underlying(NativeHashes::SET_TEXT_EDGE), void>(displayEdge, r, g, b, a); }
    static inline auto SetTextFont(uint32_t font) { return NativeInvoke::Invoke<2578, std::to_underlying(NativeHashes::SET_TEXT_FONT), void>(font); }
    static inline auto SetTextInputActive(bool set) { return NativeInvoke::Invoke<2579, std::to_underlying(NativeHashes::SET_TEXT_INPUT_ACTIVE), void>(set); }
    static inline auto SetTextJustify(bool value) { return NativeInvoke::Invoke<2580, std::to_underlying(NativeHashes::SET_TEXT_JUSTIFY), void>(value); }
    static inline auto SetTextLineDisplay(uint32_t unk1, uint32_t unk2) { return NativeInvoke::Invoke<2581, std::to_underlying(NativeHashes::SET_TEXT_LINE_DISPLAY), void>(unk1, unk2); }
    static inline auto SetTextLineHeightMult(float lineHeight) { return NativeInvoke::Invoke<2582, std::to_underlying(NativeHashes::SET_TEXT_LINE_HEIGHT_MULT), void>(lineHeight); }
    static inline auto SetTextProportional(bool value) { return NativeInvoke::Invoke<2583, std::to_underlying(NativeHashes::SET_TEXT_PROPORTIONAL), void>(value); }
    static inline auto SetTextRenderId(uint32_t renderId) { return NativeInvoke::Invoke<2584, std::to_underlying(NativeHashes::SET_TEXT_RENDER_ID), void>(renderId); }
    static inline auto SetTextRightJustify(bool value) { return NativeInvoke::Invoke<2585, std::to_underlying(NativeHashes::SET_TEXT_RIGHT_JUSTIFY), void>(value); }
    static inline auto SetTextScale(float w, float h) { return NativeInvoke::Invoke<2586, std::to_underlying(NativeHashes::SET_TEXT_SCALE), void>(w, h); }
    static inline auto SetTextToUseTextFileColours(bool value) { return NativeInvoke::Invoke<2587, std::to_underlying(NativeHashes::SET_TEXT_TO_USE_TEXT_FILE_COLOURS), void>(value); }
    static inline auto SetTextUseUnderscore(bool value) { return NativeInvoke::Invoke<2588, std::to_underlying(NativeHashes::SET_TEXT_USE_UNDERSCORE), void>(value); }
    static inline auto SetTextViewportId(int32_t id) { return NativeInvoke::Invoke<2589, std::to_underlying(NativeHashes::SET_TEXT_VIEWPORT_ID), void>(id); }
    static inline auto SetTextWrap(float unk1, float unk2) { return NativeInvoke::Invoke<2590, std::to_underlying(NativeHashes::SET_TEXT_WRAP), void>(unk1, unk2); }
    static inline auto SetThisMachineRunningServerScript(Any a1) { return NativeInvoke::Invoke<2591, std::to_underlying(NativeHashes::SET_THIS_MACHINE_RUNNING_SERVER_SCRIPT), void>(a1); }
    static inline auto SetThisScriptCanRemoveBlipsCreatedByAnyScript(bool allow) { return NativeInvoke::Invoke<2592, std::to_underlying(NativeHashes::SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT), void>(allow); }
    static inline auto SetTimeCycleFarClipDisabled(bool set) { return NativeInvoke::Invoke<2593, std::to_underlying(NativeHashes::SET_TIME_CYCLE_FAR_CLIP_DISABLED), void>(set); }
    static inline auto SetTimeOfDay(uint32_t hour, uint32_t minute) { return NativeInvoke::Invoke<2594, std::to_underlying(NativeHashes::SET_TIME_OF_DAY), void>(hour, minute); }
    static inline auto SetTimeOfNextAppointment(int32_t time) { return NativeInvoke::Invoke<2595, std::to_underlying(NativeHashes::SET_TIME_OF_NEXT_APPOINTMENT), void>(time); }
    static inline auto SetTimeOneDayBack() { return NativeInvoke::Invoke<2596, std::to_underlying(NativeHashes::SET_TIME_ONE_DAY_BACK), void>(); }
    static inline auto SetTimeOneDayForward() { return NativeInvoke::Invoke<2597, std::to_underlying(NativeHashes::SET_TIME_ONE_DAY_FORWARD), void>(); }
    static inline auto SetTimeScale(float scale) { return NativeInvoke::Invoke<2598, std::to_underlying(NativeHashes::SET_TIME_SCALE), void>(scale); }
    static inline auto SetTimecycleModifier(char* name) { return NativeInvoke::Invoke<2599, std::to_underlying(NativeHashes::SET_TIMECYCLE_MODIFIER), void>(name); }
    static inline auto SetTimerBeepCountdownTime(int32_t timerid, int32_t beeptime) { return NativeInvoke::Invoke<2600, std::to_underlying(NativeHashes::SET_TIMER_BEEP_COUNTDOWN_TIME), void>(timerid, beeptime); }
    static inline auto SetTotalNumberOfMissions(float floatstatval) { return NativeInvoke::Invoke<2601, std::to_underlying(NativeHashes::SET_TOTAL_NUMBER_OF_MISSIONS), void>(floatstatval); }
    static inline auto SetTrainAudioRolloff(Vehicle train, float rolloff) { return NativeInvoke::Invoke<2602, std::to_underlying(NativeHashes::SET_TRAIN_AUDIO_ROLLOFF), void>(train, rolloff); }
    static inline auto SetTrainCruiseSpeed(Vehicle train, float speed) { return NativeInvoke::Invoke<2603, std::to_underlying(NativeHashes::SET_TRAIN_CRUISE_SPEED), void>(train, speed); }
    static inline auto SetTrainForcedToSlowDown(Vehicle train, bool set) { return NativeInvoke::Invoke<2604, std::to_underlying(NativeHashes::SET_TRAIN_FORCED_TO_SLOW_DOWN), void>(train, set); }
    static inline auto SetTrainIsStoppedAtStation(Vehicle train) { return NativeInvoke::Invoke<2605, std::to_underlying(NativeHashes::SET_TRAIN_IS_STOPPED_AT_STATION), void>(train); }
    static inline auto SetTrainSpeed(Vehicle train, float speed) { return NativeInvoke::Invoke<2606, std::to_underlying(NativeHashes::SET_TRAIN_SPEED), void>(train, speed); }
    static inline auto SetTrainStopsForStations(Vehicle train, bool set) { return NativeInvoke::Invoke<2607, std::to_underlying(NativeHashes::SET_TRAIN_STOPS_FOR_STATIONS), void>(train, set); }
    static inline auto SetUpTripSkip() { return NativeInvoke::Invoke<2608, std::to_underlying(NativeHashes::SET_UP_TRIP_SKIP), Any>(); }
    static inline auto SetUpTripSkipAfterMission() { return NativeInvoke::Invoke<2609, std::to_underlying(NativeHashes::SET_UP_TRIP_SKIP_AFTER_MISSION), Any>(); }
    static inline auto SetUpTripSkipForSpecificVehicle(float a1, float a2, float a3, float a4, Vehicle veh) { return NativeInvoke::Invoke<2610, std::to_underlying(NativeHashes::SET_UP_TRIP_SKIP_FOR_SPECIFIC_VEHICLE), void>(a1, a2, a3, a4, veh); }
    static inline auto SetUpTripSkipForVehicleFinishedByScript() { return NativeInvoke::Invoke<2611, std::to_underlying(NativeHashes::SET_UP_TRIP_SKIP_FOR_VEHICLE_FINISHED_BY_SCRIPT), Any>(); }
    static inline auto SetUpTripSkipToBeFinishedByScript() { return NativeInvoke::Invoke<2612, std::to_underlying(NativeHashes::SET_UP_TRIP_SKIP_TO_BE_FINISHED_BY_SCRIPT), Any>(); }
    static inline auto SetUpsidedownCarNotDamaged(Car car, bool set) { return NativeInvoke::Invoke<2613, std::to_underlying(NativeHashes::SET_UPSIDEDOWN_CAR_NOT_DAMAGED), void>(car, set); }
    static inline auto SetUseHighdof(bool set) { return NativeInvoke::Invoke<2614, std::to_underlying(NativeHashes::SET_USE_HIGHDOF), void>(set); }
    static inline auto SetUseLegIk(int32_t player, bool set) { return NativeInvoke::Invoke<2615, std::to_underlying(NativeHashes::SET_USE_LEG_IK), void>(player, set); }
    static inline auto SetUsePoolGamePhysicsSettings(bool set) { return NativeInvoke::Invoke<2616, std::to_underlying(NativeHashes::SET_USE_POOL_GAME_PHYSICS_SETTINGS), void>(set); }
    static inline auto SetUsesCollisionOfClosestObjectOfType(float x, float y, float z, float radius, uint32_t type_or_model, bool flag) { return NativeInvoke::Invoke<2617, std::to_underlying(NativeHashes::SET_USES_COLLISION_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, type_or_model, flag); }
    static inline auto SetVariableOnSound(uint32_t sound, char* varname, float value) { return NativeInvoke::Invoke<2618, std::to_underlying(NativeHashes::SET_VARIABLE_ON_SOUND), void>(sound, varname, value); }
    static inline auto SetVehAlarm(Vehicle veh, bool set) { return NativeInvoke::Invoke<2619, std::to_underlying(NativeHashes::SET_VEH_ALARM), void>(veh, set); }
    static inline auto SetVehAlarmDuration(Vehicle veh, int32_t duration) { return NativeInvoke::Invoke<2620, std::to_underlying(NativeHashes::SET_VEH_ALARM_DURATION), void>(veh, duration); }
    static inline auto SetVehHasStrongAxles(Vehicle veh, bool set) { return NativeInvoke::Invoke<2621, std::to_underlying(NativeHashes::SET_VEH_HAS_STRONG_AXLES), void>(veh, set); }
    static inline auto SetVehHazardlights(Vehicle vehicle, bool on) { return NativeInvoke::Invoke<2622, std::to_underlying(NativeHashes::SET_VEH_HAZARDLIGHTS), void>(vehicle, on); }
    static inline auto SetVehIndicatorlights(Vehicle veh, bool set) { return NativeInvoke::Invoke<2623, std::to_underlying(NativeHashes::SET_VEH_INDICATORLIGHTS), void>(veh, set); }
    static inline auto SetVehInteriorlight(Vehicle veh, bool set) { return NativeInvoke::Invoke<2624, std::to_underlying(NativeHashes::SET_VEH_INTERIORLIGHT), void>(veh, set); }
    static inline auto SetVehicleAlpha(Vehicle veh, int32_t alpha) { return NativeInvoke::Invoke<2625, std::to_underlying(NativeHashes::SET_VEHICLE_ALPHA), void>(veh, alpha); }
    static inline auto SetVehicleAlwaysRender(Vehicle veh) { return NativeInvoke::Invoke<2626, std::to_underlying(NativeHashes::SET_VEHICLE_ALWAYS_RENDER), void>(veh); }
    static inline auto SetVehicleCanBeTargetted(Vehicle veh, bool set) { return NativeInvoke::Invoke<2627, std::to_underlying(NativeHashes::SET_VEHICLE_CAN_BE_TARGETTED), void>(veh, set); }
    static inline auto SetVehicleDeformationMult(Vehicle veh, float multiplier) { return NativeInvoke::Invoke<2628, std::to_underlying(NativeHashes::SET_VEHICLE_DEFORMATION_MULT), void>(veh, multiplier); }
    static inline auto SetVehicleDirtLevel(Vehicle vehicle, float intensity) { return NativeInvoke::Invoke<2629, std::to_underlying(NativeHashes::SET_VEHICLE_DIRT_LEVEL), void>(vehicle, intensity); }
    static inline auto SetVehicleExplodesOnHighExplosionDamage(Vehicle veh, bool set) { return NativeInvoke::Invoke<2630, std::to_underlying(NativeHashes::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE), void>(veh, set); }
    static inline auto SetVehicleIsConsideredByPlayer(Vehicle veh, bool set) { return NativeInvoke::Invoke<2631, std::to_underlying(NativeHashes::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER), void>(veh, set); }
    static inline auto SetVehicleQuaternion(Vehicle veh, float a2, float a3, float a4, float a5) { return NativeInvoke::Invoke<2632, std::to_underlying(NativeHashes::SET_VEHICLE_QUATERNION), void>(veh, a2, a3, a4, a5); }
    static inline auto SetVehicleRenderScorched(Vehicle veh, bool set) { return NativeInvoke::Invoke<2633, std::to_underlying(NativeHashes::SET_VEHICLE_RENDER_SCORCHED), void>(veh, set); }
    static inline auto SetVehicleSteerBias(Vehicle veh, float val) { return NativeInvoke::Invoke<2634, std::to_underlying(NativeHashes::SET_VEHICLE_STEER_BIAS), void>(veh, val); }
    static inline auto SetViewport(int32_t viewportid, float a2, float a3, float a4, float a5) { return NativeInvoke::Invoke<2635, std::to_underlying(NativeHashes::SET_VIEWPORT), void>(viewportid, a2, a3, a4, a5); }
    static inline auto SetViewportDestination(int32_t viewportid, float x, float y, float z, float a5, int a6, int a7) { return NativeInvoke::Invoke<2636, std::to_underlying(NativeHashes::SET_VIEWPORT_DESTINATION), void>(viewportid, x, y, z, a5, a6, a7); }
    static inline auto SetViewportMirrored(int32_t viewportid, bool set) { return NativeInvoke::Invoke<2637, std::to_underlying(NativeHashes::SET_VIEWPORT_MIRRORED), void>(viewportid, set); }
    static inline auto SetViewportPriority(int32_t viewportid, int32_t priority) { return NativeInvoke::Invoke<2638, std::to_underlying(NativeHashes::SET_VIEWPORT_PRIORITY), void>(viewportid, priority); }
    static inline auto SetViewportShape(int32_t cam, int32_t shape) { return NativeInvoke::Invoke<2639, std::to_underlying(NativeHashes::SET_VIEWPORT_SHAPE), void>(cam, shape); }
    static inline auto SetVisibilityOfClosestObjectOfType(float x, float y, float z, float radius, uint32_t type_or_model, bool set) { return NativeInvoke::Invoke<2640, std::to_underlying(NativeHashes::SET_VISIBILITY_OF_CLOSEST_OBJECT_OF_TYPE), void>(x, y, z, radius, type_or_model, set); }
    static inline auto SetVisibilityOfNearbyEntityWithSpecialAttribute(int32_t attribute, bool set) { return NativeInvoke::Invoke<2641, std::to_underlying(NativeHashes::SET_VISIBILITY_OF_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE), void>(attribute, set); }
    static inline auto SetVoiceIdFromHeadComponent(Ped ped, int32_t VoiceId, bool IsMale) { return NativeInvoke::Invoke<2642, std::to_underlying(NativeHashes::SET_VOICE_ID_FROM_HEAD_COMPONENT), void>(ped, VoiceId, IsMale); }
    static inline auto SetWantedMultiplier(float multiplier) { return NativeInvoke::Invoke<2643, std::to_underlying(NativeHashes::SET_WANTED_MULTIPLIER), void>(multiplier); }
    static inline auto SetWeaponPickupNetworkRegenTime(Any a1, Any a2) { return NativeInvoke::Invoke<2644, std::to_underlying(NativeHashes::SET_WEAPON_PICKUP_NETWORK_REGEN_TIME), void>(a1, a2); }
    static inline auto SetWebPageLinkActive(int32_t htmlviewport, int32_t linkid, bool active) { return NativeInvoke::Invoke<2645, std::to_underlying(NativeHashes::SET_WEB_PAGE_LINK_ACTIVE), void>(htmlviewport, linkid, active); }
    static inline auto SetWebPageScroll(int32_t htmlviewport, float scroll) { return NativeInvoke::Invoke<2646, std::to_underlying(NativeHashes::SET_WEB_PAGE_SCROLL), void>(htmlviewport, scroll); }
    static inline auto SetWidescreenBorders(bool set) { return NativeInvoke::Invoke<2647, std::to_underlying(NativeHashes::SET_WIDESCREEN_BORDERS), void>(set); }
    static inline auto SetWidescreenFormat(int32_t wideformatid) { return NativeInvoke::Invoke<2648, std::to_underlying(NativeHashes::SET_WIDESCREEN_FORMAT), void>(wideformatid); }
    static inline auto SetZoneNoCops(char* name, bool set) { return NativeInvoke::Invoke<2649, std::to_underlying(NativeHashes::SET_ZONE_NO_COPS), void>(name, set); }
    static inline auto SetZonePopulationType(char* zone, int32_t poptype) { return NativeInvoke::Invoke<2650, std::to_underlying(NativeHashes::SET_ZONE_POPULATION_TYPE), void>(zone, poptype); }
    static inline auto SetZoneScumminess(char* zone, int32_t scumminess) { return NativeInvoke::Invoke<2651, std::to_underlying(NativeHashes::SET_ZONE_SCUMMINESS), void>(zone, scumminess); }
    static inline auto Settimera(uint32_t value) { return NativeInvoke::Invoke<2652, std::to_underlying(NativeHashes::SETTIMERA), void>(value); }
    static inline auto Settimerb(uint32_t value) { return NativeInvoke::Invoke<2653, std::to_underlying(NativeHashes::SETTIMERB), void>(value); }
    static inline auto Settimerc(int a1) { return NativeInvoke::Invoke<2654, std::to_underlying(NativeHashes::SETTIMERC), void>(a1); }
    static inline auto ShakePad(int a1, int a2, int a3) { return NativeInvoke::Invoke<2655, std::to_underlying(NativeHashes::SHAKE_PAD), void>(a1, a2, a3); }
    static inline auto ShakePadInCutscene(int a1, int a2, int a3) { return NativeInvoke::Invoke<2656, std::to_underlying(NativeHashes::SHAKE_PAD_IN_CUTSCENE), void>(a1, a2, a3); }
    static inline auto ShakePlayerpadWhenControllerDisabled() { return NativeInvoke::Invoke<2657, std::to_underlying(NativeHashes::SHAKE_PLAYERPAD_WHEN_CONTROLLER_DISABLED), void>(); }
    static inline auto ShiftLeft(int32_t val) { return NativeInvoke::Invoke<2658, std::to_underlying(NativeHashes::SHIFT_LEFT), int32_t>(val); }
    static inline auto ShiftRight(int32_t val) { return NativeInvoke::Invoke<2659, std::to_underlying(NativeHashes::SHIFT_RIGHT), int32_t>(val); }
    static inline auto ShowBlipOnAltimeter(int32_t blip, bool show) { return NativeInvoke::Invoke<2660, std::to_underlying(NativeHashes::SHOW_BLIP_ON_ALTIMETER), void>(blip, show); }
    static inline auto ShowSigninUi() { return NativeInvoke::Invoke<2661, std::to_underlying(NativeHashes::SHOW_SIGNIN_UI), void>(); }
    static inline auto ShowUpdateStats(bool show) { return NativeInvoke::Invoke<2662, std::to_underlying(NativeHashes::SHOW_UPDATE_STATS), void>(show); }
    static inline auto ShutCarDoor(Vehicle vehicle, uint32_t door) { return NativeInvoke::Invoke<2663, std::to_underlying(NativeHashes::SHUT_CAR_DOOR), void>(vehicle, door); }
    static inline auto ShutdownAndLaunchNetworkGame(Any a1) { return NativeInvoke::Invoke<2664, std::to_underlying(NativeHashes::SHUTDOWN_AND_LAUNCH_NETWORK_GAME), void>(a1); }
    static inline auto ShutdownAndLaunchSinglePlayerGame() { return NativeInvoke::Invoke<2665, std::to_underlying(NativeHashes::SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME), void>(); }
    static inline auto SimulateUpdateLoadScene() { return NativeInvoke::Invoke<2666, std::to_underlying(NativeHashes::SIMULATE_UPDATE_LOAD_SCENE), void>(); }
    static inline auto Sin(float value) { return NativeInvoke::Invoke<2667, std::to_underlying(NativeHashes::SIN), float>(value); }
    static inline auto SkipInPlaybackRecordedCar(Car car, float time) { return NativeInvoke::Invoke<2668, std::to_underlying(NativeHashes::SKIP_IN_PLAYBACK_RECORDED_CAR), void>(car, time); }
    static inline auto SkipRadioForward() { return NativeInvoke::Invoke<2669, std::to_underlying(NativeHashes::SKIP_RADIO_FORWARD), void>(); }
    static inline auto SkipTimeInPlaybackRecordedCar(int32_t CarRec, float time) { return NativeInvoke::Invoke<2670, std::to_underlying(NativeHashes::SKIP_TIME_IN_PLAYBACK_RECORDED_CAR), void>(CarRec, time); }
    static inline auto SkipToEndAndStopPlaybackRecordedCar(Car car) { return NativeInvoke::Invoke<2671, std::to_underlying(NativeHashes::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_CAR), void>(car); }
    static inline auto SkipToNextAllowedStation(Vehicle train) { return NativeInvoke::Invoke<2672, std::to_underlying(NativeHashes::SKIP_TO_NEXT_ALLOWED_STATION), void>(train); }
    static inline auto SkipToNextScriptedConversationLine() { return NativeInvoke::Invoke<2673, std::to_underlying(NativeHashes::SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE), void>(); }
    static inline auto SlideObject(Object obj, float x, float y, float z, float xs, float ys, float zs, bool flag) { return NativeInvoke::Invoke<2674, std::to_underlying(NativeHashes::SLIDE_OBJECT), bool>(obj, x, y, z, xs, ys, zs, flag); }
    static inline auto SmashCarWindow(Car car, int32_t windownum) { return NativeInvoke::Invoke<2675, std::to_underlying(NativeHashes::SMASH_CAR_WINDOW), void>(car, windownum); }
    static inline auto SmashGlassOnObject(float x, float y, float z, float a4, uint32_t model, float a6) { return NativeInvoke::Invoke<2676, std::to_underlying(NativeHashes::SMASH_GLASS_ON_OBJECT), bool>(x, y, z, a4, model, a6); }
    static inline auto SnapshotCam(int32_t cam, int a2) { return NativeInvoke::Invoke<2677, std::to_underlying(NativeHashes::SNAPSHOT_CAM), void>(cam, a2); }
    static inline auto SoundCarHorn(Vehicle vehicle, uint32_t duration) { return NativeInvoke::Invoke<2678, std::to_underlying(NativeHashes::SOUND_CAR_HORN), void>(vehicle, duration); }
    static inline auto SpecifyScriptPopulationZoneArea(int a1, int a2, int a3, int a4, int a5, int a6) { return NativeInvoke::Invoke<2679, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_AREA), void>(a1, a2, a3, a4, a5, a6); }
    static inline auto SpecifyScriptPopulationZoneGroups(int a1, int a2, int a3, int a4, int a5) { return NativeInvoke::Invoke<2680, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_GROUPS), void>(a1, a2, a3, a4, a5); }
    static inline auto SpecifyScriptPopulationZoneNumCars(int32_t num) { return NativeInvoke::Invoke<2681, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_NUM_CARS), void>(num); }
    static inline auto SpecifyScriptPopulationZoneNumParkedCars(int32_t num) { return NativeInvoke::Invoke<2682, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_NUM_PARKED_CARS), void>(num); }
    static inline auto SpecifyScriptPopulationZoneNumPeds(int32_t num) { return NativeInvoke::Invoke<2683, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_NUM_PEDS), void>(num); }
    static inline auto SpecifyScriptPopulationZoneNumScenarioPeds(int32_t num) { return NativeInvoke::Invoke<2684, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_NUM_SCENARIO_PEDS), void>(num); }
    static inline auto SpecifyScriptPopulationZonePercentageCops(int32_t percentage) { return NativeInvoke::Invoke<2685, std::to_underlying(NativeHashes::SPECIFY_SCRIPT_POPULATION_ZONE_PERCENTAGE_COPS), void>(percentage); }
    static inline auto SpotCheck5() { return NativeInvoke::Invoke<2686, std::to_underlying(NativeHashes::SPOT_CHECK5), bool>(); }
    static inline auto SpotCheck6() { return NativeInvoke::Invoke<2687, std::to_underlying(NativeHashes::SPOT_CHECK6), bool>(); }
    static inline auto SpotCheck7() { return NativeInvoke::Invoke<2688, std::to_underlying(NativeHashes::SPOT_CHECK7), bool>(); }
    static inline auto SpotCheck8() { return NativeInvoke::Invoke<2689, std::to_underlying(NativeHashes::SPOT_CHECK8), bool>(); }
    static inline auto Sqrt(float value) { return NativeInvoke::Invoke<2690, std::to_underlying(NativeHashes::SQRT), float>(value); }
    static inline auto StartCarFire(Vehicle vehicle) { return NativeInvoke::Invoke<2691, std::to_underlying(NativeHashes::START_CAR_FIRE), FireId>(vehicle); }
    static inline auto StartCharFire(Ped ped) { return NativeInvoke::Invoke<2692, std::to_underlying(NativeHashes::START_CHAR_FIRE), FireId>(ped); }
    static inline auto StartCredits() { return NativeInvoke::Invoke<2693, std::to_underlying(NativeHashes::START_CREDITS), void>(); }
    static inline auto StartCustomMobilePhoneRinging(int32_t RingtoneId) { return NativeInvoke::Invoke<2694, std::to_underlying(NativeHashes::START_CUSTOM_MOBILE_PHONE_RINGING), void>(RingtoneId); }
    static inline auto StartCutscene() { return NativeInvoke::Invoke<2695, std::to_underlying(NativeHashes::START_CUTSCENE), void>(); }
    static inline auto StartCutsceneNow(char* name) { return NativeInvoke::Invoke<2696, std::to_underlying(NativeHashes::START_CUTSCENE_NOW), void>(name); }
    static inline auto StartEndCreditsMusic() { return NativeInvoke::Invoke<2697, std::to_underlying(NativeHashes::START_END_CREDITS_MUSIC), void>(); }
    static inline auto StartFiringAmnesty() { return NativeInvoke::Invoke<2698, std::to_underlying(NativeHashes::START_FIRING_AMNESTY), void>(); }
    static inline auto StartGpsRaceTrack(int32_t trackid) { return NativeInvoke::Invoke<2699, std::to_underlying(NativeHashes::START_GPS_RACE_TRACK), void>(trackid); }
    static inline auto StartKillFrenzy(char* gxtname, int a2, int a3, int a4, int a5, int a6, int a7, int a8, bool a9) { return NativeInvoke::Invoke<2700, std::to_underlying(NativeHashes::START_KILL_FRENZY), void>(gxtname, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto StartKillTracking() { return NativeInvoke::Invoke<2701, std::to_underlying(NativeHashes::START_KILL_TRACKING), Any>(); }
    static inline auto StartLoadScene(float x, float y, float z) { return NativeInvoke::Invoke<2702, std::to_underlying(NativeHashes::START_LOAD_SCENE), void>(x, y, z); }
    static inline auto StartMobilePhoneCall(Ped callfrom, char* callfromvoice, Ped callto, char* calltovoice, bool flag0, bool flag1) { return NativeInvoke::Invoke<2703, std::to_underlying(NativeHashes::START_MOBILE_PHONE_CALL), void>(callfrom, callfromvoice, callto, calltovoice, flag0, flag1); }
    static inline auto StartMobilePhoneCalling() { return NativeInvoke::Invoke<2704, std::to_underlying(NativeHashes::START_MOBILE_PHONE_CALLING), void>(); }
    static inline auto StartMobilePhoneRinging() { return NativeInvoke::Invoke<2705, std::to_underlying(NativeHashes::START_MOBILE_PHONE_RINGING), void>(); }
    static inline auto StartNewScript(char* scriptName, uint32_t stacksize) { return NativeInvoke::Invoke<2706, std::to_underlying(NativeHashes::START_NEW_SCRIPT), uint32_t>(scriptName, stacksize); }
    static inline auto StartNewScriptWithArgs(char* scriptname, void* params, int32_t paramcount, int32_t stacksize) { return NativeInvoke::Invoke<2707, std::to_underlying(NativeHashes::START_NEW_SCRIPT_WITH_ARGS), int32_t>(scriptname, params, paramcount, stacksize); }
    static inline auto StartNewWidgetCombo() { return NativeInvoke::Invoke<2708, std::to_underlying(NativeHashes::START_NEW_WIDGET_COMBO), void>(); }
    static inline auto StartObjectFire(Object obj) { return NativeInvoke::Invoke<2709, std::to_underlying(NativeHashes::START_OBJECT_FIRE), Any>(obj); }
    static inline auto StartPedMobileRinging(Ped ped, int32_t unk) { return NativeInvoke::Invoke<2710, std::to_underlying(NativeHashes::START_PED_MOBILE_RINGING), void>(ped, unk); }
    static inline auto StartPlaybackRecordedCar(Car car, int32_t CarRec) { return NativeInvoke::Invoke<2711, std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_CAR), void>(car, CarRec); }
    static inline auto StartPlaybackRecordedCarLooped(Car car, int a2) { return NativeInvoke::Invoke<2712, std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_CAR_LOOPED), void>(car, a2); }
    static inline auto StartPlaybackRecordedCarUsingAi(Car car, int32_t CarRec) { return NativeInvoke::Invoke<2713, std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_CAR_USING_AI), void>(car, CarRec); }
    static inline auto StartPlaybackRecordedCarWithOffset(Car car, int32_t CarRec, float x, float y, float z) { return NativeInvoke::Invoke<2714, std::to_underlying(NativeHashes::START_PLAYBACK_RECORDED_CAR_WITH_OFFSET), void>(car, CarRec, x, y, z); }
    static inline auto StartProfileTimer() { return NativeInvoke::Invoke<2715, std::to_underlying(NativeHashes::START_PROFILE_TIMER), Any>(); }
    static inline auto StartPtfx(char* name, float x, float y, float z, float a5, float a6, float a7, uint32_t flags) { return NativeInvoke::Invoke<2716, std::to_underlying(NativeHashes::START_PTFX), uint32_t>(name, x, y, z, a5, a6, a7, flags); }
    static inline auto StartPtfxOnObj(char* name, Object obj, float x, float y, float z, float a6, float a7, float a8, uint32_t flags) { return NativeInvoke::Invoke<2717, std::to_underlying(NativeHashes::START_PTFX_ON_OBJ), uint32_t>(name, obj, x, y, z, a6, a7, a8, flags); }
    static inline auto StartPtfxOnObjBone(char* name, Object obj, float x, float y, float z, float a6, float a7, float a8, int32_t objbone, uint32_t flags) { return NativeInvoke::Invoke<2718, std::to_underlying(NativeHashes::START_PTFX_ON_OBJ_BONE), uint32_t>(name, obj, x, y, z, a6, a7, a8, objbone, flags); }
    static inline auto StartPtfxOnPed(char* name, Ped ped, float x, float y, float z, float a6, float a7, float a8, uint32_t flags) { return NativeInvoke::Invoke<2719, std::to_underlying(NativeHashes::START_PTFX_ON_PED), uint32_t>(name, ped, x, y, z, a6, a7, a8, flags); }
    static inline auto StartPtfxOnPedBone(char* name, Ped ped, float x, float y, float z, float a6, float a7, float a8, int32_t pedbone, uint32_t flags) { return NativeInvoke::Invoke<2720, std::to_underlying(NativeHashes::START_PTFX_ON_PED_BONE), uint32_t>(name, ped, x, y, z, a6, a7, a8, pedbone, flags); }
    static inline auto StartPtfxOnVeh(char* name, Vehicle veh, float x, float y, float z, float a6, float a7, float a8, float a9) { return NativeInvoke::Invoke<2721, std::to_underlying(NativeHashes::START_PTFX_ON_VEH), uint32_t>(name, veh, x, y, z, a6, a7, a8, a9); }
    static inline auto StartScriptConversation(bool flag0, bool flag1) { return NativeInvoke::Invoke<2722, std::to_underlying(NativeHashes::START_SCRIPT_CONVERSATION), void>(flag0, flag1); }
    static inline auto StartScriptFire(float x, float y, float z, uint32_t numGenerationsAllowed, uint32_t strength) { return NativeInvoke::Invoke<2723, std::to_underlying(NativeHashes::START_SCRIPT_FIRE), FireId>(x, y, z, numGenerationsAllowed, strength); }
    static inline auto StartStreamingRequestList(char* name) { return NativeInvoke::Invoke<2724, std::to_underlying(NativeHashes::START_STREAMING_REQUEST_LIST), void>(name); }
    static inline auto StopCarBreaking(Car car, bool stop) { return NativeInvoke::Invoke<2725, std::to_underlying(NativeHashes::STOP_CAR_BREAKING), void>(car, stop); }
    static inline auto StopCredits() { return NativeInvoke::Invoke<2726, std::to_underlying(NativeHashes::STOP_CREDITS), void>(); }
    static inline auto StopCutscene() { return NativeInvoke::Invoke<2727, std::to_underlying(NativeHashes::STOP_CUTSCENE), void>(); }
    static inline auto StopEndCreditsMusic() { return NativeInvoke::Invoke<2728, std::to_underlying(NativeHashes::STOP_END_CREDITS_MUSIC), void>(); }
    static inline auto StopKillTracking() { return NativeInvoke::Invoke<2729, std::to_underlying(NativeHashes::STOP_KILL_TRACKING), Any>(); }
    static inline auto StopMobilePhoneRinging() { return NativeInvoke::Invoke<2730, std::to_underlying(NativeHashes::STOP_MOBILE_PHONE_RINGING), void>(); }
    static inline auto StopMovie() { return NativeInvoke::Invoke<2731, std::to_underlying(NativeHashes::STOP_MOVIE), void>(); }
    static inline auto StopPedDoingFallOffTestsWhenShot(Ped ped) { return NativeInvoke::Invoke<2732, std::to_underlying(NativeHashes::STOP_PED_DOING_FALL_OFF_TESTS_WHEN_SHOT), void>(ped); }
    static inline auto StopPedMobileRinging(Ped ped) { return NativeInvoke::Invoke<2733, std::to_underlying(NativeHashes::STOP_PED_MOBILE_RINGING), void>(ped); }
    static inline auto StopPedSpeaking(Ped ped, bool stopspeaking) { return NativeInvoke::Invoke<2734, std::to_underlying(NativeHashes::STOP_PED_SPEAKING), void>(ped, stopspeaking); }
    static inline auto StopPedWeaponFiringWhenDropped(Ped ped) { return NativeInvoke::Invoke<2735, std::to_underlying(NativeHashes::STOP_PED_WEAPON_FIRING_WHEN_DROPPED), void>(ped); }
    static inline auto StopPlaybackRecordedCar(Car car) { return NativeInvoke::Invoke<2736, std::to_underlying(NativeHashes::STOP_PLAYBACK_RECORDED_CAR), void>(car); }
    static inline auto StopPreviewRingtone() { return NativeInvoke::Invoke<2737, std::to_underlying(NativeHashes::STOP_PREVIEW_RINGTONE), void>(); }
    static inline auto StopProfileTimer() { return NativeInvoke::Invoke<2738, std::to_underlying(NativeHashes::STOP_PROFILE_TIMER), Any>(); }
    static inline auto StopPtfx(uint32_t ptfx) { return NativeInvoke::Invoke<2739, std::to_underlying(NativeHashes::STOP_PTFX), void>(ptfx); }
    static inline auto StopSound(uint32_t sound) { return NativeInvoke::Invoke<2740, std::to_underlying(NativeHashes::STOP_SOUND), void>(sound); }
    static inline auto StopStream() { return NativeInvoke::Invoke<2741, std::to_underlying(NativeHashes::STOP_STREAM), void>(); }
    static inline auto StopSyncingScriptAnimations(Any a1) { return NativeInvoke::Invoke<2742, std::to_underlying(NativeHashes::STOP_SYNCING_SCRIPT_ANIMATIONS), void>(a1); }
    static inline auto StopVehicleAlwaysRender(Vehicle veh) { return NativeInvoke::Invoke<2743, std::to_underlying(NativeHashes::STOP_VEHICLE_ALWAYS_RENDER), void>(veh); }
    static inline auto StoreCarCharIsInNoSave(Ped ped, Car* car) { return NativeInvoke::Invoke<2744, std::to_underlying(NativeHashes::STORE_CAR_CHAR_IS_IN_NO_SAVE), void>(ped, car); }
    static inline auto StoreDamageTrackerForNetworkPlayer(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2745, std::to_underlying(NativeHashes::STORE_DAMAGE_TRACKER_FOR_NETWORK_PLAYER), Any>(a1, a2, a3); }
    static inline auto StoreScore(Player playerIndex, uint32_t* value) { return NativeInvoke::Invoke<2746, std::to_underlying(NativeHashes::STORE_SCORE), void>(playerIndex, value); }
    static inline auto StoreScriptValuesForNetworkGame(Any a1) { return NativeInvoke::Invoke<2747, std::to_underlying(NativeHashes::STORE_SCRIPT_VALUES_FOR_NETWORK_GAME), void>(a1); }
    static inline auto StoreWantedLevel(Player playerIndex, uint32_t* value) { return NativeInvoke::Invoke<2748, std::to_underlying(NativeHashes::STORE_WANTED_LEVEL), void>(playerIndex, value); }
    static inline auto StreamCutscene() { return NativeInvoke::Invoke<2749, std::to_underlying(NativeHashes::STREAM_CUTSCENE), Any>(); }
    static inline auto StringDifference(char* str0, char* str1) { return NativeInvoke::Invoke<2750, std::to_underlying(NativeHashes::STRING_DIFFERENCE), int32_t>(str0, str1); }
    static inline auto StringString(char* a1, char* a2) { return NativeInvoke::Invoke<2751, std::to_underlying(NativeHashes::STRING_STRING), int32_t>(a1, a2); }
    static inline auto StringToInt(char* str, int32_t* intval) { return NativeInvoke::Invoke<2752, std::to_underlying(NativeHashes::STRING_TO_INT), bool>(str, intval); }
    static inline auto SuppressCarModel(uint32_t model) { return NativeInvoke::Invoke<2753, std::to_underlying(NativeHashes::SUPPRESS_CAR_MODEL), void>(model); }
    static inline auto SuppressFadeInAfterDeathArrest(bool set) { return NativeInvoke::Invoke<2754, std::to_underlying(NativeHashes::SUPPRESS_FADE_IN_AFTER_DEATH_ARREST), void>(set); }
    static inline auto SuppressPedModel(uint32_t model) { return NativeInvoke::Invoke<2755, std::to_underlying(NativeHashes::SUPPRESS_PED_MODEL), void>(model); }
    static inline auto SwapNearestBuildingModel(float x, float y, float z, float radius, uint32_t modelfrom, uint32_t modelto) { return NativeInvoke::Invoke<2756, std::to_underlying(NativeHashes::SWAP_NEAREST_BUILDING_MODEL), void>(x, y, z, radius, modelfrom, modelto); }
    static inline auto SwitchAmbientPlanes(bool on) { return NativeInvoke::Invoke<2757, std::to_underlying(NativeHashes::SWITCH_AMBIENT_PLANES), void>(on); }
    static inline auto SwitchArrowAboveBlippedPickups(bool on) { return NativeInvoke::Invoke<2758, std::to_underlying(NativeHashes::SWITCH_ARROW_ABOVE_BLIPPED_PICKUPS), void>(on); }
    static inline auto SwitchCarGenerator(int32_t handle, int32_t type) { return NativeInvoke::Invoke<2759, std::to_underlying(NativeHashes::SWITCH_CAR_GENERATOR), void>(handle, type); }
    static inline auto SwitchCarSiren(Car car, bool siren) { return NativeInvoke::Invoke<2760, std::to_underlying(NativeHashes::SWITCH_CAR_SIREN), void>(car, siren); }
    static inline auto SwitchGarbageTrucks(bool on) { return NativeInvoke::Invoke<2761, std::to_underlying(NativeHashes::SWITCH_GARBAGE_TRUCKS), void>(on); }
    static inline auto SwitchMadDrivers(bool on) { return NativeInvoke::Invoke<2762, std::to_underlying(NativeHashes::SWITCH_MAD_DRIVERS), void>(on); }
    static inline auto SwitchObjectBrains(int32_t brain, bool switchstate) { return NativeInvoke::Invoke<2763, std::to_underlying(NativeHashes::SWITCH_OBJECT_BRAINS), void>(brain, switchstate); }
    static inline auto SwitchOffWaypoint() { return NativeInvoke::Invoke<2764, std::to_underlying(NativeHashes::SWITCH_OFF_WAYPOINT), void>(); }
    static inline auto SwitchPedPathsOff(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2765, std::to_underlying(NativeHashes::SWITCH_PED_PATHS_OFF), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SwitchPedPathsOn(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2766, std::to_underlying(NativeHashes::SWITCH_PED_PATHS_ON), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SwitchPedRoadsBackToOriginal(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2767, std::to_underlying(NativeHashes::SWITCH_PED_ROADS_BACK_TO_ORIGINAL), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SwitchPedToAnimated(Ped ped, bool unknownTrue) { return NativeInvoke::Invoke<2768, std::to_underlying(NativeHashes::SWITCH_PED_TO_ANIMATED), void>(ped, unknownTrue); }
    static inline auto SwitchPedToRagdoll(Ped ped, int32_t unk, int32_t time, bool flag0, bool flag1, bool flag2, bool flag3) { return NativeInvoke::Invoke<2769, std::to_underlying(NativeHashes::SWITCH_PED_TO_RAGDOLL), bool>(ped, unk, time, flag0, flag1, flag2, flag3); }
    static inline auto SwitchPedToRagdollWithFall(Ped ped, int a2, int a3, int a4, float a5, float a6, int a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14) { return NativeInvoke::Invoke<2770, std::to_underlying(NativeHashes::SWITCH_PED_TO_RAGDOLL_WITH_FALL), bool>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); }
    static inline auto SwitchPoliceHelis(bool set) { return NativeInvoke::Invoke<2771, std::to_underlying(NativeHashes::SWITCH_POLICE_HELIS), void>(set); }
    static inline auto SwitchRandomBoats(bool on) { return NativeInvoke::Invoke<2772, std::to_underlying(NativeHashes::SWITCH_RANDOM_BOATS), void>(on); }
    static inline auto SwitchRandomTrains(bool on) { return NativeInvoke::Invoke<2773, std::to_underlying(NativeHashes::SWITCH_RANDOM_TRAINS), void>(on); }
    static inline auto SwitchRoadsBackToOriginal(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2774, std::to_underlying(NativeHashes::SWITCH_ROADS_BACK_TO_ORIGINAL), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SwitchRoadsOff(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2775, std::to_underlying(NativeHashes::SWITCH_ROADS_OFF), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SwitchRoadsOn(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2776, std::to_underlying(NativeHashes::SWITCH_ROADS_ON), void>(x0, y0, z0, x1, y1, z1); }
    static inline auto SwitchStreaming(bool on) { return NativeInvoke::Invoke<2777, std::to_underlying(NativeHashes::SWITCH_STREAMING), void>(on); }
    static inline auto SynchAmbientPlanes(int a1, int a2) { return NativeInvoke::Invoke<2778, std::to_underlying(NativeHashes::SYNCH_AMBIENT_PLANES), void>(a1, a2); }
    static inline auto SynchRecordingWithWater() { return NativeInvoke::Invoke<2779, std::to_underlying(NativeHashes::SYNCH_RECORDING_WITH_WATER), bool>(); }
    static inline auto TakeCarOutOfParkedCarsBudget(Car car, bool out) { return NativeInvoke::Invoke<2780, std::to_underlying(NativeHashes::TAKE_CAR_OUT_OF_PARKED_CARS_BUDGET), void>(car, out); }
    static inline auto TakeRemoteControlOfCar() { return NativeInvoke::Invoke<2781, std::to_underlying(NativeHashes::TAKE_REMOTE_CONTROL_OF_CAR), Any>(); }
    static inline auto TakeScreenShot() { return NativeInvoke::Invoke<2782, std::to_underlying(NativeHashes::TAKE_SCREEN_SHOT), Any>(); }
    static inline auto Tan(float value) { return NativeInvoke::Invoke<2783, std::to_underlying(NativeHashes::TAN), float>(value); }
    static inline auto TaskAchieveHeading(Ped ped, float heading) { return NativeInvoke::Invoke<2784, std::to_underlying(NativeHashes::TASK_ACHIEVE_HEADING), void>(ped, heading); }
    static inline auto TaskAimGunAtChar(Ped ped, Ped targetPed, uint32_t duration) { return NativeInvoke::Invoke<2785, std::to_underlying(NativeHashes::TASK_AIM_GUN_AT_CHAR), void>(ped, targetPed, duration); }
    static inline auto TaskAimGunAtCoord(Ped ped, float tX, float tY, float tZ, uint32_t duration) { return NativeInvoke::Invoke<2786, std::to_underlying(NativeHashes::TASK_AIM_GUN_AT_COORD), void>(ped, tX, tY, tZ, duration); }
    static inline auto TaskCarDriveToCoord(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11) { return NativeInvoke::Invoke<2787, std::to_underlying(NativeHashes::TASK_CAR_DRIVE_TO_COORD), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto TaskCarDriveToCoordNotAgainstTraffic(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11) { return NativeInvoke::Invoke<2788, std::to_underlying(NativeHashes::TASK_CAR_DRIVE_TO_COORD_NOT_AGAINST_TRAFFIC), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto TaskCarDriveWander(Ped ped, Vehicle vehicle, float speed, uint32_t drivingStyle) { return NativeInvoke::Invoke<2789, std::to_underlying(NativeHashes::TASK_CAR_DRIVE_WANDER), void>(ped, vehicle, speed, drivingStyle); }
    static inline auto TaskCarMission(Ped ped, Vehicle vehicle, uint32_t targetEntity, uint32_t missionType, float speed, uint32_t drivingStyle, uint32_t unknown6_10, uint32_t unknown7_5) { return NativeInvoke::Invoke<2790, std::to_underlying(NativeHashes::TASK_CAR_MISSION), void>(ped, vehicle, targetEntity, missionType, speed, drivingStyle, unknown6_10, unknown7_5); }
    static inline auto TaskCarMissionCoorsTarget(Ped ped, Vehicle vehicle, float x, float y, float z, uint32_t unknown0_4, float speed, uint32_t unknown2_1, uint32_t unknown3_5, uint32_t unknown4_10) { return NativeInvoke::Invoke<2791, std::to_underlying(NativeHashes::TASK_CAR_MISSION_COORS_TARGET), void>(ped, vehicle, x, y, z, unknown0_4, speed, unknown2_1, unknown3_5, unknown4_10); }
    static inline auto TaskCarMissionCoorsTargetNotAgainstTraffic(Ped ped, Vehicle vehicle, float x, float y, float z, uint32_t unknown0_4, float speed, uint32_t unknown2_1, uint32_t unknown3_5, uint32_t unknown4_10) { return NativeInvoke::Invoke<2792, std::to_underlying(NativeHashes::TASK_CAR_MISSION_COORS_TARGET_NOT_AGAINST_TRAFFIC), void>(ped, vehicle, x, y, z, unknown0_4, speed, unknown2_1, unknown3_5, unknown4_10); }
    static inline auto TaskCarMissionNotAgainstTraffic(Ped ped, Vehicle vehicle, uint32_t targetEntity, uint32_t missionType, float speed, uint32_t drivingStyle, uint32_t unknown6_10, uint32_t unknown7_5) { return NativeInvoke::Invoke<2793, std::to_underlying(NativeHashes::TASK_CAR_MISSION_NOT_AGAINST_TRAFFIC), void>(ped, vehicle, targetEntity, missionType, speed, drivingStyle, unknown6_10, unknown7_5); }
    static inline auto TaskCarMissionPedTarget(Ped ped, Vehicle vehicle, Ped target, uint32_t unknown0_4, float speed, uint32_t unknown2_1, uint32_t unknown3_5, uint32_t unknown4_10) { return NativeInvoke::Invoke<2794, std::to_underlying(NativeHashes::TASK_CAR_MISSION_PED_TARGET), void>(ped, vehicle, target, unknown0_4, speed, unknown2_1, unknown3_5, unknown4_10); }
    static inline auto TaskCarMissionPedTargetNotAgainstTraffic(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<2795, std::to_underlying(NativeHashes::TASK_CAR_MISSION_PED_TARGET_NOT_AGAINST_TRAFFIC), void>(ped, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto TaskCarTempAction(Ped ped, Vehicle vehicle, uint32_t action, uint32_t duration) { return NativeInvoke::Invoke<2796, std::to_underlying(NativeHashes::TASK_CAR_TEMP_ACTION), void>(ped, vehicle, action, duration); }
    static inline auto TaskCharArrestChar(Ped ped0, Ped ped1) { return NativeInvoke::Invoke<2797, std::to_underlying(NativeHashes::TASK_CHAR_ARREST_CHAR), void>(ped0, ped1); }
    static inline auto TaskCharSlideToCoord(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2798, std::to_underlying(NativeHashes::TASK_CHAR_SLIDE_TO_COORD), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskCharSlideToCoordAndPlayAnim(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12, Any a13, Any a14) { return NativeInvoke::Invoke<2799, std::to_underlying(NativeHashes::TASK_CHAR_SLIDE_TO_COORD_AND_PLAY_ANIM), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); }
    static inline auto TaskCharSlideToCoordAndPlayAnimHdgRate() { return NativeInvoke::Invoke<2800, std::to_underlying(NativeHashes::TASK_CHAR_SLIDE_TO_COORD_AND_PLAY_ANIM_HDG_RATE), Any>(); }
    static inline auto TaskCharSlideToCoordHdgRate(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<2801, std::to_underlying(NativeHashes::TASK_CHAR_SLIDE_TO_COORD_HDG_RATE), void>(ped, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskChatWithChar(Ped ped, Ped pednext, bool a3, bool a4) { return NativeInvoke::Invoke<2802, std::to_underlying(NativeHashes::TASK_CHAT_WITH_CHAR), void>(ped, pednext, a3, a4); }
    static inline auto TaskClearLookAt(Ped ped) { return NativeInvoke::Invoke<2803, std::to_underlying(NativeHashes::TASK_CLEAR_LOOK_AT), void>(ped); }
    static inline auto TaskClimb(Ped ped, bool a2) { return NativeInvoke::Invoke<2804, std::to_underlying(NativeHashes::TASK_CLIMB), void>(ped, a2); }
    static inline auto TaskClimbLadder(Ped ped, Any a2) { return NativeInvoke::Invoke<2805, std::to_underlying(NativeHashes::TASK_CLIMB_LADDER), void>(ped, a2); }
    static inline auto TaskCombat(Ped ped, Ped target) { return NativeInvoke::Invoke<2806, std::to_underlying(NativeHashes::TASK_COMBAT), void>(ped, target); }
    static inline auto TaskCombatHatedTargetsAroundChar(Ped ped, float radius) { return NativeInvoke::Invoke<2807, std::to_underlying(NativeHashes::TASK_COMBAT_HATED_TARGETS_AROUND_CHAR), void>(ped, radius); }
    static inline auto TaskCombatHatedTargetsAroundCharTimed(Ped ped, float radius, uint32_t duration) { return NativeInvoke::Invoke<2808, std::to_underlying(NativeHashes::TASK_COMBAT_HATED_TARGETS_AROUND_CHAR_TIMED), void>(ped, radius, duration); }
    static inline auto TaskCombatHatedTargetsInArea(Ped ped, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2809, std::to_underlying(NativeHashes::TASK_COMBAT_HATED_TARGETS_IN_AREA), void>(ped, a2, a3, a4, a5); }
    static inline auto TaskCombatRoll(Ped ped, Any a2) { return NativeInvoke::Invoke<2810, std::to_underlying(NativeHashes::TASK_COMBAT_ROLL), void>(ped, a2); }
    static inline auto TaskCombatTimed(Ped ped, Char target, uint32_t duration) { return NativeInvoke::Invoke<2811, std::to_underlying(NativeHashes::TASK_COMBAT_TIMED), void>(ped, target, duration); }
    static inline auto TaskCower(Ped ped) { return NativeInvoke::Invoke<2812, std::to_underlying(NativeHashes::TASK_COWER), void>(ped); }
    static inline auto TaskDead(Ped ped) { return NativeInvoke::Invoke<2813, std::to_underlying(NativeHashes::TASK_DEAD), void>(ped); }
    static inline auto TaskDestroyCar(Ped ped, Car car) { return NativeInvoke::Invoke<2814, std::to_underlying(NativeHashes::TASK_DESTROY_CAR), void>(ped, car); }
    static inline auto TaskDie(Ped ped) { return NativeInvoke::Invoke<2815, std::to_underlying(NativeHashes::TASK_DIE), void>(ped); }
    static inline auto TaskDriveBy(Ped ped, Ped pednext, int a3, float x, float y, float z, float angle, int a8, bool a9, int a10) { return NativeInvoke::Invoke<2816, std::to_underlying(NativeHashes::TASK_DRIVE_BY), void>(ped, pednext, a3, x, y, z, angle, a8, a9, a10); }
    static inline auto TaskDrivePointRoute(Ped ped, int32_t point, float radius) { return NativeInvoke::Invoke<2817, std::to_underlying(NativeHashes::TASK_DRIVE_POINT_ROUTE), void>(ped, point, radius); }
    static inline auto TaskDrivePointRouteAdvanced(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2818, std::to_underlying(NativeHashes::TASK_DRIVE_POINT_ROUTE_ADVANCED), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskDuck(Ped ped, Any a2) { return NativeInvoke::Invoke<2819, std::to_underlying(NativeHashes::TASK_DUCK), void>(ped, a2); }
    static inline auto TaskEnterCarAsDriver(Ped ped, Vehicle vehicle, uint32_t duration) { return NativeInvoke::Invoke<2820, std::to_underlying(NativeHashes::TASK_ENTER_CAR_AS_DRIVER), void>(ped, vehicle, duration); }
    static inline auto TaskEnterCarAsPassenger(Ped ped, Vehicle vehicle, uint32_t duration, uint32_t seatIndex) { return NativeInvoke::Invoke<2821, std::to_underlying(NativeHashes::TASK_ENTER_CAR_AS_PASSENGER), void>(ped, vehicle, duration, seatIndex); }
    static inline auto TaskEveryoneLeaveCar(Vehicle vehicle) { return NativeInvoke::Invoke<2822, std::to_underlying(NativeHashes::TASK_EVERYONE_LEAVE_CAR), void>(vehicle); }
    static inline auto TaskExtendRoute(Ped ped, Any a2, Any a3) { return NativeInvoke::Invoke<2823, std::to_underlying(NativeHashes::TASK_EXTEND_ROUTE), void>(ped, a2, a3); }
    static inline auto TaskFallAndGetUp(Ped ped, Any a2, Any a3) { return NativeInvoke::Invoke<2824, std::to_underlying(NativeHashes::TASK_FALL_AND_GET_UP), void>(ped, a2, a3); }
    static inline auto TaskFleeCharAnyMeans(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<2825, std::to_underlying(NativeHashes::TASK_FLEE_CHAR_ANY_MEANS), void>(ped, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto TaskFlushRoute() { return NativeInvoke::Invoke<2826, std::to_underlying(NativeHashes::TASK_FLUSH_ROUTE), void>(); }
    static inline auto TaskFollowFootsteps(Ped ped, Any a2) { return NativeInvoke::Invoke<2827, std::to_underlying(NativeHashes::TASK_FOLLOW_FOOTSTEPS), void>(ped, a2); }
    static inline auto TaskFollowNavMeshAndSlideToCoord(Ped ped, float x, float y, float z, int a5, int a6, float a7, float angle) { return NativeInvoke::Invoke<2828, std::to_underlying(NativeHashes::TASK_FOLLOW_NAV_MESH_AND_SLIDE_TO_COORD), void>(ped, x, y, z, a5, a6, a7, angle); }
    static inline auto TaskFollowNavMeshAndSlideToCoordHdgRate(Ped ped, float x, float y, float z, int a5, int a6, float a7, float angle, float rate) { return NativeInvoke::Invoke<2829, std::to_underlying(NativeHashes::TASK_FOLLOW_NAV_MESH_AND_SLIDE_TO_COORD_HDG_RATE), void>(ped, x, y, z, a5, a6, a7, angle, rate); }
    static inline auto TaskFollowNavMeshToCoord(Ped ped, float x, float y, float z, uint32_t unknown0_2, uint32_t unknown1_minus1, float unknown2_1) { return NativeInvoke::Invoke<2830, std::to_underlying(NativeHashes::TASK_FOLLOW_NAV_MESH_TO_COORD), void>(ped, x, y, z, unknown0_2, unknown1_minus1, unknown2_1); }
    static inline auto TaskFollowNavMeshToCoordNoStop(Ped ped, float x, float y, float z, uint32_t unknown0_2, uint32_t unknown1_minus1, float unknown2_1) { return NativeInvoke::Invoke<2831, std::to_underlying(NativeHashes::TASK_FOLLOW_NAV_MESH_TO_COORD_NO_STOP), void>(ped, x, y, z, unknown0_2, unknown1_minus1, unknown2_1); }
    static inline auto TaskFollowPatrolRoute() { return NativeInvoke::Invoke<2832, std::to_underlying(NativeHashes::TASK_FOLLOW_PATROL_ROUTE), Any>(); }
    static inline auto TaskFollowPointRoute(Ped ped, Any a2, Any a3) { return NativeInvoke::Invoke<2833, std::to_underlying(NativeHashes::TASK_FOLLOW_POINT_ROUTE), void>(ped, a2, a3); }
    static inline auto TaskGetOffBoat(Ped ped, int32_t timeout) { return NativeInvoke::Invoke<2834, std::to_underlying(NativeHashes::TASK_GET_OFF_BOAT), void>(ped, timeout); }
    static inline auto TaskGoStraightToCoord(Ped ped, float x, float y, float z, uint32_t unknown2, uint32_t unknown45000) { return NativeInvoke::Invoke<2835, std::to_underlying(NativeHashes::TASK_GO_STRAIGHT_TO_COORD), void>(ped, x, y, z, unknown2, unknown45000); }
    static inline auto TaskGoStraightToCoordRelativeToCar(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<2836, std::to_underlying(NativeHashes::TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_CAR), void>(ped, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskGoToChar(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2837, std::to_underlying(NativeHashes::TASK_GO_TO_CHAR), void>(ped, a2, a3, a4); }
    static inline auto TaskGoToCoordAnyMeans(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2838, std::to_underlying(NativeHashes::TASK_GO_TO_COORD_ANY_MEANS), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskGoToCoordWhileAiming(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<2839, std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_AIMING), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto TaskGoToCoordWhileShooting(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2840, std::to_underlying(NativeHashes::TASK_GO_TO_COORD_WHILE_SHOOTING), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskGoToObject(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2841, std::to_underlying(NativeHashes::TASK_GO_TO_OBJECT), void>(ped, a2, a3, a4); }
    static inline auto TaskGotoCar(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2842, std::to_underlying(NativeHashes::TASK_GOTO_CAR), void>(ped, a2, a3, a4); }
    static inline auto TaskGotoCharAiming(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2843, std::to_underlying(NativeHashes::TASK_GOTO_CHAR_AIMING), void>(ped, a2, a3, a4); }
    static inline auto TaskGotoCharOffset(Ped ped, Ped target, uint32_t duration, float offsetRight, float offsetFront) { return NativeInvoke::Invoke<2844, std::to_underlying(NativeHashes::TASK_GOTO_CHAR_OFFSET), void>(ped, target, duration, offsetRight, offsetFront); }
    static inline auto TaskGuardAngledDefensiveArea(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12, Any a13, Any a14) { return NativeInvoke::Invoke<2845, std::to_underlying(NativeHashes::TASK_GUARD_ANGLED_DEFENSIVE_AREA), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14); }
    static inline auto TaskGuardAssignedDefensiveArea(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<2846, std::to_underlying(NativeHashes::TASK_GUARD_ASSIGNED_DEFENSIVE_AREA), void>(ped, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskGuardCurrentPosition(Ped ped, float unknown0_15, float unknown1_10, uint32_t unknown2_1) { return NativeInvoke::Invoke<2847, std::to_underlying(NativeHashes::TASK_GUARD_CURRENT_POSITION), void>(ped, unknown0_15, unknown1_10, unknown2_1); }
    static inline auto TaskGuardSphereDefensiveArea(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11) { return NativeInvoke::Invoke<2848, std::to_underlying(NativeHashes::TASK_GUARD_SPHERE_DEFENSIVE_AREA), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11); }
    static inline auto TaskHandsUp(Ped ped, uint32_t duration) { return NativeInvoke::Invoke<2849, std::to_underlying(NativeHashes::TASK_HANDS_UP), void>(ped, duration); }
    static inline auto TaskHeliMission(Ped ped, Vehicle heli, uint32_t uk0_0, uint32_t uk1_0, float pX, float pY, float pZ, uint32_t uk2_4, float speed, uint32_t uk3_5, float uk4_minus1, uint32_t uk5_round_z_plus_1, uint32_t uk6_40) { return NativeInvoke::Invoke<2850, std::to_underlying(NativeHashes::TASK_HELI_MISSION), void>(ped, heli, uk0_0, uk1_0, pX, pY, pZ, uk2_4, speed, uk3_5, uk4_minus1, uk5_round_z_plus_1, uk6_40); }
    static inline auto TaskJetpack() { return NativeInvoke::Invoke<2851, std::to_underlying(NativeHashes::TASK_JETPACK), Any>(); }
    static inline auto TaskJump(Ped ped, bool flag) { return NativeInvoke::Invoke<2852, std::to_underlying(NativeHashes::TASK_JUMP), void>(ped, flag); }
    static inline auto TaskLeaveAnyCar(Ped ped) { return NativeInvoke::Invoke<2853, std::to_underlying(NativeHashes::TASK_LEAVE_ANY_CAR), void>(ped); }
    static inline auto TaskLeaveCar(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<2854, std::to_underlying(NativeHashes::TASK_LEAVE_CAR), void>(ped, vehicle); }
    static inline auto TaskLeaveCarAndFlee(Ped ped, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2855, std::to_underlying(NativeHashes::TASK_LEAVE_CAR_AND_FLEE), void>(ped, a2, a3, a4, a5); }
    static inline auto TaskLeaveCarDontCloseDoor(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<2856, std::to_underlying(NativeHashes::TASK_LEAVE_CAR_DONT_CLOSE_DOOR), void>(ped, vehicle); }
    static inline auto TaskLeaveCarImmediately(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<2857, std::to_underlying(NativeHashes::TASK_LEAVE_CAR_IMMEDIATELY), void>(ped, vehicle); }
    static inline auto TaskLeaveCarInDirection(Ped ped, Car car, bool direction) { return NativeInvoke::Invoke<2858, std::to_underlying(NativeHashes::TASK_LEAVE_CAR_IN_DIRECTION), void>(ped, car, direction); }
    static inline auto TaskLeaveGroup(Ped ped) { return NativeInvoke::Invoke<2859, std::to_underlying(NativeHashes::TASK_LEAVE_GROUP), void>(ped); }
    static inline auto TaskLookAtChar(Ped ped, Ped targetPed, uint32_t duration, uint32_t unknown_0) { return NativeInvoke::Invoke<2860, std::to_underlying(NativeHashes::TASK_LOOK_AT_CHAR), void>(ped, targetPed, duration, unknown_0); }
    static inline auto TaskLookAtCoord(Ped ped, float x, float y, float z, uint32_t duration, uint32_t unknown_0) { return NativeInvoke::Invoke<2861, std::to_underlying(NativeHashes::TASK_LOOK_AT_COORD), void>(ped, x, y, z, duration, unknown_0); }
    static inline auto TaskLookAtObject(Ped ped, Object targetObject, uint32_t duration, uint32_t unknown_0) { return NativeInvoke::Invoke<2862, std::to_underlying(NativeHashes::TASK_LOOK_AT_OBJECT), void>(ped, targetObject, duration, unknown_0); }
    static inline auto TaskLookAtVehicle(Ped ped, Vehicle targetVehicle, uint32_t duration, uint32_t unknown_0) { return NativeInvoke::Invoke<2863, std::to_underlying(NativeHashes::TASK_LOOK_AT_VEHICLE), void>(ped, targetVehicle, duration, unknown_0); }
    static inline auto TaskMobileConversation(Ped ped, Any a2) { return NativeInvoke::Invoke<2864, std::to_underlying(NativeHashes::TASK_MOBILE_CONVERSATION), void>(ped, a2); }
    static inline auto TaskOpenDriverDoor(Ped ped, Vehicle vehicle, uint32_t unknown0) { return NativeInvoke::Invoke<2865, std::to_underlying(NativeHashes::TASK_OPEN_DRIVER_DOOR), void>(ped, vehicle, unknown0); }
    static inline auto TaskOpenPassengerDoor(Ped ped, Vehicle vehicle, uint32_t seatIndex, uint32_t unknown0) { return NativeInvoke::Invoke<2866, std::to_underlying(NativeHashes::TASK_OPEN_PASSENGER_DOOR), void>(ped, vehicle, seatIndex, unknown0); }
    static inline auto TaskPause(Ped ped, uint32_t duration) { return NativeInvoke::Invoke<2867, std::to_underlying(NativeHashes::TASK_PAUSE), void>(ped, duration); }
    static inline auto TaskPerformSequence(Ped ped, TaskSequence taskSequence) { return NativeInvoke::Invoke<2868, std::to_underlying(NativeHashes::TASK_PERFORM_SEQUENCE), void>(ped, taskSequence); }
    static inline auto TaskPerformSequenceFromProgress(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2869, std::to_underlying(NativeHashes::TASK_PERFORM_SEQUENCE_FROM_PROGRESS), void>(ped, a2, a3, a4); }
    static inline auto TaskPerformSequenceLocally(Ped ped, Any a2) { return NativeInvoke::Invoke<2870, std::to_underlying(NativeHashes::TASK_PERFORM_SEQUENCE_LOCALLY), void>(ped, a2); }
    static inline auto TaskPickupAndCarryObject(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2871, std::to_underlying(NativeHashes::TASK_PICKUP_AND_CARRY_OBJECT), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskPlayAnim(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2872, std::to_underlying(NativeHashes::TASK_PLAY_ANIM), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimFacial(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<2873, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_FACIAL), void>(ped, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskPlayAnimNonInterruptable(Ped ped, char* animname0, char* animname1, float a4, int a5, int a6, int a7, int a8, int a9) { return NativeInvoke::Invoke<2874, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_NON_INTERRUPTABLE), void>(ped, animname0, animname1, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimOnClone(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2875, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_ON_CLONE), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimReadyToBeExecuted(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2876, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_READY_TO_BE_EXECUTED), void>(ped, a2, a3, a4); }
    static inline auto TaskPlayAnimSecondary(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2877, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_SECONDARY), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimSecondaryInCar(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2878, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_SECONDARY_IN_CAR), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimSecondaryNoInterrupt(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2879, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_SECONDARY_NO_INTERRUPT), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimSecondaryUpperBody(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2880, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_SECONDARY_UPPER_BODY), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimUpperBody(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9) { return NativeInvoke::Invoke<2881, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_UPPER_BODY), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9); }
    static inline auto TaskPlayAnimWithAdvancedFlags(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10, Any a11, Any a12) { return NativeInvoke::Invoke<2882, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_WITH_ADVANCED_FLAGS), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12); }
    static inline auto TaskPlayAnimWithFlags(Ped ped, char* animName, char* animSet, float unknown0_8, uint32_t unknown1_0, uint32_t flags) { return NativeInvoke::Invoke<2883, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_WITH_FLAGS), void>(ped, animName, animSet, unknown0_8, unknown1_0, flags); }
    static inline auto TaskPlayAnimWithFlagsAndStartPhase(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7) { return NativeInvoke::Invoke<2884, std::to_underlying(NativeHashes::TASK_PLAY_ANIM_WITH_FLAGS_AND_START_PHASE), void>(ped, a2, a3, a4, a5, a6, a7); }
    static inline auto TaskPutCharDirectlyIntoCover(Any a1, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2885, std::to_underlying(NativeHashes::TASK_PUT_CHAR_DIRECTLY_INTO_COVER), void>(a1, a2, a3, a4, a5); }
    static inline auto TaskSay() { return NativeInvoke::Invoke<2886, std::to_underlying(NativeHashes::TASK_SAY), Any>(); }
    static inline auto TaskSeekCoverFromPed(Ped ped, Any a2, Any a3) { return NativeInvoke::Invoke<2887, std::to_underlying(NativeHashes::TASK_SEEK_COVER_FROM_PED), void>(ped, a2, a3); }
    static inline auto TaskSeekCoverFromPos(Ped ped, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2888, std::to_underlying(NativeHashes::TASK_SEEK_COVER_FROM_POS), void>(ped, a2, a3, a4, a5); }
    static inline auto TaskSeekCoverToCoords(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<2889, std::to_underlying(NativeHashes::TASK_SEEK_COVER_TO_COORDS), void>(ped, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto TaskSeekCoverToCoverPoint(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2890, std::to_underlying(NativeHashes::TASK_SEEK_COVER_TO_COVER_POINT), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskSeekCoverToObject(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2891, std::to_underlying(NativeHashes::TASK_SEEK_COVER_TO_OBJECT), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskSetCharDecisionMaker(Ped ped, DecisionMaker dm) { return NativeInvoke::Invoke<2892, std::to_underlying(NativeHashes::TASK_SET_CHAR_DECISION_MAKER), void>(ped, dm); }
    static inline auto TaskSetCombatDecisionMaker(Ped ped, DecisionMaker dm) { return NativeInvoke::Invoke<2893, std::to_underlying(NativeHashes::TASK_SET_COMBAT_DECISION_MAKER), void>(ped, dm); }
    static inline auto TaskSetIgnoreWeaponRangeFlag(Ped ped, bool ignore) { return NativeInvoke::Invoke<2894, std::to_underlying(NativeHashes::TASK_SET_IGNORE_WEAPON_RANGE_FLAG), void>(ped, ignore); }
    static inline auto TaskShakeFist(Ped ped) { return NativeInvoke::Invoke<2895, std::to_underlying(NativeHashes::TASK_SHAKE_FIST), void>(ped); }
    static inline auto TaskShimmy(Ped ped, Any a2) { return NativeInvoke::Invoke<2896, std::to_underlying(NativeHashes::TASK_SHIMMY), void>(ped, a2); }
    static inline auto TaskShimmyClimbUp(Ped ped) { return NativeInvoke::Invoke<2897, std::to_underlying(NativeHashes::TASK_SHIMMY_CLIMB_UP), bool>(ped); }
    static inline auto TaskShimmyInDirection(Ped ped, Any a2) { return NativeInvoke::Invoke<2898, std::to_underlying(NativeHashes::TASK_SHIMMY_IN_DIRECTION), bool>(ped, a2); }
    static inline auto TaskShimmyLetGo(Ped ped) { return NativeInvoke::Invoke<2899, std::to_underlying(NativeHashes::TASK_SHIMMY_LET_GO), bool>(ped); }
    static inline auto TaskShootAtChar(Ped shooter, Ped victim, int32_t time, ShootMode shootmode) { return NativeInvoke::Invoke<2900, std::to_underlying(NativeHashes::TASK_SHOOT_AT_CHAR), void>(shooter, victim, time, shootmode); }
    static inline auto TaskShootAtCoord(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2901, std::to_underlying(NativeHashes::TASK_SHOOT_AT_COORD), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskShuffleToNextCarSeat(Ped ped, Any a2) { return NativeInvoke::Invoke<2902, std::to_underlying(NativeHashes::TASK_SHUFFLE_TO_NEXT_CAR_SEAT), void>(ped, a2); }
    static inline auto TaskSitDown(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2903, std::to_underlying(NativeHashes::TASK_SIT_DOWN), void>(ped, a2, a3, a4); }
    static inline auto TaskSitDownInstantly(Ped ped, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2904, std::to_underlying(NativeHashes::TASK_SIT_DOWN_INSTANTLY), void>(ped, a2, a3, a4); }
    static inline auto TaskSitDownOnNearestObject(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<2905, std::to_underlying(NativeHashes::TASK_SIT_DOWN_ON_NEAREST_OBJECT), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto TaskSitDownOnObject(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8, Any a9, Any a10) { return NativeInvoke::Invoke<2906, std::to_underlying(NativeHashes::TASK_SIT_DOWN_ON_OBJECT), void>(ped, a2, a3, a4, a5, a6, a7, a8, a9, a10); }
    static inline auto TaskSitDownOnSeat(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6, Any a7, Any a8) { return NativeInvoke::Invoke<2907, std::to_underlying(NativeHashes::TASK_SIT_DOWN_ON_SEAT), void>(ped, a2, a3, a4, a5, a6, a7, a8); }
    static inline auto TaskSitDownPlayAnim() { return NativeInvoke::Invoke<2908, std::to_underlying(NativeHashes::TASK_SIT_DOWN_PLAY_ANIM), Any>(); }
    static inline auto TaskSmartFleeChar(Ped ped, Ped fleeFromPed, float unknown0_100, uint32_t duration) { return NativeInvoke::Invoke<2909, std::to_underlying(NativeHashes::TASK_SMART_FLEE_CHAR), void>(ped, fleeFromPed, unknown0_100, duration); }
    static inline auto TaskSmartFleeCharPreferringPavements(Ped ped, Ped fleeFromPed, float unknown0_100, uint32_t duration) { return NativeInvoke::Invoke<2910, std::to_underlying(NativeHashes::TASK_SMART_FLEE_CHAR_PREFERRING_PAVEMENTS), void>(ped, fleeFromPed, unknown0_100, duration); }
    static inline auto TaskSmartFleePoint(Ped ped, float x, float y, float z, float unknown0_100, uint32_t duration) { return NativeInvoke::Invoke<2911, std::to_underlying(NativeHashes::TASK_SMART_FLEE_POINT), void>(ped, x, y, z, unknown0_100, duration); }
    static inline auto TaskSmartFleePointPreferringPavements(Ped ped, float x, float y, float z, float radius, int32_t time_prob) { return NativeInvoke::Invoke<2912, std::to_underlying(NativeHashes::TASK_SMART_FLEE_POINT_PREFERRING_PAVEMENTS), void>(ped, x, y, z, radius, time_prob); }
    static inline auto TaskSpaceShipGoToCoord() { return NativeInvoke::Invoke<2913, std::to_underlying(NativeHashes::TASK_SPACE_SHIP_GO_TO_COORD), Any>(); }
    static inline auto TaskStandGuard(Ped ped, float x, float y, float z, float a5, float a6, bool a7, int a8) { return NativeInvoke::Invoke<2914, std::to_underlying(NativeHashes::TASK_STAND_GUARD), void>(ped, x, y, z, a5, a6, a7, a8); }
    static inline auto TaskStandStill(Ped ped, int32_t duration) { return NativeInvoke::Invoke<2915, std::to_underlying(NativeHashes::TASK_STAND_STILL), void>(ped, duration); }
    static inline auto TaskStartScenarioAtPosition(Ped ped, Any a2, Any a3, Any a4, Any a5, Any a6) { return NativeInvoke::Invoke<2916, std::to_underlying(NativeHashes::TASK_START_SCENARIO_AT_POSITION), void>(ped, a2, a3, a4, a5, a6); }
    static inline auto TaskStartScenarioInPlace(Ped ped, Any a2, Any a3) { return NativeInvoke::Invoke<2917, std::to_underlying(NativeHashes::TASK_START_SCENARIO_IN_PLACE), void>(ped, a2, a3); }
    static inline auto TaskSwapWeapon(Ped ped, uint32_t weapon) { return NativeInvoke::Invoke<2918, std::to_underlying(NativeHashes::TASK_SWAP_WEAPON), void>(ped, weapon); }
    static inline auto TaskSwimToCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2919, std::to_underlying(NativeHashes::TASK_SWIM_TO_COORD), void>(ped, x, y, z); }
    static inline auto TaskTired(Ped ped, int a2) { return NativeInvoke::Invoke<2920, std::to_underlying(NativeHashes::TASK_TIRED), void>(ped, a2); }
    static inline auto TaskToggleDuck(Ped ped, int a2) { return NativeInvoke::Invoke<2921, std::to_underlying(NativeHashes::TASK_TOGGLE_DUCK), void>(ped, a2); }
    static inline auto TaskTogglePedThreatScanner(Ped ped, bool a2, bool a3, bool a4) { return NativeInvoke::Invoke<2922, std::to_underlying(NativeHashes::TASK_TOGGLE_PED_THREAT_SCANNER), void>(ped, a2, a3, a4); }
    static inline auto TaskTurnCharToFaceChar(Ped ped, Ped targetPed) { return NativeInvoke::Invoke<2923, std::to_underlying(NativeHashes::TASK_TURN_CHAR_TO_FACE_CHAR), void>(ped, targetPed); }
    static inline auto TaskTurnCharToFaceCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<2924, std::to_underlying(NativeHashes::TASK_TURN_CHAR_TO_FACE_COORD), void>(ped, x, y, z); }
    static inline auto TaskUseMobilePhone(Ped ped, bool use) { return NativeInvoke::Invoke<2925, std::to_underlying(NativeHashes::TASK_USE_MOBILE_PHONE), void>(ped, use); }
    static inline auto TaskUseMobilePhoneTimed(Ped ped, uint32_t duration) { return NativeInvoke::Invoke<2926, std::to_underlying(NativeHashes::TASK_USE_MOBILE_PHONE_TIMED), void>(ped, duration); }
    static inline auto TaskUseNearestScenarioToPos(Ped ped, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2927, std::to_underlying(NativeHashes::TASK_USE_NEAREST_SCENARIO_TO_POS), void>(ped, a2, a3, a4, a5); }
    static inline auto TaskUseNearestScenarioToPosWarp(Ped ped, Any a2, Any a3, Any a4, Any a5) { return NativeInvoke::Invoke<2928, std::to_underlying(NativeHashes::TASK_USE_NEAREST_SCENARIO_TO_POS_WARP), void>(ped, a2, a3, a4, a5); }
    static inline auto TaskWanderStandard(Ped ped) { return NativeInvoke::Invoke<2929, std::to_underlying(NativeHashes::TASK_WANDER_STANDARD), void>(ped); }
    static inline auto TaskWarpCharIntoCarAsDriver(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<2930, std::to_underlying(NativeHashes::TASK_WARP_CHAR_INTO_CAR_AS_DRIVER), void>(ped, vehicle); }
    static inline auto TaskWarpCharIntoCarAsPassenger(Ped ped, Vehicle vehicle, uint32_t seatIndex) { return NativeInvoke::Invoke<2931, std::to_underlying(NativeHashes::TASK_WARP_CHAR_INTO_CAR_AS_PASSENGER), void>(ped, vehicle, seatIndex); }
    static inline auto TeleportNetworkPlayer() { return NativeInvoke::Invoke<2932, std::to_underlying(NativeHashes::TELEPORT_NETWORK_PLAYER), Any>(); }
    static inline auto TellNetPlayerToStartPlaying(Any a1, Any a2) { return NativeInvoke::Invoke<2933, std::to_underlying(NativeHashes::TELL_NET_PLAYER_TO_START_PLAYING), void>(a1, a2); }
    static inline auto TerminateAllScriptsForNetworkGame() { return NativeInvoke::Invoke<2934, std::to_underlying(NativeHashes::TERMINATE_ALL_SCRIPTS_FOR_NETWORK_GAME), void>(); }
    static inline auto TerminateAllScriptsWithThisName(char* name) { return NativeInvoke::Invoke<2935, std::to_underlying(NativeHashes::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME), void>(name); }
    static inline auto TerminateThisScript() { return NativeInvoke::Invoke<2936, std::to_underlying(NativeHashes::TERMINATE_THIS_SCRIPT), void>(); }
    static inline auto ThisScriptIsSafeForNetworkGame() { return NativeInvoke::Invoke<2937, std::to_underlying(NativeHashes::THIS_SCRIPT_IS_SAFE_FOR_NETWORK_GAME), void>(); }
    static inline auto ThisScriptShouldBeSaved() { return NativeInvoke::Invoke<2938, std::to_underlying(NativeHashes::THIS_SCRIPT_SHOULD_BE_SAVED), void>(); }
    static inline auto TimerA() { return NativeInvoke::Invoke<2939, std::to_underlying(NativeHashes::TIMERA), uint32_t>(); }
    static inline auto TimerB() { return NativeInvoke::Invoke<2940, std::to_underlying(NativeHashes::TIMERB), uint32_t>(); }
    static inline auto TimerC() { return NativeInvoke::Invoke<2941, std::to_underlying(NativeHashes::TIMERC), int32_t>(); }
    static inline auto Timestep() { return NativeInvoke::Invoke<2942, std::to_underlying(NativeHashes::TIMESTEP), float>(); }
    static inline auto TimestepUnwarped() { return NativeInvoke::Invoke<2943, std::to_underlying(NativeHashes::TIMESTEPUNWARPED), float>(); }
    static inline auto ToFloat(uint32_t value) { return NativeInvoke::Invoke<2944, std::to_underlying(NativeHashes::TO_FLOAT), float>(value); }
    static inline auto ToggleCharDucking(Ped ped) { return NativeInvoke::Invoke<2945, std::to_underlying(NativeHashes::TOGGLE_CHAR_DUCKING), Any>(ped); }
    static inline auto ToggleToplevelSprite(bool toggle) { return NativeInvoke::Invoke<2946, std::to_underlying(NativeHashes::TOGGLE_TOPLEVEL_SPRITE), void>(toggle); }
    static inline auto TrainLeaveStation(Vehicle train) { return NativeInvoke::Invoke<2947, std::to_underlying(NativeHashes::TRAIN_LEAVE_STATION), void>(train); }
    static inline auto TriggerLoadingMusicOnNextFade() { return NativeInvoke::Invoke<2948, std::to_underlying(NativeHashes::TRIGGER_LOADING_MUSIC_ON_NEXT_FADE), void>(); }
    static inline auto TriggerMissionCompleteAudio(int32_t id) { return NativeInvoke::Invoke<2949, std::to_underlying(NativeHashes::TRIGGER_MISSION_COMPLETE_AUDIO), void>(id); }
    static inline auto TriggerPoliceReport(char* name) { return NativeInvoke::Invoke<2950, std::to_underlying(NativeHashes::TRIGGER_POLICE_REPORT), void>(name); }
    static inline auto TriggerPtfx(char* name, float x, float y, float z, float a5, float a6, float a7, uint32_t flags) { return NativeInvoke::Invoke<2951, std::to_underlying(NativeHashes::TRIGGER_PTFX), bool>(name, x, y, z, a5, a6, a7, flags); }
    static inline auto TriggerPtfxOnObj(char* name, Object obj, float x, float y, float z, float a6, float a7, float a8, uint32_t flags) { return NativeInvoke::Invoke<2952, std::to_underlying(NativeHashes::TRIGGER_PTFX_ON_OBJ), bool>(name, obj, x, y, z, a6, a7, a8, flags); }
    static inline auto TriggerPtfxOnObjBone(char* name, Object obj, float x, float y, float z, float a6, float a7, float a8, int32_t objbone, uint32_t flags) { return NativeInvoke::Invoke<2953, std::to_underlying(NativeHashes::TRIGGER_PTFX_ON_OBJ_BONE), bool>(name, obj, x, y, z, a6, a7, a8, objbone, flags); }
    static inline auto TriggerPtfxOnPed(char* name, Ped ped, float x, float y, float z, float a6, float a7, float a8, uint32_t flags) { return NativeInvoke::Invoke<2954, std::to_underlying(NativeHashes::TRIGGER_PTFX_ON_PED), bool>(name, ped, x, y, z, a6, a7, a8, flags); }
    static inline auto TriggerPtfxOnPedBone(char* name, Ped ped, float x, float y, float z, float a6, float a7, float a8, int32_t pedbone, uint32_t flags) { return NativeInvoke::Invoke<2955, std::to_underlying(NativeHashes::TRIGGER_PTFX_ON_PED_BONE), bool>(name, ped, x, y, z, a6, a7, a8, pedbone, flags); }
    static inline auto TriggerPtfxOnVeh(char* name, Vehicle veh, float x, float y, float z, float a6, float a7, float a8, float a9) { return NativeInvoke::Invoke<2956, std::to_underlying(NativeHashes::TRIGGER_PTFX_ON_VEH), bool>(name, veh, x, y, z, a6, a7, a8, a9); }
    static inline auto TriggerVehAlarm(Vehicle car) { return NativeInvoke::Invoke<2957, std::to_underlying(NativeHashes::TRIGGER_VEH_ALARM), void>(car); }
    static inline auto TriggerVigilanteCrime(int32_t id, float x, float y, float z) { return NativeInvoke::Invoke<2958, std::to_underlying(NativeHashes::TRIGGER_VIGILANTE_CRIME), void>(id, x, y, z); }
    static inline auto TurnCarToFaceCoord(Car car, float x, float y) { return NativeInvoke::Invoke<2959, std::to_underlying(NativeHashes::TURN_CAR_TO_FACE_COORD), void>(car, x, y); }
    static inline auto TurnOffRadiohudInLobby() { return NativeInvoke::Invoke<2960, std::to_underlying(NativeHashes::TURN_OFF_RADIOHUD_IN_LOBBY), void>(); }
    static inline auto TurnOffVehicleExtra(Vehicle veh, int32_t extra, bool turnoff) { return NativeInvoke::Invoke<2961, std::to_underlying(NativeHashes::TURN_OFF_VEHICLE_EXTRA), void>(veh, extra, turnoff); }
    static inline auto TurnOnRadiohudInLobby() { return NativeInvoke::Invoke<2962, std::to_underlying(NativeHashes::TURN_ON_RADIOHUD_IN_LOBBY), Any>(); }
    static inline auto UnattachCam(int32_t cam) { return NativeInvoke::Invoke<2963, std::to_underlying(NativeHashes::UNATTACH_CAM), void>(cam); }
    static inline auto UnfreezeRadioStation(char* radiostation) { return NativeInvoke::Invoke<2964, std::to_underlying(NativeHashes::UNFREEZE_RADIO_STATION), void>(radiostation); }
    static inline auto UninheritCamRoll(int32_t cam) { return NativeInvoke::Invoke<2965, std::to_underlying(NativeHashes::UNINHERIT_CAM_ROLL), void>(cam); }
    static inline auto UnloadTextFont() { return NativeInvoke::Invoke<2966, std::to_underlying(NativeHashes::UNLOAD_TEXT_FONT), void>(); }
    static inline auto UnlockGenericNewsStory(int32_t StoryId) { return NativeInvoke::Invoke<2967, std::to_underlying(NativeHashes::UNLOCK_GENERIC_NEWS_STORY), void>(StoryId); }
    static inline auto UnlockLazlowStation() { return NativeInvoke::Invoke<2968, std::to_underlying(NativeHashes::UNLOCK_LAZLOW_STATION), void>(); }
    static inline auto UnlockMissionNewsStory(int32_t id) { return NativeInvoke::Invoke<2969, std::to_underlying(NativeHashes::UNLOCK_MISSION_NEWS_STORY), void>(id); }
    static inline auto UnlockRagdoll(Ped ped, bool value) { return NativeInvoke::Invoke<2970, std::to_underlying(NativeHashes::UNLOCK_RAGDOLL), void>(ped, value); }
    static inline auto UnmarkAllRoadNodesAsDontWander() { return NativeInvoke::Invoke<2971, std::to_underlying(NativeHashes::UNMARK_ALL_ROAD_NODES_AS_DONT_WANDER), void>(); }
    static inline auto UnobfuscateInt(int32_t count, int32_t* val) { return NativeInvoke::Invoke<2972, std::to_underlying(NativeHashes::UNOBFUSCATE_INT), void>(count, val); }
    static inline auto UnobfuscateIntArray(Any a1, Any a2) { return NativeInvoke::Invoke<2973, std::to_underlying(NativeHashes::UNOBFUSCATE_INT_ARRAY), void>(a1, a2); }
    static inline auto UnobfuscateString(char* str) { return NativeInvoke::Invoke<2974, std::to_underlying(NativeHashes::UNOBFUSCATE_STRING), char*>(str); }
    static inline auto UnpauseGame() { return NativeInvoke::Invoke<2975, std::to_underlying(NativeHashes::UNPAUSE_GAME), void>(); }
    static inline auto UnpausePlaybackRecordedCar(Car car) { return NativeInvoke::Invoke<2976, std::to_underlying(NativeHashes::UNPAUSE_PLAYBACK_RECORDED_CAR), void>(car); }
    static inline auto UnpauseRadio() { return NativeInvoke::Invoke<2977, std::to_underlying(NativeHashes::UNPAUSE_RADIO), void>(); }
    static inline auto UnpointCam(int32_t cam) { return NativeInvoke::Invoke<2978, std::to_underlying(NativeHashes::UNPOINT_CAM), void>(cam); }
    static inline auto UnregisterScriptWithAudio() { return NativeInvoke::Invoke<2979, std::to_underlying(NativeHashes::UNREGISTER_SCRIPT_WITH_AUDIO), void>(); }
    static inline auto UnsetCharMeleeMovementConstaintBox(Ped ped) { return NativeInvoke::Invoke<2980, std::to_underlying(NativeHashes::UNSET_CHAR_MELEE_MOVEMENT_CONSTAINT_BOX), void>(ped); }
    static inline auto UpdateLoadScene() { return NativeInvoke::Invoke<2981, std::to_underlying(NativeHashes::UPDATE_LOAD_SCENE), bool>(); }
    static inline auto UpdateNetworkRelativeScore(Any a1, Any a2, Any a3) { return NativeInvoke::Invoke<2982, std::to_underlying(NativeHashes::UPDATE_NETWORK_RELATIVE_SCORE), void>(a1, a2, a3); }
    static inline auto UpdateNetworkStatistics(Any a1, Any a2, Any a3, Any a4) { return NativeInvoke::Invoke<2983, std::to_underlying(NativeHashes::UPDATE_NETWORK_STATISTICS), void>(a1, a2, a3, a4); }
    static inline auto UpdatePedPhysicalAttachmentPosition(Ped ped, float x0, float y0, float z0, float x1, float y1) { return NativeInvoke::Invoke<2984, std::to_underlying(NativeHashes::UPDATE_PED_PHYSICAL_ATTACHMENT_POSITION), void>(ped, x0, y0, z0, x1, y1); }
    static inline auto UpdatePlayerLcpdScore() { return NativeInvoke::Invoke<2985, std::to_underlying(NativeHashes::UPDATE_PLAYER_LCPD_SCORE), Any>(); }
    static inline auto UpdatePtfxOffsets(uint32_t ptfx, float x, float y, float z, float a5, float a6, float a7) { return NativeInvoke::Invoke<2986, std::to_underlying(NativeHashes::UPDATE_PTFX_OFFSETS), void>(ptfx, x, y, z, a5, a6, a7); }
    static inline auto UpdatePtfxTint(uint32_t ptfx, float r, float g, float b, float a) { return NativeInvoke::Invoke<2987, std::to_underlying(NativeHashes::UPDATE_PTFX_TINT), void>(ptfx, r, g, b, a); }
    static inline auto UseDetonator() { return NativeInvoke::Invoke<2988, std::to_underlying(NativeHashes::USE_DETONATOR), Any>(); }
    static inline auto UseMask(bool use) { return NativeInvoke::Invoke<2989, std::to_underlying(NativeHashes::USE_MASK), void>(use); }
    static inline auto UsePlayerColourInsteadOfTeamColour(Any a1) { return NativeInvoke::Invoke<2990, std::to_underlying(NativeHashes::USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR), void>(a1); }
    static inline auto UsePreviousFontSettings() { return NativeInvoke::Invoke<2991, std::to_underlying(NativeHashes::USE_PREVIOUS_FONT_SETTINGS), void>(); }
    static inline auto UsingStandardControls() { return NativeInvoke::Invoke<2992, std::to_underlying(NativeHashes::USING_STANDARD_CONTROLS), bool>(); }
    static inline auto Vdist(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2993, std::to_underlying(NativeHashes::VDIST), float>(x0, y0, z0, x1, y1, z1); }
    static inline auto Vdist2(float x0, float y0, float z0, float x1, float y1, float z1) { return NativeInvoke::Invoke<2994, std::to_underlying(NativeHashes::VDIST2), float>(x0, y0, z0, x1, y1, z1); }
    static inline auto VehicleCanBeTargettedByHsMissile(Car car, bool set) { return NativeInvoke::Invoke<2995, std::to_underlying(NativeHashes::VEHICLE_CAN_BE_TARGETTED_BY_HS_MISSILE), void>(car, set); }
    static inline auto VehicleDoesProvideCover(Vehicle veh, bool cover) { return NativeInvoke::Invoke<2996, std::to_underlying(NativeHashes::VEHICLE_DOES_PROVIDE_COVER), void>(veh, cover); }
    static inline auto Vmag(float x, float y, float z) { return NativeInvoke::Invoke<2997, std::to_underlying(NativeHashes::VMAG), float>(x, y, z); }
    static inline auto Vmag2(float x, float y, float z) { return NativeInvoke::Invoke<2998, std::to_underlying(NativeHashes::VMAG2), float>(x, y, z); }
    static inline auto Wait(int32_t timeMS) { return NativeInvoke::Invoke<2999, std::to_underlying(NativeHashes::WAIT), void>(timeMS); }
    static inline auto WaitUnpaused() { return NativeInvoke::Invoke<3000, std::to_underlying(NativeHashes::WAITUNPAUSED), Any>(); }
    static inline auto WaitUnwarped() { return NativeInvoke::Invoke<3001, std::to_underlying(NativeHashes::WAITUNWARPED), Any>(); }
    static inline auto WantedStarsAreFlashing() { return NativeInvoke::Invoke<3002, std::to_underlying(NativeHashes::WANTED_STARS_ARE_FLASHING), bool>(); }
    static inline auto WarpCharFromCarToCar(Ped ped, Vehicle vehicle, uint32_t seatIndex) { return NativeInvoke::Invoke<3003, std::to_underlying(NativeHashes::WARP_CHAR_FROM_CAR_TO_CAR), void>(ped, vehicle, seatIndex); }
    static inline auto WarpCharFromCarToCoord(Ped ped, float x, float y, float z) { return NativeInvoke::Invoke<3004, std::to_underlying(NativeHashes::WARP_CHAR_FROM_CAR_TO_COORD), void>(ped, x, y, z); }
    static inline auto WarpCharIntoCar(Ped ped, Vehicle vehicle) { return NativeInvoke::Invoke<3005, std::to_underlying(NativeHashes::WARP_CHAR_INTO_CAR), void>(ped, vehicle); }
    static inline auto WarpCharIntoCarAsPassenger(Ped ped, Vehicle vehicle, uint32_t seatIndex) { return NativeInvoke::Invoke<3006, std::to_underlying(NativeHashes::WARP_CHAR_INTO_CAR_AS_PASSENGER), void>(ped, vehicle, seatIndex); }
    static inline auto WasCutsceneSkipped() { return NativeInvoke::Invoke<3007, std::to_underlying(NativeHashes::WAS_CUTSCENE_SKIPPED), bool>(); }
    static inline auto WasPedKilledByHeadshot(Ped ped) { return NativeInvoke::Invoke<3008, std::to_underlying(NativeHashes::WAS_PED_KILLED_BY_HEADSHOT), bool>(ped); }
    static inline auto WasPedSkeletonUpdated(Ped ped) { return NativeInvoke::Invoke<3009, std::to_underlying(NativeHashes::WAS_PED_SKELETON_UPDATED), bool>(ped); }
    static inline auto WashVehicleTextures(Vehicle vehicle, uint32_t intensity) { return NativeInvoke::Invoke<3010, std::to_underlying(NativeHashes::WASH_VEHICLE_TEXTURES), void>(vehicle, intensity); }
    static inline auto WhatWillPlayerPickup(int32_t player) { return NativeInvoke::Invoke<3011, std::to_underlying(NativeHashes::WHAT_WILL_PLAYER_PICKUP), Object>(player); }
    static inline auto WinchCanPickObjectUp(Object obj, bool can) { return NativeInvoke::Invoke<3012, std::to_underlying(NativeHashes::WINCH_CAN_PICK_OBJECT_UP), void>(obj, can); }
    static inline auto WriteLobbyPreference() { return NativeInvoke::Invoke<3013, std::to_underlying(NativeHashes::WRITE_LOBBY_PREFERENCE), Any>(); }
};

export class NativeOverride
{
public:
    static auto Register(auto hash, auto fn, std::string_view dest_pattern_str, size_t fn_size)
    {
        auto nativeHash = std::to_underlying(hash);
        auto pattern = hook::pattern(pattern_str(0x68, to_bytes(nativeHash))); // push 0x...
        auto addr = *pattern.get_first<uintptr_t>(-4);
        auto range = hook::range_pattern(addr, addr + fn_size, dest_pattern_str);
        if (!range.empty())
        {
            if (dest_pattern_str.starts_with("E8"))
                return injector::MakeCALL(range.get_first(0), fn, true).get();
            else if (dest_pattern_str.starts_with("E9"))
                return injector::MakeJMP(range.get_first(0), fn, true).get();
        }
        return injector::auto_pointer(nullptr);
    }

    static inline std::unordered_map<std::string_view, std::pair<std::function<void()>, int>> customCheatHandlers;
    static inline injector::hook_back<decltype(&Natives::StopMobilePhoneRinging)> hbNATIVE_STOP_MOBILE_PHONE_RINGING;
    static void __cdecl NATIVE_STOP_MOBILE_PHONE_RINGING()
    {
        if (rage::scrProgram::ms_pGlobals)
        {
            auto pGlobals = *rage::scrProgram::ms_pGlobals;
            for (auto i : { 123, 126, 127 })
            {
                auto phoneNumber = std::string_view((const char*)&pGlobals[i], 10);
                if (customCheatHandlers.contains(phoneNumber))
                {
                    customCheatHandlers[phoneNumber].second++;
                    if (customCheatHandlers[phoneNumber].second > 2)
                    {
                        customCheatHandlers[phoneNumber].second = 0;
                        customCheatHandlers[phoneNumber].first();
                        break;
                    }
                }
            }
        }
        return hbNATIVE_STOP_MOBILE_PHONE_RINGING.fun();
    }

    static void RegisterPhoneCheat(std::string_view phone_number, std::function<void()>&& fn)
    {
        customCheatHandlers[phone_number].first = std::forward<std::function<void()>>(fn);
    }

    NativeOverride()
    {
        hbNATIVE_STOP_MOBILE_PHONE_RINGING.fun = Register(Natives::NativeHashes::STOP_MOBILE_PHONE_RINGING, NATIVE_STOP_MOBILE_PHONE_RINGING, "E9", 5);
    }
} CheatOverride;